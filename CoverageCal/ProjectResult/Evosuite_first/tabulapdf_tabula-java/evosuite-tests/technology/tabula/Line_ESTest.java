/*
 * This file was automatically generated by EvoSuite
 * Sat Feb 10 09:53:47 GMT 2024
 */

package technology.tabula;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import technology.tabula.Line;
import technology.tabula.TextChunk;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false) 
public class Line_ESTest extends Line_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Line line0 = new Line();
      TextChunk textChunk0 = new TextChunk(236.93358F, 0.0F, 0.0F, 0.0F);
      List<TextChunk> list0 = textChunk0.squeeze((Character) null, 339);
      line0.setTextElements(list0);
      line0.addTextChunk(textChunk0);
      line0.addTextChunk(0, textChunk0);
      assertEquals(236.93358F, line0.height, 0.01F);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Line line0 = new Line();
      TextChunk textChunk0 = new TextChunk(4684.6978F, 0.0F, 0.0F, (-1382.9923F));
      line0.addTextChunk(textChunk0);
      Character character0 = new Character('\'');
      Line line1 = Line.removeRepeatedCharacters(line0, character0, (-3689));
      assertEquals(4684.6978F, line0.y, 0.01F);
      assertTrue(line1.equals((Object)line0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Line line0 = new Line();
      Character character0 = Character.valueOf('3');
      TextChunk textChunk0 = new TextChunk(0.0F, 1.0F, 0.0F, '3');
      List<TextChunk> list0 = textChunk0.squeeze(character0, (-1019));
      line0.setTextElements(list0);
      Line line1 = Line.removeRepeatedCharacters(line0, character0, 11);
      assertEquals(1.0F, line1.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Line line0 = new Line();
      TextChunk textChunk0 = new TextChunk(0.0F, 0.0F, 0.5F, 0.0F);
      textChunk0.setFrameFromCenter((-1.0), 1386.87839472147, (double) 0.0F, (double) 0.0F);
      line0.addTextChunk(textChunk0);
      Character character0 = new Character('o');
      Line line1 = Line.removeRepeatedCharacters(line0, character0, 3);
      assertEquals(2773.7568F, line1.height, 0.01F);
      assertNotSame(line1, line0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Line line0 = new Line();
      TextChunk textChunk0 = new TextChunk((-588.74023F), (-2790.2083F), (-1.0F), 0.3F);
      line0.addTextChunk(textChunk0);
      Character character0 = Character.valueOf('\"');
      Line.removeRepeatedCharacters(line0, character0, (-936));
      assertEquals(0.3F, line0.height, 0.01F);
      assertEquals((-588.4402343630791), line0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Line line0 = new Line();
      line0.setTextElements((List<TextChunk>) null);
      List<TextChunk> list0 = line0.getTextElements();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Line line0 = new Line();
      TextChunk textChunk0 = TextChunk.EMPTY;
      line0.addTextChunk(0, textChunk0);
      List<TextChunk> list0 = line0.getTextElements();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Line line0 = new Line();
      TextChunk textChunk0 = new TextChunk(236.93358F, 0.0F, 0.0F, 0.0F);
      line0.addTextChunk(339, textChunk0);
      // Undeclared exception!
      try { 
        line0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("technology.tabula.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Character character0 = Character.valueOf('F');
      // Undeclared exception!
      try { 
        Line.removeRepeatedCharacters((Line) null, character0, 'F');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("technology.tabula.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Line line0 = new Line();
      // Undeclared exception!
      try { 
        line0.addTextChunk((TextChunk) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Line line0 = new Line();
      TextChunk textChunk0 = new TextChunk(0.0F, 0.0F, 0.0F, 0.0F);
      // Undeclared exception!
      line0.addTextChunk(2147483645, textChunk0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Line line0 = new Line();
      // Undeclared exception!
      try { 
        line0.addTextChunk(13, (TextChunk) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.geom.Rectangle2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Line line0 = new Line();
      TextChunk textChunk0 = TextChunk.EMPTY;
      line0.addTextChunk(0, textChunk0);
      Character character0 = Character.valueOf('T');
      Line line1 = Line.removeRepeatedCharacters(line0, character0, 0);
      assertNotSame(line1, line0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Line line0 = new Line();
      TextChunk textChunk0 = TextChunk.EMPTY;
      line0.addTextChunk(0, textChunk0);
      String string0 = line0.toString();
      assertEquals("technology.tabula.Line[x=0.0,y=0.0,w=0.0,h=0.0,bottom=0.000000,right=0.000000,chunks='', ]", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Line line0 = new Line();
      TextChunk textChunk0 = TextChunk.EMPTY;
      line0.addTextChunk(0, textChunk0);
      line0.addTextChunk(0, textChunk0);
      assertEquals(0.0F, line0.height, 0.01F);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Line line0 = new Line();
      TextChunk textChunk0 = new TextChunk(0.0F, 0.0F, 0.5F, 0.0F);
      // Undeclared exception!
      try { 
        line0.addTextChunk((-2863), textChunk0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // i can't be less than 0
         //
         verifyException("technology.tabula.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Line line0 = new Line();
      List<TextChunk> list0 = line0.getTextElements();
      line0.setTextElements(list0);
      assertEquals(0.0, line0.getMaxX(), 0.01);
  }
}
