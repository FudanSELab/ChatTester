/*
 * This file was automatically generated by EvoSuite
 * Sat Feb 10 09:49:38 GMT 2024
 */
package technology.tabula.extractors;


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import technology.tabula.Line;
import technology.tabula.Page;
import technology.tabula.Ruling;
import technology.tabula.TextChunk;
import technology.tabula.extractors.BasicExtractionAlgorithm;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false)
public class BasicExtractionAlgorithm_ESTest extends BasicExtractionAlgorithm_ESTest_scaffolding {


@Test(timeout = 4000)
public void test0() throws Throwable {
    LinkedList<Line> linkedList0 = new LinkedList<Line>();
    Line line0 = new Line();
    linkedList0.add(line0);
    List<Float> list0 = BasicExtractionAlgorithm.columnPositions(linkedList0);
    LinkedList<Ruling> linkedList1 = new LinkedList<Ruling>();
    BasicExtractionAlgorithm basicExtractionAlgorithm0 = new BasicExtractionAlgorithm(linkedList1);
    // Undeclared exception!
    try {
        basicExtractionAlgorithm0.extract((Page) null, list0);
        fail("Expecting exception: NullPointerException");
    } catch (NullPointerException e) {
        // 
        // no message in exception (getMessage() returned null)
        // 
        verifyException("technology.tabula.extractors.BasicExtractionAlgorithm", e);
    }
}


@Test(timeout = 4000)
public void test1() throws Throwable {
    LinkedList<Ruling> linkedList0 = new LinkedList<Ruling>();
    BasicExtractionAlgorithm basicExtractionAlgorithm0 = new BasicExtractionAlgorithm(linkedList0);
    String string0 = basicExtractionAlgorithm0.toString();
    assertEquals("stream", string0);
}

}
