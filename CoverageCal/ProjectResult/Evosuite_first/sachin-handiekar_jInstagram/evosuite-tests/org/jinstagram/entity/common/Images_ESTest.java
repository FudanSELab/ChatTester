/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 27 03:42:55 GMT 2024
 */

package org.jinstagram.entity.common;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jinstagram.entity.common.ImageData;
import org.jinstagram.entity.common.Images;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false) 
public class Images_ESTest extends Images_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Images images0 = new Images();
      ImageData imageData0 = new ImageData();
      imageData0.setImageWidth(2);
      images0.setThumbnail(imageData0);
      ImageData imageData1 = images0.getThumbnail();
      assertSame(imageData1, imageData0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Images images0 = new Images();
      ImageData imageData0 = new ImageData();
      images0.setThumbnail(imageData0);
      imageData0.setImageWidth((-1142));
      ImageData imageData1 = images0.getThumbnail();
      assertEquals((-1142), imageData1.getImageWidth());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Images images0 = new Images();
      ImageData imageData0 = new ImageData();
      images0.setThumbnail(imageData0);
      ImageData imageData1 = images0.getThumbnail();
      assertSame(imageData1, imageData0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Images images0 = new Images();
      ImageData imageData0 = new ImageData();
      images0.setThumbnail(imageData0);
      imageData0.setImageHeight(1073);
      ImageData imageData1 = images0.getThumbnail();
      assertNull(imageData1.getImageUrl());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Images images0 = new Images();
      ImageData imageData0 = new ImageData();
      imageData0.setImageWidth(2);
      images0.setStandardResolution(imageData0);
      ImageData imageData1 = images0.getStandardResolution();
      assertNull(imageData1.getImageUrl());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Images images0 = new Images();
      ImageData imageData0 = new ImageData();
      imageData0.setImageWidth((-1142));
      images0.setStandardResolution(imageData0);
      ImageData imageData1 = images0.getStandardResolution();
      assertSame(imageData1, imageData0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Images images0 = new Images();
      ImageData imageData0 = new ImageData();
      images0.setStandardResolution(imageData0);
      ImageData imageData1 = images0.getStandardResolution();
      assertEquals(0, imageData1.getImageWidth());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Images images0 = new Images();
      ImageData imageData0 = new ImageData();
      imageData0.setImageHeight(1073);
      images0.setStandardResolution(imageData0);
      ImageData imageData1 = images0.getStandardResolution();
      assertNull(imageData1.getImageUrl());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Images images0 = new Images();
      ImageData imageData0 = new ImageData();
      imageData0.setImageWidth(2);
      images0.setLowResolution(imageData0);
      ImageData imageData1 = images0.getLowResolution();
      assertNull(imageData1.getImageUrl());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Images images0 = new Images();
      ImageData imageData0 = new ImageData();
      images0.setLowResolution(imageData0);
      imageData0.setImageWidth((-1142));
      ImageData imageData1 = images0.getLowResolution();
      assertNull(imageData1.getImageUrl());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Images images0 = new Images();
      ImageData imageData0 = new ImageData();
      images0.setLowResolution(imageData0);
      ImageData imageData1 = images0.getLowResolution();
      assertEquals(0, imageData1.getImageHeight());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Images images0 = new Images();
      ImageData imageData0 = new ImageData();
      imageData0.setImageHeight((-234));
      images0.setLowResolution(imageData0);
      ImageData imageData1 = images0.getLowResolution();
      assertSame(imageData1, imageData0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Images images0 = new Images();
      ImageData imageData0 = images0.getThumbnail();
      assertNull(imageData0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Images images0 = new Images();
      ImageData imageData0 = images0.getLowResolution();
      assertNull(imageData0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Images images0 = new Images();
      ImageData imageData0 = new ImageData();
      images0.setStandardResolution(imageData0);
      imageData0.setImageHeight((-234));
      ImageData imageData1 = images0.getStandardResolution();
      assertEquals(0, imageData1.getImageWidth());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Images images0 = new Images();
      ImageData imageData0 = new ImageData();
      images0.setLowResolution(imageData0);
      imageData0.setImageHeight(1073);
      ImageData imageData1 = images0.getLowResolution();
      assertNull(imageData1.getImageUrl());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Images images0 = new Images();
      ImageData imageData0 = images0.getStandardResolution();
      assertNull(imageData0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Images images0 = new Images();
      String string0 = images0.toString();
      assertEquals("Images [lowResolution=null, standardResolution=null, thumbnail=null]", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Images images0 = new Images();
      ImageData imageData0 = new ImageData();
      images0.setThumbnail(imageData0);
      imageData0.setImageHeight((-234));
      ImageData imageData1 = images0.getThumbnail();
      assertSame(imageData1, imageData0);
  }
}
