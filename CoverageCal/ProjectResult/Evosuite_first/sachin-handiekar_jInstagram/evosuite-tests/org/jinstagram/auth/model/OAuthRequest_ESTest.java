/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 27 03:21:21 GMT 2024
 */

package org.jinstagram.auth.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jinstagram.auth.model.OAuthRequest;
import org.jinstagram.http.Verbs;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false) 
public class OAuthRequest_ESTest extends OAuthRequest_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Verbs verbs0 = Verbs.DELETE;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verbs0, "oauth_");
      oAuthRequest0.addOAuthParameter("oauth_", "po1;qh9e-B");
      Map<String, String> map0 = oAuthRequest0.getOauthParameters();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Verbs verbs0 = Verbs.DELETE;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verbs0, (String) null);
      // Undeclared exception!
      try { 
        oAuthRequest0.addOAuthParameter((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      OAuthRequest oAuthRequest0 = new OAuthRequest((Verbs) null, "~!wbaBK>rB");
      // Undeclared exception!
      try { 
        oAuthRequest0.addOAuthParameter("0rGM@-VwEd", "4");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // OAuth parameters must either be 'scope' or start with 'oauth_'
         //
         verifyException("org.jinstagram.auth.model.OAuthRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Verbs verbs0 = Verbs.DELETE;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verbs0, "oauth_");
      String string0 = oAuthRequest0.toString();
      assertEquals("@OAuthRequest(DELETE, oauth_)", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Verbs verbs0 = Verbs.DELETE;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verbs0, "oauth_");
      Map<String, String> map0 = oAuthRequest0.getOauthParameters();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Verbs verbs0 = Verbs.POST;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verbs0, "scope");
      oAuthRequest0.addOAuthParameter("scope", "scope");
      assertFalse(oAuthRequest0.getConnectionKeepAlive());
  }
}
