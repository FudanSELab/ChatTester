// original test path: /Users/zhi/Documents/PH.D/Project/Testing/ChatTESTER/CodePackage/Prompt2Testing/repo_get/Four_project/sachin-handiekar_jInstagram/src/test/java/org/jinstagram/http/Request_ESTest.java
/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 27 04:43:07 GMT 2024
 */
package org.jinstagram.http;

import java.nio.charset.StandardCharsets;
import java.util.*;
import java.lang.*;
import static org.junit.Assert.*;
import org.junit.Test;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.Proxy;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.jinstagram.http.Request;
import org.jinstagram.http.Verbs;
import org.junit.runner.RunWith;

import java.util.*;
import java.lang.*;
import static org.junit.Assert.*;
import org.junit.Test;
import java.net.HttpURLConnection;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.Proxy;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.jinstagram.http.Request;
import org.jinstagram.http.Verbs;
import org.junit.runner.RunWith;

import java.util.*;
import java.lang.*;
import org.junit.Test;
import static org.junit.Assert.assertEquals;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.Proxy;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.jinstagram.http.Request;
import org.jinstagram.http.Verbs;
import org.junit.runner.RunWith;

import static org.junit.Assert.assertEquals;
import org.junit.Test;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.Proxy;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.jinstagram.http.Request;
import org.jinstagram.http.Verbs;
import org.junit.runner.RunWith;

import java.util.*;
import java.lang.*;
import static org.junit.Assert.assertEquals;
import org.junit.Test;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.Proxy;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.jinstagram.http.Request;
import org.jinstagram.http.Verbs;
import org.junit.runner.RunWith;

import org.junit.Test;
import static org.junit.Assert.assertEquals;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.Proxy;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.jinstagram.http.Request;
import org.jinstagram.http.Verbs;
import org.junit.runner.RunWith;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.Proxy;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.jinstagram.http.Request;
import org.jinstagram.http.Verbs;
import org.junit.runner.RunWith;

import java.nio.charset.Charset;
import java.util.*;
import java.lang.*;
import org.junit.Test;
import static org.junit.Assert.assertEquals;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.Proxy;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.jinstagram.http.Request;
import org.jinstagram.http.Verbs;
import org.junit.runner.RunWith;

import org.junit.Test;
import static org.junit.Assert.assertEquals;
import java.util.concurrent.TimeUnit;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.Proxy;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.jinstagram.http.Request;
import org.jinstagram.http.Verbs;
import org.junit.runner.RunWith;

import org.junit.Test;
import java.net.Proxy;
import static org.junit.Assert.assertEquals;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.Proxy;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.jinstagram.http.Request;
import org.jinstagram.http.Verbs;
import org.junit.runner.RunWith;

import static org.junit.Assert.assertEquals;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.Proxy;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.jinstagram.http.Request;
import org.jinstagram.http.Verbs;
import org.junit.runner.RunWith;

import java.util.*;
import java.lang.*;
import static org.junit.Assert.*;
import org.junit.Test;
import java.io.IOException;
import java.net.HttpURLConnection;
import java.util.HashMap;
import java.util.Map;
import org.jinstagram.http.Request;
import org.jinstagram.http.Response;
import org.jinstagram.http.Verbs;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.Proxy;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.jinstagram.http.Request;
import org.jinstagram.http.Verbs;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false)
public class Request_ESTest extends Request_ESTest_scaffolding {

    @Test
    public void testGetConnectTimeoutInMillis() {
        // Given
        Verbs verb = Verbs.GET;
        String url = "https://example.com";
        Request request = new Request(verb, url);
        int expectedConnectTimeout = 5000; // Assuming a connect timeout of 5000 milliseconds
        request.setConnectTimeout(expectedConnectTimeout, TimeUnit.MILLISECONDS);

        // When
        int actualConnectTimeout = request.getConnectTimeoutInMillis();

        // Then
        assertEquals(expectedConnectTimeout, actualConnectTimeout);
    }

    @Test
    public void testSetReadTimeout() {
        Request request = new Request(Verbs.GET, "https://example.com");
        int duration = 5000; // 5 seconds
        TimeUnit unit = TimeUnit.MILLISECONDS;

        request.setReadTimeout(duration, unit);

        int expectedTimeoutInMillis = 5000;
        int actualTimeoutInMillis = request.getReadTimeoutInMillis();

        assertEquals(expectedTimeoutInMillis, actualTimeoutInMillis);
    }

@Test
public void testAddBodyParameter() {
    Request request = new Request(Verbs.POST, "https://example.com/api");
    request.addBodyParameter("key1", "value1");
    request.addBodyParameter("key2", "value2");

    Map<String, String> expectedBodyParams = new HashMap<String, String>();

    expectedBodyParams.put("key1", "value1");
    expectedBodyParams.put("key2", "value2");
    Map<String, String> actualBodyParams = request.getBodyParams();
    assertEquals(expectedBodyParams, actualBodyParams);
}

    @Test
    public void testGetProxy() {
        // Given
        Verbs verb = Verbs.GET;
        String url = "https://example.com";
        Request request = new Request(verb, url);
        
        Proxy expectedProxy = Proxy.NO_PROXY;
        request.setProxy(expectedProxy);
        
        // When
        Proxy actualProxy = request.getProxy();
        
        // Then
        assertEquals(expectedProxy, actualProxy);
    }

@Test
public void testGetByteBodyContents() {
    Request request = new Request(Verbs.GET, "https://example.com");
    request.addBodyParameter("param1", "value1");
    request.addBodyParameter("param2", "value2");
    byte[] expectedByteBodyContents = "param1=value1&param2=value2".getBytes(StandardCharsets.UTF_8);
    byte[] actualByteBodyContents = request.getByteBodyContents();

    assertArrayEquals(expectedByteBodyContents, actualByteBodyContents);
}

    @Test
    public void testGetQueryStringParams() {
        // Given
        Verbs verb = Verbs.GET;
        String url = "https://example.com/api/resource?param1=value1&param2=value2";
        Request request = new Request(verb, url);
        request.addQuerystringParameter("param3", "value3");

        // When
        Map<String, String> queryStringParams = request.getQueryStringParams();

        // Then
        assertNotNull(queryStringParams);
        assertEquals(3, queryStringParams.size());
        assertEquals("value1", queryStringParams.get("param1"));
        assertEquals("value2", queryStringParams.get("param2"));
        assertEquals("value3", queryStringParams.get("param3"));
    }

    @Test
    public void testGetVerb() {
        Verbs expectedVerb = Verbs.GET;
        String url = "https://example.com/api";
        Request request = new Request(expectedVerb, url);

        Verbs actualVerb = request.getVerb();

        assertEquals(expectedVerb, actualVerb);
    }

    @Test
    public void testGetConnectionKeepAlive() {
        // Given
        Request request = new Request(Verbs.GET, "https://example.com");
        request.setConnectionKeepAlive(true);

        // When
        boolean connectionKeepAlive = request.getConnectionKeepAlive();

        // Then
        assertEquals(true, connectionKeepAlive);
    }

    @Test
    public void testAddHeader() {
        Request request = new Request(Verbs.GET, "https://example.com");
        request.addHeader("Content-Type", "application/json");

        assertEquals("application/json", request.getHeaders().get("Content-Type"));
    }

    @Test
    public void testGetUrl() {
        // Given
        Verbs verb = Verbs.GET;
        String url = "https://example.com/api";
        Request request = new Request(verb, url);

        // When
        String actualUrl = request.getUrl();

        // Then
        assertEquals(url, actualUrl);
    }

    @Test
    public void testGetReadTimeoutInMillis() {
        // Given
        Verbs verb = Verbs.GET;
        String url = "https://example.com";
        Request request = new Request(verb, url);
        int expectedTimeout = 5000; // Assuming a read timeout of 5000 milliseconds
        request.setReadTimeout(expectedTimeout, TimeUnit.MILLISECONDS);

        // When
        int actualTimeout = request.getReadTimeoutInMillis();

        // Then
        assertEquals(expectedTimeout, actualTimeout);
    }

@Test
public void testAddQuerystringParameter() {
    Request request = new Request(Verbs.GET, "https://example.com/api");
    request.addQuerystringParameter("param1", "value1");
    request.addQuerystringParameter("param2", "value2");

    Map<String, String> expectedParams = new HashMap<String, String>();

    expectedParams.put("param1", "value1");
    expectedParams.put("param2", "value2");
    Map<String, String> actualParams = request.getQueryStringParams();
    assertEquals(expectedParams, actualParams);
}



@Test
public void testGetCharset_DefaultCharset() {
    Request request = new Request(Verbs.GET, "https://example.com");

    String expectedCharset = Charset.defaultCharset().name();

    String actualCharset = request.getCharset();
    assertEquals(expectedCharset, actualCharset);
}

    @Test
    public void testSetConnectTimeout() {
        Request request = new Request(Verbs.GET, "https://example.com");
        int duration = 5;
        TimeUnit unit = TimeUnit.SECONDS;

        request.setConnectTimeout(duration, unit);

        int expectedTimeoutInMillis = (int) unit.toMillis(duration);
        int actualTimeoutInMillis = request.getConnectTimeoutInMillis();

        assertNotNull(request);
        assertEquals(expectedTimeoutInMillis, actualTimeoutInMillis);
    }

@Test
public void testGetSanitizedUrl() {
    Verbs verb = Verbs.GET;
    String url = "http://example.com:8080/api/resource?id=123";
    Request request = new Request(verb, url);
    String sanitizedUrl = request.getSanitizedUrl();
   
}

    @Test
    public void testToString() {
        Verbs verb = Verbs.GET;
        String url = "https://example.com/api";
        Request request = new Request(verb, url);

        String expected = "@Request(GET https://example.com/api)";
        String actual = request.toString();

        assertEquals(expected, actual);
    }

    @Test
    public void testGetHeaders() {
        // Given
        Verbs verb = Verbs.GET;
        String url = "https://example.com";
        Request request = new Request(verb, url);

        // When
        Map<String, String> headers = request.getHeaders();

        // Then
        assertNotNull(headers);
        assertEquals(0, headers.size());
    }

@Test
        public void disconnect() {
        }

    @Test
    public void testGetBodyParams() {
        // Given
        Verbs verb = Verbs.GET;
        String url = "https://example.com";
        Request request = new Request(verb, url);

        // When
        Map<String, String> bodyParams = request.getBodyParams();

        // Then
        assertNotNull(bodyParams);
        assertEquals(0, bodyParams.size());
    }

    @Test
    public void testSetProxy() {
        // Given
        Request request = new Request(Verbs.GET, "https://example.com");
        Proxy expectedProxy = Proxy.NO_PROXY;

        // When
        request.setProxy(expectedProxy);
        Proxy actualProxy = request.getProxy();

        // Then
        assertEquals(expectedProxy, actualProxy);
    }

    @Test
    public void testSetCharset() {
        // Given
        Request request = new Request(Verbs.GET, "https://example.com");
        String charsetName = "UTF-8";

        // When
        request.setCharset(charsetName);

        // Then
        assertEquals(charsetName, request.getCharset());
    }

}
