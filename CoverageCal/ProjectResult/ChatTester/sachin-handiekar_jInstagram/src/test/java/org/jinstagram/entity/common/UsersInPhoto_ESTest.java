// original test path: /Users/zhi/Documents/PH.D/Project/Testing/ChatTESTER/CodePackage/Prompt2Testing/repo_get/Four_project/sachin-handiekar_jInstagram/src/test/java/org/jinstagram/entity/common/UsersInPhoto_ESTest.java
/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 27 03:53:50 GMT 2024
 */
package org.jinstagram.entity.common;

import org.junit.Test;
import static org.junit.Assert.assertEquals;
import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jinstagram.entity.common.GridPosition;
import org.jinstagram.entity.common.User;
import org.jinstagram.entity.common.UsersInPhoto;
import org.junit.runner.RunWith;

import java.util.*;
import java.lang.*;
import org.junit.Test;
import static org.junit.Assert.assertEquals;
import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jinstagram.entity.common.GridPosition;
import org.jinstagram.entity.common.User;
import org.jinstagram.entity.common.UsersInPhoto;
import org.junit.runner.RunWith;

import org.junit.Test;
import static org.junit.Assert.assertNotNull;
import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jinstagram.entity.common.GridPosition;
import org.jinstagram.entity.common.User;
import org.jinstagram.entity.common.UsersInPhoto;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false)
public class UsersInPhoto_ESTest extends UsersInPhoto_ESTest_scaffolding {

    @Test
    public void testSetUser() {
        // Given
        UsersInPhoto usersInPhoto = new UsersInPhoto();
        User user = new User();
        
        // When
        usersInPhoto.setUser(user);
        
        // Then
        assertEquals(user, usersInPhoto.getUser());
    }

    @Test
    public void testGetUser() {
        UsersInPhoto usersInPhoto = new UsersInPhoto();
        User user = new User();
        usersInPhoto.setUser(user);

        User retrievedUser = usersInPhoto.getUser();

        assertNotNull(retrievedUser);
    }

@Test
public void testSetPosition() {
    UsersInPhoto usersInPhoto = new UsersInPhoto();

    GridPosition expectedPosition = new GridPosition();
    expectedPosition.setX(2);
    expectedPosition.setY(3);

    usersInPhoto.setPosition(expectedPosition);
    GridPosition actualPosition = usersInPhoto.getPosition();
    assertEquals(expectedPosition, actualPosition);
}

    @Test
    public void testGetPosition() {
        UsersInPhoto usersInPhoto = new UsersInPhoto();
        GridPosition expectedPosition = new GridPosition();
        
        // Set up the expected position
        usersInPhoto.setPosition(expectedPosition);
        
        // Retrieve the position using getPosition() method
        GridPosition actualPosition = usersInPhoto.getPosition();
        
        // Assert that the retrieved position is not null
        assertNotNull(actualPosition);
        
        // Additional assertions can be added based on specific requirements
    }

}
