// original test path: /Users/zhi/Documents/PH.D/Project/Testing/ChatTESTER/CodePackage/Prompt2Testing/repo_get/Four_project/sachin-handiekar_jInstagram/src/test/java/org/jinstagram/entity/likes/LikesFeed_ESTest.java
/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 27 03:59:43 GMT 2024
 */
package org.jinstagram.entity.likes;

import static org.junit.Assert.assertEquals;
import org.junit.Test;
import org.junit.Test;
import static org.junit.Assert.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jinstagram.entity.common.Meta;
import org.jinstagram.entity.common.User;
import org.jinstagram.entity.likes.LikesFeed;
import org.junit.runner.RunWith;

import java.util.*;
import java.lang.*;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import org.junit.Test;
import static org.junit.Assert.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jinstagram.entity.common.Meta;
import org.jinstagram.entity.common.User;
import org.jinstagram.entity.likes.LikesFeed;
import org.junit.runner.RunWith;

import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertEquals;
import org.junit.Test;
import static org.junit.Assert.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jinstagram.entity.common.Meta;
import org.jinstagram.entity.common.User;
import org.jinstagram.entity.likes.LikesFeed;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false)
public class LikesFeed_ESTest extends LikesFeed_ESTest_scaffolding {

    @Test
    public void testSetMeta() {
        LikesFeed likesFeed = new LikesFeed();
        Meta meta = new Meta();
        meta.setCode(200);
        meta.setErrorType("success");
        meta.setErrorMessage("Operation successful");

        likesFeed.setMeta(meta);

        Meta updatedMeta = likesFeed.getMeta();

        assertEquals(200, updatedMeta.getCode());
        assertEquals("success", updatedMeta.getErrorType());
        assertEquals("Operation successful", updatedMeta.getErrorMessage());
    }

    @Test
    public void testGetMeta() {
        LikesFeed likesFeed = new LikesFeed();
        Meta meta = new Meta();
        likesFeed.setMeta(meta);

        Meta retrievedMeta = likesFeed.getMeta();

        assertNotNull(retrievedMeta);
        assertEquals(meta, retrievedMeta);
    }

@Test
public void testGetUserList() {
    LikesFeed likesFeed = new LikesFeed();

    User user1 = new User();
    user1.setId("user1");

    User user2 = new User();
    user2.setId("user2");

    List<User> userList = new LinkedList<User>();
    userList.add(user1);
    userList.add(user2);

    likesFeed.setUserList(userList);
    List<User> retrievedUserList = likesFeed.getUserList();

    assertNotNull(retrievedUserList);
    assertEquals(2, retrievedUserList.size());
    assertEquals(user1, retrievedUserList.get(0));
    assertEquals(user2, retrievedUserList.get(1));
}

@Test
public void testSetUserList() {
    LikesFeed likesFeed = new LikesFeed();
    List<User> userList = new LinkedList<User>();

    userList.add(new User());
    userList.get(0).setUserName("JohnDoe");

    userList.add(new User());
    userList.get(1).setUserName("JaneSmith");

    likesFeed.setUserList(userList);
    List<User> retrievedUserList = likesFeed.getUserList();
    assertNotNull(retrievedUserList);
    assertEquals(2, retrievedUserList.size());
    assertEquals("JohnDoe", retrievedUserList.get(0).getUserName());
    assertEquals("JaneSmith", retrievedUserList.get(1).getUserName());
}

}
