// original test path: /Users/zhi/Documents/PH.D/Project/Testing/ChatTESTER/CodePackage/Prompt2Testing/repo_get/Four_project/sachin-handiekar_jInstagram/src/test/java/org/jinstagram/http/URLUtils_ESTest.java
/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 27 04:48:19 GMT 2024
 */
package org.jinstagram.http;

import org.junit.Test;
import static org.junit.Assert.assertEquals;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jinstagram.http.URLUtils;
import org.junit.runner.RunWith;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.fail;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jinstagram.http.URLUtils;
import org.junit.runner.RunWith;

import org.junit.Test;
import static org.junit.Assert.assertEquals;
import java.util.Map;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jinstagram.http.URLUtils;
import org.junit.runner.RunWith;

import java.util.*;
import java.lang.*;
import org.junit.Test;
import java.util.HashMap;
import java.util.Map;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jinstagram.http.URLUtils;
import org.junit.runner.RunWith;

import static org.junit.Assert.assertEquals;
import org.junit.Test;
import java.io.UnsupportedEncodingException;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jinstagram.http.URLUtils;
import org.junit.runner.RunWith;

import java.util.*;
import java.lang.*;
import static org.junit.Assert.assertEquals;
import org.junit.Test;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jinstagram.http.URLUtils;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false)
public class URLUtils_ESTest extends URLUtils_ESTest_scaffolding {

    @Test
    public void testEncodeURIComponent() {
        String input = "Hello World!";
        String expectedOutput = "Hello%20World%21";
        String actualOutput = URLUtils.encodeURIComponent(input);
       
}

    @Test
    public void testPercentEncode() {
        String input = "Hello, World!";
        String expectedOutput = "Hello%2C%20World%21"; // Expected output after URL encoding
        
        String actualOutput = URLUtils.percentEncode(input);
        
        assertEquals(expectedOutput, actualOutput);
    }

    @Test
    public void testAppendParametersToQueryString() {
        String url = "https://example.com/api";

        Map<String, String> params = new HashMap<String, String>();

        params.put("param1", "value1");
        params.put("param2", "value2");
        String result = URLUtils.appendParametersToQueryString(url, params);
        assert result.contains(url);
        assert result.contains("param1=value1");
        assert result.contains("param2=value2");
        if (url.contains("?")) {
            assert result.contains("&");
        } else {
            assert result.contains("?");
        }
    }

    @Test
    public void testQueryStringToMap() {
        // Given
        String queryString = "key1=value1&key2=value2&key3=value3";

        // When
        Map<String, String> resultMap = URLUtils.queryStringToMap(queryString);

        // Then
        assertEquals(3, resultMap.size());
        assertEquals("value1", resultMap.get("key1"));
        assertEquals("value2", resultMap.get("key2"));
        assertEquals("value3", resultMap.get("key3"));
    }

    @Test
    public void testFormURLDecode() {
        // Given
        String encodedString = "Hello%20World";

        // When
        String decodedString = URLUtils.formURLDecode(encodedString);

        // Then
        assertNotNull(decodedString);
        assertEquals("Hello World", decodedString);
    }

    @Test
    public void testDecodeURIComponent() {
        // Given
        String encodedString = "Hello%20World%21";
        String expectedDecodedString = "Hello World!";

        // When
        String decodedString = URLUtils.decodeURIComponent(encodedString);

        // Then
        assertEquals(expectedDecodedString, decodedString);
    }

    @Test
    public void testFormURLEncode() {
        // Given
        String input = "Hello World";
        String expectedOutput = "Hello+World";

        // When
        String actualOutput = URLUtils.formURLEncode(input);

        // Then
        assertNotNull(actualOutput);
        assertEquals(expectedOutput, actualOutput);
    }

}
