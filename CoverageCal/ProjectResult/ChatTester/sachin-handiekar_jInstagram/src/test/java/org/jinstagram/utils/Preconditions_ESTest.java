// original test path: /Users/zhi/Documents/PH.D/Project/Testing/ChatTESTER/CodePackage/Prompt2Testing/repo_get/Four_project/sachin-handiekar_jInstagram/src/test/java/org/jinstagram/utils/Preconditions_ESTest.java
/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 27 05:17:41 GMT 2024
 */
package org.jinstagram.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import org.jinstagram.utils.Preconditions;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jinstagram.utils.Preconditions;
import org.junit.runner.RunWith;

import java.util.*;
import java.lang.*;
import org.junit.Test;
import static org.junit.Assert.*;
import org.jinstagram.utils.Preconditions;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jinstagram.utils.Preconditions;
import org.junit.runner.RunWith;

import org.junit.Test;
import org.junit.Assert;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jinstagram.utils.Preconditions;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false)
public class Preconditions_ESTest extends Preconditions_ESTest_scaffolding {

    @Test
    public void testCheckNotNull() {
        // Given
        Object obj = new Object();
        String errorMsg = "Object cannot be null";

        // When
        try {
            Preconditions.checkNotNull(obj, errorMsg);
        } catch (Exception e) {
            fail("Exception should not be thrown for a non-null object");
        }

        // Then
        // No exception should be thrown
    }

@Test
public void testCheckValidLatLong_validLatLong() {
    String validLatLong = "40.7128,-74.0060";
    String errorMsg = "Invalid latitude or longitude";
    try {
        Preconditions.checkValidLatLong(validLatLong, errorMsg);
    } catch (Exception e) {
        assertEquals(errorMsg, e.getMessage());
    }
}

    @Test
    public void testCheckValidRadius_validRadius() {
        String radiusString = "10";
        String errorMsg = "Invalid radius";
        
        try {
            Preconditions.checkValidRadius(radiusString, errorMsg);
            // If no exception is thrown, the test passes
        } catch (Exception e) {
            fail("Unexpected exception thrown: " + e.getMessage());
        }
    }

    @Test
    public void testCheckValidOAuthCallback() {
        // Test case 1: Valid OAuth callback URL
        String validUrl = "https://example.com/oauth/callback";
        String errorMsg1 = "Invalid OAuth callback URL";
        try {
            Preconditions.checkValidOAuthCallback(validUrl, errorMsg1);
        } catch (Exception e) {
            fail("Valid OAuth callback URL should not throw an exception");
        }

        // Test case 2: Empty URL
        String emptyUrl = "";
        String errorMsg2 = "Empty URL provided";
        try {
            Preconditions.checkValidOAuthCallback(emptyUrl, errorMsg2);
            fail("Empty URL should throw an exception");
        } catch (IllegalArgumentException e) {
            // Expected exception
        }

        // Test case 3: Invalid OAuth callback URL
        String invalidUrl = "invalidurl";
        String errorMsg3 = "Invalid OAuth callback URL";
        try {
            Preconditions.checkValidOAuthCallback(invalidUrl, errorMsg3);
            fail("Invalid OAuth callback URL should throw an exception");
        } catch (IllegalArgumentException e) {
            // Expected exception
        }
    }

    @Test
    public void testCheckValidUrl_validUrl() {
        String validUrl = "https://www.example.com";
        String errorMsg = "Invalid URL";

        try {
            Preconditions.checkValidUrl(validUrl, errorMsg);
            // If no exception is thrown, the test passes
        } catch (Exception e) {
            fail("Valid URL failed validation: " + e.getMessage());
        }
    }

    @Test
    public void testCheckBothNotNull_bothNotNull() {
        Object obj1 = new Object();
        Object obj2 = new Object();
        String errorMsg = "Objects are both null";
        
        try {
            Preconditions.checkBothNotNull(obj1, obj2, errorMsg);
        } catch (Exception e) {
            fail("Both objects are not null, should not throw an exception");
        }
    }

    @Test
    public void testCheckEmptyString() {
        // Given
        String nonEmptyString = "Hello";
        String emptyString = "";
        String nullString = null;
        String errorMsg = "String cannot be empty or null";

        // When
        try {
            Preconditions.checkEmptyString(nonEmptyString, errorMsg);
        } catch (Exception e) {
            Assert.fail("Unexpected exception thrown for non-empty string: " + e.getMessage());
        }

        try {
            Preconditions.checkEmptyString(emptyString, errorMsg);
            Assert.fail("Expected exception not thrown for empty string");
        } catch (Exception e) {
            // Expected
        }

        try {
            Preconditions.checkEmptyString(nullString, errorMsg);
            Assert.fail("Expected exception not thrown for null string");
        } catch (Exception e) {
            // Expected
        }
    }

}
