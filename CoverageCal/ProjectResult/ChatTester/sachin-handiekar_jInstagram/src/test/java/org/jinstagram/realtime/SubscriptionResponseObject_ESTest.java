// original test path: /Users/zhi/Documents/PH.D/Project/Testing/ChatTESTER/CodePackage/Prompt2Testing/repo_get/Four_project/sachin-handiekar_jInstagram/src/test/java/org/jinstagram/realtime/SubscriptionResponseObject_ESTest.java
/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 27 05:03:32 GMT 2024
 */
package org.jinstagram.realtime;

import org.junit.Test;
import static org.junit.Assert.assertEquals;
import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jinstagram.realtime.SubscriptionResponseObject;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false)
public class SubscriptionResponseObject_ESTest extends SubscriptionResponseObject_ESTest_scaffolding {

    @Test
    public void testSetChangedAspect() {
        SubscriptionResponseObject subscriptionResponseObject = new SubscriptionResponseObject();
        String changedAspect = "testAspect";
        
        subscriptionResponseObject.setChangedAspect(changedAspect);
        
        assertEquals(changedAspect, subscriptionResponseObject.getChangedAspect());
    }

    @Test
    public void testSetSubscriptionId() {
        // Given
        SubscriptionResponseObject subscriptionResponseObject = new SubscriptionResponseObject();
        String subscriptionId = "12345";

        // When
        subscriptionResponseObject.setSubscriptionId(subscriptionId);

        // Then
        assertEquals(subscriptionId, subscriptionResponseObject.getSubscriptionId());
    }

    @Test
    public void testGetEpochTime() {
        SubscriptionResponseObject subscriptionResponseObject = new SubscriptionResponseObject();
        long expectedEpochTime = 123456789L;
        subscriptionResponseObject.setEpochTime(expectedEpochTime);

        long actualEpochTime = subscriptionResponseObject.getEpochTime();

        assertEquals(expectedEpochTime, actualEpochTime);
    }

    @Test
    public void testGetObjectId() {
        SubscriptionResponseObject subscriptionResponseObject = new SubscriptionResponseObject();
        String expectedObjectId = "testObjectId";
        subscriptionResponseObject.setObjectId(expectedObjectId);

        String actualObjectId = subscriptionResponseObject.getObjectId();

        assertEquals(expectedObjectId, actualObjectId);
    }

    @Test
    public void testSetObjectId() {
        // Given
        SubscriptionResponseObject subscriptionResponseObject = new SubscriptionResponseObject();
        String expectedObjectId = "12345";

        // When
        subscriptionResponseObject.setObjectId(expectedObjectId);

        // Then
        assertEquals(expectedObjectId, subscriptionResponseObject.getObjectId());
    }

    @Test
    public void testSetObject() {
        SubscriptionResponseObject subscriptionResponseObject = new SubscriptionResponseObject();
        String expectedObject = "testObject";
        
        subscriptionResponseObject.setObject(expectedObject);
        
        assertEquals(expectedObject, subscriptionResponseObject.getObject());
    }

    @Test
    public void testGetSubscriptionId() {
        SubscriptionResponseObject subscriptionResponseObject = new SubscriptionResponseObject();
        String expectedSubscriptionId = "testSubscriptionId";
        subscriptionResponseObject.setSubscriptionId(expectedSubscriptionId);

        String actualSubscriptionId = subscriptionResponseObject.getSubscriptionId();

        assertEquals(expectedSubscriptionId, actualSubscriptionId);
    }

    @Test
    public void testGetObject() {
        SubscriptionResponseObject subscriptionResponseObject = new SubscriptionResponseObject();
        subscriptionResponseObject.setObject("testObject");

        String result = subscriptionResponseObject.getObject();

        assertEquals("testObject", result);
    }

    @Test
    public void testSetEpochTime() {
        SubscriptionResponseObject subscriptionResponseObject = new SubscriptionResponseObject();
        long expectedEpochTime = 123456789L;
        
        subscriptionResponseObject.setEpochTime(expectedEpochTime);
        
        assertEquals(expectedEpochTime, subscriptionResponseObject.getEpochTime());
    }

    @Test
    public void testGetChangedAspect() {
        SubscriptionResponseObject subscriptionResponseObject = new SubscriptionResponseObject();
        String expectedChangedAspect = "testAspect";
        subscriptionResponseObject.setChangedAspect(expectedChangedAspect);

        String actualChangedAspect = subscriptionResponseObject.getChangedAspect();

        assertEquals(expectedChangedAspect, actualChangedAspect);
    }

}
