// original test path: /Users/zhi/Documents/PH.D/Project/Testing/ChatTESTER/CodePackage/Prompt2Testing/repo_get/Four_project/sachin-handiekar_jInstagram/src/test/java/org/jinstagram/InstagramConfig_ESTest.java
/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 27 04:50:40 GMT 2024
 */
package org.jinstagram;

import org.junit.Test;
import static org.junit.Assert.assertEquals;
import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jinstagram.InstagramConfig;
import org.junit.runner.RunWith;

import java.util.*;
import java.lang.*;
import static org.junit.Assert.assertEquals;
import org.junit.Test;
import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jinstagram.InstagramConfig;
import org.junit.runner.RunWith;

import java.util.*;
import java.lang.*;
import org.junit.Test;
import static org.junit.Assert.assertEquals;
import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jinstagram.InstagramConfig;
import org.junit.runner.RunWith;

import org.junit.Test;
import static org.junit.Assert.*;
import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jinstagram.InstagramConfig;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false)
public class InstagramConfig_ESTest extends InstagramConfig_ESTest_scaffolding {

    @Test
    public void testSetConnectionKeepAlive() {
        InstagramConfig instagramConfig = new InstagramConfig();
        
        // Initially, connectionKeepAlive should be false
        assertFalse(instagramConfig.isConnectionKeepAlive());
        
        // Set connectionKeepAlive to true
        instagramConfig.setConnectionKeepAlive(true);
        assertTrue(instagramConfig.isConnectionKeepAlive());
        
        // Set connectionKeepAlive back to false
        instagramConfig.setConnectionKeepAlive(false);
        assertFalse(instagramConfig.isConnectionKeepAlive());
    }

    @Test
    public void testSetConnectionTimeoutMills() {
        InstagramConfig instagramConfig = new InstagramConfig();
        int expectedTimeout = 5000; // Example timeout value

        instagramConfig.setConnectionTimeoutMills(expectedTimeout);

        int actualTimeout = instagramConfig.getConnectionTimeoutMills();

        assertEquals(expectedTimeout, actualTimeout);
    }

@Test
public void testGetVersion() {
    InstagramConfig instagramConfig = new InstagramConfig();

    String expectedVersion = instagramConfig.getVersion();

    String actualVersion = instagramConfig.getVersion();
    assertEquals(expectedVersion, actualVersion);
}

    @Test
    public void testSetVersion() {
        InstagramConfig instagramConfig = new InstagramConfig();
        String baseURI = "https://api.instagram.com";
        String version = "v1";
        String expectedApiURL = baseURI + "/" + version;

        instagramConfig.setVersion(version);

        assertEquals(expectedApiURL, instagramConfig.getApiURL());
    }

@Test
public void testGetApiURL() {
    InstagramConfig instagramConfig = new InstagramConfig();

    String expectedApiURL = instagramConfig.getApiURL();

    String actualApiURL = instagramConfig.getApiURL();
    assertEquals(expectedApiURL, actualApiURL);
}

    @Test
    public void testSetRetryOnServerError() {
        InstagramConfig instagramConfig = new InstagramConfig();
        assertFalse(instagramConfig.isRetryOnServerError()); // Initial value should be false

        instagramConfig.setRetryOnServerError(true);
        assertTrue(instagramConfig.isRetryOnServerError());

        instagramConfig.setRetryOnServerError(false);
        assertFalse(instagramConfig.isRetryOnServerError());
    }

    @Test
    public void testSetBaseURI() {
        InstagramConfig instagramConfig = new InstagramConfig();
        String baseURI = "https://api.instagram.com";
        String expectedApiURL = String.format("%s/%s", baseURI, instagramConfig.getVersion());

        instagramConfig.setBaseURI(baseURI);

        assertEquals(baseURI, instagramConfig.getBaseURI());
        assertEquals(expectedApiURL, instagramConfig.getApiURL());
    }

    @Test
    public void testGetConnectionTimeoutMills() {
        InstagramConfig instagramConfig = new InstagramConfig();
        int expectedTimeout = 0; // Default value set in the constructor

        int actualTimeout = instagramConfig.getConnectionTimeoutMills();

        assertEquals(expectedTimeout, actualTimeout);
    }

    @Test
    public void testIsConnectionKeepAlive() {
        InstagramConfig instagramConfig = new InstagramConfig();
        boolean initialConnectionKeepAlive = instagramConfig.isConnectionKeepAlive();
        assertEquals(false, initialConnectionKeepAlive);

        instagramConfig.setConnectionKeepAlive(true);
        boolean updatedConnectionKeepAlive = instagramConfig.isConnectionKeepAlive();
        assertEquals(true, updatedConnectionKeepAlive);
    }

    @Test
    public void testGetReadTimeoutMills() {
        InstagramConfig instagramConfig = new InstagramConfig();
        int expectedReadTimeout = 0; // Default value set in the constructor

        int actualReadTimeout = instagramConfig.getReadTimeoutMills();

        assertEquals(expectedReadTimeout, actualReadTimeout);
    }

    @Test
    public void testSetEnforceSignedRequest() {
        InstagramConfig instagramConfig = new InstagramConfig();
        
        // Initially enforceSignedRequest should be false
        assertFalse(instagramConfig.isEnforceSignedRequest());
        
        // Set enforceSignedRequest to true
        instagramConfig.setEnforceSignedRequest(true);
        assertTrue(instagramConfig.isEnforceSignedRequest());
        
        // Set enforceSignedRequest back to false
        instagramConfig.setEnforceSignedRequest(false);
        assertFalse(instagramConfig.isEnforceSignedRequest());
    }

    @Test
    public void testIsEnforceSignedRequest() {
        InstagramConfig instagramConfig = new InstagramConfig();
        boolean initialEnforceSignedRequest = instagramConfig.isEnforceSignedRequest();
        assertEquals(false, initialEnforceSignedRequest);

        instagramConfig.setEnforceSignedRequest(true);
        boolean updatedEnforceSignedRequest = instagramConfig.isEnforceSignedRequest();
        assertEquals(true, updatedEnforceSignedRequest);
    }

@Test
public void testGetBaseURI() {
    InstagramConfig instagramConfig = new InstagramConfig();

    String expectedBaseURI = instagramConfig.getBaseURI();

    String actualBaseURI = instagramConfig.getBaseURI();
    assertEquals(expectedBaseURI, actualBaseURI);
}

    @Test
    public void testSetReadTimeoutMills() {
        InstagramConfig instagramConfig = new InstagramConfig();
        int expectedReadTimeout = 5000; // Example read timeout value in milliseconds

        instagramConfig.setReadTimeoutMills(expectedReadTimeout);

        int actualReadTimeout = instagramConfig.getReadTimeoutMills();
        assertEquals(expectedReadTimeout, actualReadTimeout);
    }

    @Test
    public void testIsRetryOnServerError() {
        InstagramConfig instagramConfig = new InstagramConfig();
        boolean initialRetryOnServerError = instagramConfig.isRetryOnServerError();
        assertEquals(false, initialRetryOnServerError);

        instagramConfig.setRetryOnServerError(true);
        boolean updatedRetryOnServerError = instagramConfig.isRetryOnServerError();
        assertEquals(true, updatedRetryOnServerError);
    }

}
