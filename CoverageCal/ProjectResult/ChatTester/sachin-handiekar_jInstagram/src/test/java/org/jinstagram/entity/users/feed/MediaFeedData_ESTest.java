// original test path: /Users/zhi/Documents/PH.D/Project/Testing/ChatTESTER/CodePackage/Prompt2Testing/repo_get/Four_project/sachin-handiekar_jInstagram/src/test/java/org/jinstagram/entity/users/feed/MediaFeedData_ESTest.java
/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 27 04:30:23 GMT 2024
 */
package org.jinstagram.entity.users.feed;



import static org.junit.Assert.assertEquals;
import org.junit.Test;
import java.util.Arrays;
import java.util.List;
import org.junit.Test;
import static org.junit.Assert.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jinstagram.entity.common.Caption;
import org.jinstagram.entity.common.Comments;
import org.jinstagram.entity.common.Images;
import org.jinstagram.entity.common.Likes;
import org.jinstagram.entity.common.Location;
import org.jinstagram.entity.common.User;
import org.jinstagram.entity.common.UsersInPhoto;
import org.jinstagram.entity.common.Videos;
import org.jinstagram.entity.users.feed.CarouselMedia;
import org.jinstagram.entity.users.feed.MediaFeedData;
import org.junit.runner.RunWith;

import org.junit.Test;
import static org.junit.Assert.*;
import org.junit.Test;
import static org.junit.Assert.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jinstagram.entity.common.Caption;
import org.jinstagram.entity.common.Comments;
import org.jinstagram.entity.common.Images;
import org.jinstagram.entity.common.Likes;
import org.jinstagram.entity.common.Location;
import org.jinstagram.entity.common.User;
import org.jinstagram.entity.common.UsersInPhoto;
import org.jinstagram.entity.common.Videos;
import org.jinstagram.entity.users.feed.CarouselMedia;
import org.jinstagram.entity.users.feed.MediaFeedData;
import org.junit.runner.RunWith;

import java.util.*;
import java.lang.*;
import org.junit.Test;
import static org.junit.Assert.assertEquals;
import org.junit.Test;
import static org.junit.Assert.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jinstagram.entity.common.Caption;
import org.jinstagram.entity.common.Comments;
import org.jinstagram.entity.common.Images;
import org.jinstagram.entity.common.Likes;
import org.jinstagram.entity.common.Location;
import org.jinstagram.entity.common.User;
import org.jinstagram.entity.common.UsersInPhoto;
import org.jinstagram.entity.common.Videos;
import org.jinstagram.entity.users.feed.CarouselMedia;
import org.jinstagram.entity.users.feed.MediaFeedData;
import org.junit.runner.RunWith;

import java.util.*;
import java.lang.*;
import static org.junit.Assert.assertEquals;
import org.junit.Test;
import java.util.ArrayList;
import java.util.List;
import org.junit.Test;
import static org.junit.Assert.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jinstagram.entity.common.Caption;
import org.jinstagram.entity.common.Comments;
import org.jinstagram.entity.common.Images;
import org.jinstagram.entity.common.Likes;
import org.jinstagram.entity.common.Location;
import org.jinstagram.entity.common.User;
import org.jinstagram.entity.common.UsersInPhoto;
import org.jinstagram.entity.common.Videos;
import org.jinstagram.entity.users.feed.CarouselMedia;
import org.jinstagram.entity.users.feed.MediaFeedData;
import org.junit.runner.RunWith;

import org.junit.Test;
import static org.junit.Assert.assertNotNull;
import org.junit.Test;
import static org.junit.Assert.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jinstagram.entity.common.Caption;
import org.jinstagram.entity.common.Comments;
import org.jinstagram.entity.common.Images;
import org.jinstagram.entity.common.Likes;
import org.jinstagram.entity.common.Location;
import org.jinstagram.entity.common.User;
import org.jinstagram.entity.common.UsersInPhoto;
import org.jinstagram.entity.common.Videos;
import org.jinstagram.entity.users.feed.CarouselMedia;
import org.jinstagram.entity.users.feed.MediaFeedData;
import org.junit.runner.RunWith;

import java.util.*;
import java.lang.*;
import org.junit.Test;
import java.util.LinkedList;
import java.util.List;
import static org.junit.Assert.assertEquals;
import org.junit.Test;
import static org.junit.Assert.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jinstagram.entity.common.Caption;
import org.jinstagram.entity.common.Comments;
import org.jinstagram.entity.common.Images;
import org.jinstagram.entity.common.Likes;
import org.jinstagram.entity.common.Location;
import org.jinstagram.entity.common.User;
import org.jinstagram.entity.common.UsersInPhoto;
import org.jinstagram.entity.common.Videos;
import org.jinstagram.entity.users.feed.CarouselMedia;
import org.jinstagram.entity.users.feed.MediaFeedData;
import org.junit.runner.RunWith;

import java.util.*;
import java.lang.*;
import org.junit.Test;
import static org.junit.Assert.assertNotNull;
import org.junit.Test;
import static org.junit.Assert.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jinstagram.entity.common.Caption;
import org.jinstagram.entity.common.Comments;
import org.jinstagram.entity.common.Images;
import org.jinstagram.entity.common.Likes;
import org.jinstagram.entity.common.Location;
import org.jinstagram.entity.common.User;
import org.jinstagram.entity.common.UsersInPhoto;
import org.jinstagram.entity.common.Videos;
import org.jinstagram.entity.users.feed.CarouselMedia;
import org.jinstagram.entity.users.feed.MediaFeedData;
import org.junit.runner.RunWith;

import org.junit.Test;
import java.util.Arrays;
import java.util.List;
import static org.junit.Assert.assertEquals;
import org.junit.Test;
import static org.junit.Assert.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jinstagram.entity.common.Caption;
import org.jinstagram.entity.common.Comments;
import org.jinstagram.entity.common.Images;
import org.jinstagram.entity.common.Likes;
import org.jinstagram.entity.common.Location;
import org.jinstagram.entity.common.User;
import org.jinstagram.entity.common.UsersInPhoto;
import org.jinstagram.entity.common.Videos;
import org.jinstagram.entity.users.feed.CarouselMedia;
import org.jinstagram.entity.users.feed.MediaFeedData;
import org.junit.runner.RunWith;

import org.junit.Test;
import static org.junit.Assert.assertEquals;
import org.junit.Test;
import static org.junit.Assert.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jinstagram.entity.common.Caption;
import org.jinstagram.entity.common.Comments;
import org.jinstagram.entity.common.Images;
import org.jinstagram.entity.common.Likes;
import org.jinstagram.entity.common.Location;
import org.jinstagram.entity.common.User;
import org.jinstagram.entity.common.UsersInPhoto;
import org.jinstagram.entity.common.Videos;
import org.jinstagram.entity.users.feed.CarouselMedia;
import org.jinstagram.entity.users.feed.MediaFeedData;
import org.junit.runner.RunWith;

import org.junit.Test;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.assertFalse;
import org.junit.Test;
import static org.junit.Assert.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jinstagram.entity.common.Caption;
import org.jinstagram.entity.common.Comments;
import org.jinstagram.entity.common.Images;
import org.jinstagram.entity.common.Likes;
import org.jinstagram.entity.common.Location;
import org.jinstagram.entity.common.User;
import org.jinstagram.entity.common.UsersInPhoto;
import org.jinstagram.entity.common.Videos;
import org.jinstagram.entity.users.feed.CarouselMedia;
import org.jinstagram.entity.users.feed.MediaFeedData;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false)
public class MediaFeedData_ESTest extends MediaFeedData_ESTest_scaffolding {

    @Test
    public void testSetImages() {
        // Given
        Images images = new Images();
        MediaFeedData mediaFeedData = new MediaFeedData();

        // When
        mediaFeedData.setImages(images);

        // Then
        assertEquals(images, mediaFeedData.getImages());
    }

    @Test
    public void testSetComments() {
        // Given
        Comments comments = new Comments();
        MediaFeedData mediaFeedData = new MediaFeedData();

        // When
        mediaFeedData.setComments(comments);

        // Then
        assertNotNull(mediaFeedData.getComments());
        assertEquals(comments, mediaFeedData.getComments());
    }

    @Test
    public void testSetComments2() {
        // Given
        MediaFeedData mediaFeedData = new MediaFeedData();
        Comments comments = new Comments();
        
        // When
        mediaFeedData.setComments(comments);
        
        // Then
        assertEquals(comments, mediaFeedData.getComments());
    }

    @Test
    public void testSetLink() {
        // Given
        MediaFeedData mediaFeedData = new MediaFeedData();
        String newLink = "https://www.example.com";

        // When
        mediaFeedData.setLink(newLink);

        // Then
        assertEquals(newLink, mediaFeedData.getLink());
    }

    @Test
    public void testGetUser() {
        MediaFeedData mediaFeedData = new MediaFeedData();
        User user = new User();
        mediaFeedData.setUser(user);

        User retrievedUser = mediaFeedData.getUser();

        assertNotNull(retrievedUser);
    }

    @Test
    public void testGetCaption() {
        // Given
        MediaFeedData mediaFeedData = new MediaFeedData();
        Caption expectedCaption = new Caption();
        mediaFeedData.setCaption(expectedCaption);

        // When
        Caption actualCaption = mediaFeedData.getCaption();

        // Then
        assertNotNull(actualCaption);
        // Add more assertions or verifications as needed
    }

    @Test
    public void testGetLikes() {
        MediaFeedData mediaFeedData = new MediaFeedData();
        Likes likes = new Likes();
        mediaFeedData.setLikes(likes);

        Likes retrievedLikes = mediaFeedData.getLikes();

        assertNotNull(retrievedLikes);
    }

    @Test
    public void testGetLink() {
        MediaFeedData mediaFeedData = new MediaFeedData();
        String expectedLink = "https://example.com";
        mediaFeedData.setLink(expectedLink);

        String actualLink = mediaFeedData.getLink();

        assertEquals(expectedLink, actualLink);
    }

    @Test
    public void testIsUserHasLiked() {
        // Create a MediaFeedData instance
        MediaFeedData mediaFeedData = new MediaFeedData();
        
        // Set the userHasLiked value to true
        mediaFeedData.setUserHasLiked(true);
        
        // Check if isUserHasLiked returns true when userHasLiked is true
        assertTrue(mediaFeedData.isUserHasLiked());
        
        // Set the userHasLiked value to false
        mediaFeedData.setUserHasLiked(false);
        
        // Check if isUserHasLiked returns false when userHasLiked is false
        assertFalse(mediaFeedData.isUserHasLiked());
    }

    @Test
    public void testGetCreatedTime() {
        // Given
        MediaFeedData mediaFeedData = new MediaFeedData();
        String expectedCreatedTime = "2022-01-01T12:00:00";

        // When
        mediaFeedData.setCreatedTime(expectedCreatedTime);
        String actualCreatedTime = mediaFeedData.getCreatedTime();

        // Then
        assertEquals(expectedCreatedTime, actualCreatedTime);
    }

    @Test
    public void testSetCaption() {
        // Create a new Caption object for testing
        Caption testCaption = new Caption();
        testCaption.setText("Test Caption");

        // Create a new MediaFeedData object
        MediaFeedData mediaFeedData = new MediaFeedData();

        // Call the setCaption method with the test Caption object
        mediaFeedData.setCaption(testCaption);

        // Retrieve the Caption object from the MediaFeedData object
        Caption retrievedCaption = mediaFeedData.getCaption();

        // Assert that the retrieved Caption object is the same as the test Caption object
        assertEquals(testCaption, retrievedCaption);
    }

@Test
public void testSetUser() {
    MediaFeedData mediaFeedData = new MediaFeedData();
    User user = new User();
    user.setId("123");
    user.setUserName("testUser"); // Fixed the method name to setUserName

    mediaFeedData.setUser(user);
    assertEquals("123", mediaFeedData.getUser().getId());
    assertEquals("testUser", mediaFeedData.getUser().getUserName());
}

    @Test
    public void testSetCreatedTime() {
        // Given
        MediaFeedData mediaFeedData = new MediaFeedData();
        String expectedCreatedTime = "2022-01-01T12:00:00";

        // When
        mediaFeedData.setCreatedTime(expectedCreatedTime);

        // Then
        assertEquals(expectedCreatedTime, mediaFeedData.getCreatedTime());
    }

    @Test
    public void testGetLocation() {
        MediaFeedData mediaFeedData = new MediaFeedData();
        
        // Set up test data
        Location expectedLocation = new Location();
        mediaFeedData.setLocation(expectedLocation);
        
        // Call the method under test
        Location actualLocation = mediaFeedData.getLocation();
        
        // Assert that the returned location is not null
        assertNotNull(actualLocation);
    }

    @Test
    public void testSetLocation() {
        // Create a new instance of MediaFeedData
        MediaFeedData mediaFeedData = new MediaFeedData();

        // Create a new Location object
        Location location = new Location();
        location.setLatitude(40.7128);
        location.setLongitude(-74.0060);
        location.setName("New York City");

        // Set the location for the media feed data
        mediaFeedData.setLocation(location);

        // Verify that the location was set correctly
        assertEquals("New York City", mediaFeedData.getLocation().getName());
        assertEquals(40.7128, mediaFeedData.getLocation().getLatitude(), 0.001);
        assertEquals(-74.0060, mediaFeedData.getLocation().getLongitude(), 0.001);
    }

    @Test
    public void testGetVideos() {
        MediaFeedData mediaFeedData = new MediaFeedData();
        Videos videos = new Videos();
        mediaFeedData.setVideos(videos);

        Videos retrievedVideos = mediaFeedData.getVideos();

        assertNotNull(retrievedVideos);
    }

    @Test
    public void testSetImageFilter() {
        // Given
        MediaFeedData mediaFeedData = new MediaFeedData();
        String expectedImageFilter = "testFilter";

        // When
        mediaFeedData.setImageFilter(expectedImageFilter);

        // Then
        assertEquals(expectedImageFilter, mediaFeedData.getImageFilter());
    }

    @Test
    public void testSetVideos() {
        // Given
        MediaFeedData mediaFeedData = new MediaFeedData();
        Videos videos = new Videos();
        
        // When
        mediaFeedData.setVideos(videos);
        
        // Then
        assertEquals(videos, mediaFeedData.getVideos());
    }

    @Test
    public void testSetId() {
        // Given
        MediaFeedData mediaFeedData = new MediaFeedData();
        String id = "12345";

        // When
        mediaFeedData.setId(id);

        // Then
        assertEquals(id, mediaFeedData.getId());
    }

    @Test
    public void testGetImageFilter() {
        MediaFeedData mediaFeedData = new MediaFeedData();
        mediaFeedData.setImageFilter("TestFilter");

        String expectedFilter = "TestFilter";
        String actualFilter = mediaFeedData.getImageFilter();

        assertEquals(expectedFilter, actualFilter);
    }

    @Test
    public void testSetTags() {
        // Given
        MediaFeedData mediaFeedData = new MediaFeedData();
        List<String> newTags = Arrays.asList("tag1", "tag2", "tag3");

        // When
        mediaFeedData.setTags(newTags);

        // Then
        List<String> updatedTags = mediaFeedData.getTags();
        assertEquals(newTags, updatedTags);
    }

    @Test
    public void testSetType() {
        // Given
        MediaFeedData mediaFeedData = new MediaFeedData();
        String type = "photo";

        // When
        mediaFeedData.setType(type);

        // Then
        assertEquals(type, mediaFeedData.getType());
    }

    @Test
    public void testSetLikes() {
        // Given
        MediaFeedData mediaFeedData = new MediaFeedData();
        Likes likes = new Likes();
        
        // When
        mediaFeedData.setLikes(likes);
        
        // Then
        assertEquals(likes, mediaFeedData.getLikes());
    }

    @Test
    public void testGetId() {
        MediaFeedData mediaFeedData = new MediaFeedData();
        String expectedId = "testId";
        mediaFeedData.setId(expectedId);

        String actualId = mediaFeedData.getId();

        assertEquals(expectedId, actualId);
    }

@Test
public void testSetCarouselMedia() {
    MediaFeedData mediaFeedData = new MediaFeedData();
    List<CarouselMedia> testCarouselMediaList = new ArrayList<CarouselMedia>();
    CarouselMedia carouselMedia1 = new CarouselMedia();

    // Fixing the buggy line by using the provided setter method "setType" instead of "setId"
    carouselMedia1.setType("1");

    CarouselMedia carouselMedia2 = new CarouselMedia();
    carouselMedia2.setType("2");
    testCarouselMediaList.add(carouselMedia1);
    testCarouselMediaList.add(carouselMedia2);
    mediaFeedData.setCarouselMedia(testCarouselMediaList);
    List<CarouselMedia> retrievedCarouselMediaList = mediaFeedData.getCarouselMedia();
    assertEquals(testCarouselMediaList, retrievedCarouselMediaList);
}

    @Test
    public void testSetUserHasLiked() {
        MediaFeedData mediaFeedData = new MediaFeedData();
        
        // Initially set userHasLiked to false
        assertFalse(mediaFeedData.isUserHasLiked());
        
        // Set userHasLiked to true
        mediaFeedData.setUserHasLiked(true);
        assertTrue(mediaFeedData.isUserHasLiked());
        
        // Set userHasLiked back to false
        mediaFeedData.setUserHasLiked(false);
        assertFalse(mediaFeedData.isUserHasLiked());
    }

    @Test
    public void testGetType() {
        // Given
        MediaFeedData mediaFeedData = new MediaFeedData();
        mediaFeedData.setType("photo");

        // When
        String type = mediaFeedData.getType();

        // Then
        assertEquals("photo", type);
    }

    @Test
    public void testGetTags() {
        // Given
        List<String> expectedTags = Arrays.asList("tag1", "tag2", "tag3");
        MediaFeedData mediaFeedData = new MediaFeedData();
        mediaFeedData.setTags(expectedTags);

        // When
        List<String> actualTags = mediaFeedData.getTags();

        // Then
        assertEquals(expectedTags, actualTags);
    }

    @Test
    public void testGetImages() {
        MediaFeedData mediaFeedData = new MediaFeedData();
        Images images = new Images();
        mediaFeedData.setImages(images);

        Images retrievedImages = mediaFeedData.getImages();

        assertNotNull(retrievedImages);
    }

@Test
public void testSetUsersInPhotoList() {
    MediaFeedData mediaFeedData = new MediaFeedData();

    List<UsersInPhoto> testUsersInPhotoList = new LinkedList<UsersInPhoto>();

    UsersInPhoto user1 = new UsersInPhoto();
    UsersInPhoto user2 = new UsersInPhoto();
    testUsersInPhotoList.add(user1);
    testUsersInPhotoList.add(user2);
    mediaFeedData.setUsersInPhotoList(testUsersInPhotoList);
    List<UsersInPhoto> updatedUsersInPhotoList = mediaFeedData.getUsersInPhotoList();
    assertEquals(testUsersInPhotoList, updatedUsersInPhotoList);
}

}
