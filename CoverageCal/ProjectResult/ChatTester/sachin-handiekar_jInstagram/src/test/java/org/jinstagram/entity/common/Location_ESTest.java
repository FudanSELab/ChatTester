// original test path: /Users/zhi/Documents/PH.D/Project/Testing/ChatTESTER/CodePackage/Prompt2Testing/repo_get/Four_project/sachin-handiekar_jInstagram/src/test/java/org/jinstagram/entity/common/Location_ESTest.java
/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 27 03:46:49 GMT 2024
 */
package org.jinstagram.entity.common;

import org.junit.Test;
import static org.junit.Assert.assertEquals;
import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jinstagram.entity.common.Location;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false)
public class Location_ESTest extends Location_ESTest_scaffolding {

    @Test
    public void testGetLatitude() {
        Location location = new Location();
        location.setLatitude(37.7749); // Setting latitude value for testing

        double expectedLatitude = 37.7749;
        double actualLatitude = location.getLatitude();

        assertEquals(expectedLatitude, actualLatitude, 0.001); // Allowing a small delta for double comparison
    }

    @Test
    public void testSetLatitude() {
        Location location = new Location();
        double newLatitude = 37.7749; // Example latitude value

        location.setLatitude(newLatitude);

        assertEquals(newLatitude, location.getLatitude(), 0.001); // Allowing for a small margin of error
    }

    @Test
    public void testGetLongitude() {
        Location location = new Location();
        double expectedLongitude = 10.0;
        location.setLongitude(expectedLongitude);

        double actualLongitude = location.getLongitude();

        assertEquals(expectedLongitude, actualLongitude, 0.001);
    }

    @Test
    public void testSetId() {
        Location location = new Location();
        String id = "12345";
        location.setId(id);
        
        assertEquals(id, location.getId());
    }

    @Test
    public void testSetName() {
        Location location = new Location();
        String testName = "Test Location Name";
        
        location.setName(testName);
        
        assertEquals(testName, location.getName());
    }

    @Test
    public void testSetLongitude() {
        Location location = new Location();
        double longitude = 45.678; // Sample longitude value

        location.setLongitude(longitude);

        assertEquals(longitude, location.getLongitude(), 0.001); // Allowing for a small delta in case of floating point precision issues
    }

    @Test
    public void testGetId() {
        Location location = new Location();
        String expectedId = "testId";
        location.setId(expectedId);

        String actualId = location.getId();

        assertEquals(expectedId, actualId);
    }

    @Test
    public void testGetName() {
        Location location = new Location();
        String expectedName = "Test Location";
        location.setName(expectedName);

        String actualName = location.getName();

        assertEquals(expectedName, actualName);
    }

}
