// original test path: /Users/zhi/Documents/PH.D/Project/Testing/ChatTESTER/CodePackage/Prompt2Testing/repo_get/Four_project/sachin-handiekar_jInstagram/src/test/java/org/jinstagram/auth/model/OAuthConfig_ESTest.java
/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 27 03:18:36 GMT 2024
 */
package org.jinstagram.auth.model;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import org.junit.Test;
import static org.junit.Assert.*;
import java.net.Proxy;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jinstagram.auth.model.OAuthConfig;
import org.junit.runner.RunWith;

import static org.junit.Assert.assertEquals;
import org.junit.Test;
import org.junit.Test;
import static org.junit.Assert.*;
import java.net.Proxy;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jinstagram.auth.model.OAuthConfig;
import org.junit.runner.RunWith;

import org.junit.Test;
import static org.junit.Assert.assertEquals;
import org.junit.Test;
import static org.junit.Assert.*;
import java.net.Proxy;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jinstagram.auth.model.OAuthConfig;
import org.junit.runner.RunWith;

import static org.junit.Assert.assertTrue;
import static org.junit.Assert.assertFalse;
import org.junit.Test;
import static org.junit.Assert.*;
import java.net.Proxy;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jinstagram.auth.model.OAuthConfig;
import org.junit.runner.RunWith;

import static org.junit.Assert.*;
import org.junit.Test;
import java.net.Proxy;
import org.junit.Test;
import static org.junit.Assert.*;
import java.net.Proxy;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jinstagram.auth.model.OAuthConfig;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false)
public class OAuthConfig_ESTest extends OAuthConfig_ESTest_scaffolding {

    @Test
    public void testHasScopeWithNonNullScope() {
        OAuthConfig oauthConfig = new OAuthConfig("key", "secret", "callback", "scope");
        assertTrue(oauthConfig.hasScope());
    }

    @Test
    public void testGetApiKey() {
        // Given
        String expectedApiKey = "testKey";
        String secret = "testSecret";
        OAuthConfig oauthConfig = new OAuthConfig(expectedApiKey, secret);

        // When
        String actualApiKey = oauthConfig.getApiKey();

        // Then
        assertEquals(expectedApiKey, actualApiKey);
    }

    @Test
    public void testGetDisplay() {
        String expectedDisplay = "testDisplay";
        OAuthConfig oauthConfig = new OAuthConfig("testKey", "testSecret", "testCallback", "testScope", expectedDisplay);
        
        String actualDisplay = oauthConfig.getDisplay();
        
        assertEquals(expectedDisplay, actualDisplay);
    }

    @Test
    public void testGetCallback() {
        // Given
        String expectedCallback = "https://example.com/callback";
        OAuthConfig oauthConfig = new OAuthConfig("key", "secret", expectedCallback, "scope");

        // When
        String actualCallback = oauthConfig.getCallback();

        // Then
        assertEquals(expectedCallback, actualCallback);
    }

    @Test
    public void testGetScope() {
        // Given
        String expectedScope = "testScope";
        OAuthConfig oauthConfig = new OAuthConfig("testKey", "testSecret", "testCallback", expectedScope, "testDisplay");

        // When
        String actualScope = oauthConfig.getScope();

        // Then
        assertEquals(expectedScope, actualScope);
    }

    @Test
    public void testGetApiSecret() {
        // Given
        String expectedApiSecret = "mySecret";
        OAuthConfig oauthConfig = new OAuthConfig("myKey", expectedApiSecret);

        // When
        String actualApiSecret = oauthConfig.getApiSecret();

        // Then
        assertEquals(expectedApiSecret, actualApiSecret);
    }

    @Test
    public void testGetRequestProxy() {
        // Given
        Proxy expectedProxy = Proxy.NO_PROXY;
        OAuthConfig oauthConfig = new OAuthConfig("testKey", "testSecret");

        // When
        oauthConfig.setRequestProxy(expectedProxy);
        Proxy actualProxy = oauthConfig.getRequestProxy();

        // Then
        assertEquals(expectedProxy, actualProxy);
    }

    @Test
    public void testSetRequestProxy() {
        // Given
        OAuthConfig oauthConfig = new OAuthConfig("testKey", "testSecret");
        Proxy proxy = Proxy.NO_PROXY;

        // When
        oauthConfig.setRequestProxy(proxy);

        // Then
        assertNotNull(oauthConfig.getRequestProxy());
        assertEquals(proxy, oauthConfig.getRequestProxy());
    }

}
