// original test path: /Users/zhi/Documents/PH.D/Project/Testing/ChatTESTER/CodePackage/Prompt2Testing/repo_get/Four_project/Zappos_zappos-json/src/test/java/com/zappos/json/ZapposJson_ESTest.java
/*
 * This file was automatically generated by EvoSuite
 * Thu Jan 25 14:19:12 GMT 2024
 */
package com.zappos.json;






import java.util.*;
import java.lang.*;
import org.junit.Test;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Date;
import static org.junit.Assert.assertEquals;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.zappos.json.JsonConfig;
import com.zappos.json.ZapposJson;
import com.zappos.json.format.JavaDateFormatter;
import com.zappos.json.format.ValueFormatter;
import java.io.File;
import java.io.PipedReader;
import java.io.Reader;
import java.io.StringReader;
import java.io.Writer;
import java.lang.reflect.Array;
import java.sql.Timestamp;
import java.time.Instant;
import java.time.chrono.HijrahEra;
import java.util.Date;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.junit.runner.RunWith;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.Date;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.zappos.json.JsonConfig;
import com.zappos.json.ZapposJson;
import com.zappos.json.format.JavaDateFormatter;
import com.zappos.json.format.ValueFormatter;
import java.io.File;
import java.io.PipedReader;
import java.io.Reader;
import java.io.StringReader;
import java.io.Writer;
import java.lang.reflect.Array;
import java.sql.Timestamp;
import java.time.Instant;
import java.time.chrono.HijrahEra;
import java.util.Date;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.junit.runner.RunWith;

import java.math.BigInteger;
import java.util.*;
import java.lang.*;
import static org.junit.Assert.assertEquals;
import org.junit.Test;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.zappos.json.JsonConfig;
import com.zappos.json.ZapposJson;
import com.zappos.json.format.JavaDateFormatter;
import com.zappos.json.format.ValueFormatter;
import java.io.File;
import java.io.PipedReader;
import java.io.Reader;
import java.io.StringReader;
import java.io.Writer;
import java.lang.reflect.Array;
import java.sql.Timestamp;
import java.time.Instant;
import java.time.chrono.HijrahEra;
import java.util.Date;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.junit.runner.RunWith;

import static org.junit.Assert.*;
import org.junit.Test;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.zappos.json.JsonConfig;
import com.zappos.json.ZapposJson;
import com.zappos.json.format.JavaDateFormatter;
import com.zappos.json.format.ValueFormatter;
import java.io.File;
import java.io.PipedReader;
import java.io.Reader;
import java.io.StringReader;
import java.io.Writer;
import java.lang.reflect.Array;
import java.sql.Timestamp;
import java.time.Instant;
import java.time.chrono.HijrahEra;
import java.util.Date;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.junit.runner.RunWith;

import java.util.*;
import java.lang.*;
import org.junit.Test;
import static org.junit.Assert.*;
import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.zappos.json.JsonConfig;
import com.zappos.json.ZapposJson;
import com.zappos.json.format.JavaDateFormatter;
import com.zappos.json.format.ValueFormatter;
import java.io.File;
import java.io.PipedReader;
import java.io.Reader;
import java.io.StringReader;
import java.io.Writer;
import java.lang.reflect.Array;
import java.sql.Timestamp;
import java.time.Instant;
import java.time.chrono.HijrahEra;
import java.util.Date;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.junit.runner.RunWith;

import java.util.*;
import java.lang.*;
import org.junit.Test;
import java.io.StringReader;
import static org.junit.Assert.assertEquals;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.zappos.json.JsonConfig;
import com.zappos.json.ZapposJson;
import com.zappos.json.format.JavaDateFormatter;
import com.zappos.json.format.ValueFormatter;
import java.io.File;
import java.io.PipedReader;
import java.io.Reader;
import java.io.StringReader;
import java.io.Writer;
import java.lang.reflect.Array;
import java.sql.Timestamp;
import java.time.Instant;
import java.time.chrono.HijrahEra;
import java.util.Date;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.junit.runner.RunWith;

import org.junit.Test;
import static org.junit.Assert.*;
import com.zappos.json.ZapposJson;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.zappos.json.JsonConfig;
import com.zappos.json.ZapposJson;
import com.zappos.json.format.JavaDateFormatter;
import com.zappos.json.format.ValueFormatter;
import java.io.File;
import java.io.PipedReader;
import java.io.Reader;
import java.io.StringReader;
import java.io.Writer;
import java.lang.reflect.Array;
import java.sql.Timestamp;
import java.time.Instant;
import java.time.chrono.HijrahEra;
import java.util.Date;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.junit.runner.RunWith;

import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.*;
import java.lang.*;
import org.junit.Test;
import static org.junit.Assert.*;
import java.util.Date;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.zappos.json.JsonConfig;
import com.zappos.json.ZapposJson;
import com.zappos.json.format.JavaDateFormatter;
import com.zappos.json.format.ValueFormatter;
import java.io.File;
import java.io.PipedReader;
import java.io.Reader;
import java.io.StringReader;
import java.io.Writer;
import java.lang.reflect.Array;
import java.sql.Timestamp;
import java.time.Instant;
import java.time.chrono.HijrahEra;
import java.util.Date;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false)
public class ZapposJson_ESTest extends ZapposJson_ESTest_scaffolding {

@Test
public void testToJson() {
    ZapposJson zapposJson = ZapposJson.getInstance();
    StringWriter stringWriter = new StringWriter();
    zapposJson.toJson(null, stringWriter);
    assertEquals("Expected JSON for null object", "null", stringWriter.toString());
    stringWriter.getBuffer().setLength(0); 
    Date date = new Date(1714749928695L); 
    zapposJson.toJson(date, stringWriter);
             
}

@Test
public void setUp() {
    ZapposJson zapposJson = ZapposJson.getInstance();
}

    @Test
    public void testRegister() {
        ZapposJson zapposJson = new ZapposJson();
        Class<?> clazz = String.class; // Example class for testing

        try {
            zapposJson.register(clazz);
            // If no exception is thrown, registration was successful
            assertTrue(true);
        } catch (Exception e) {
            // If an exception is thrown, registration failed
            fail("Registration of class " + clazz.getName() + " failed: " + e.getMessage());
        }
    }

    @Test
    public void testGetInstance() {
        // Given
        String name = "testInstance";
        
        // When
        ZapposJson instance1 = ZapposJson.getInstance(name);
        ZapposJson instance2 = ZapposJson.getInstance(name);
        
        // Then
        assertNotNull(instance1);
        assertNotNull(instance2);
        assertSame(instance1, instance2);
    }

@Test
public void testDebug() {
    ZapposJson zapposJson = new ZapposJson(true); 
    ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    System.setOut(new PrintStream(outContent));
    zapposJson.debug("Debug message: %s", "Test");
    String expectedOutput = "Debug message: Test\n";
   
}

    @Test
    public void testAddValueFormatter() {
        ZapposJson zapposJson = new ZapposJson();
        JavaDateFormatter javaDateFormatter = new JavaDateFormatter();
        
        zapposJson.addValueFormatter(Date.class, javaDateFormatter);
        
        ValueFormatter<Object> retrievedFormatter = zapposJson.getValueFormatter(Date.class);
        
        assertNotNull("ValueFormatter for Date class should not be null", retrievedFormatter);
        assertEquals("Added ValueFormatter should match the retrieved ValueFormatter", javaDateFormatter, retrievedFormatter);
    }

    @Test
    public void testFormat() {
        ZapposJson zapposJson = new ZapposJson();
        
        // Test formatting Date object
        Date date = new Date();
        String formattedDate = zapposJson.format(date);
        assertNotNull(formattedDate);
        
        // Test formatting BigInteger object
        BigInteger bigInteger = new BigInteger("1234567890");
        String formattedBigInteger = zapposJson.format(bigInteger);
        assertNotNull(formattedBigInteger);
        
        // Test formatting unknown object
        Object unknownObject = new Object();
        String formattedUnknown = zapposJson.format(unknownObject);
        assertNotNull(formattedUnknown);
    }

    @Test
    public void testGetInstance2() {
        ZapposJson instance1 = ZapposJson.getInstance();
        ZapposJson instance2 = ZapposJson.getInstance();

        assertNotNull(instance1);
        assertNotNull(instance2);
        assertSame(instance1, instance2);
    }

}
