// original test path: /Users/zhi/Documents/PH.D/Project/Testing/ChatTESTER/CodePackage/Prompt2Testing/repo_get/Four_project/Zappos_zappos-json/src/test/java/com/zappos/json/util/Strings_ESTest.java
/*
 * This file was automatically generated by EvoSuite
 * Thu Jan 25 14:13:31 GMT 2024
 */
package com.zappos.json.util;

import org.junit.Test;
import static org.junit.Assert.assertEquals;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.zappos.json.util.Strings;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

import java.util.*;
import java.lang.*;
import static org.junit.Assert.assertEquals;
import org.junit.Test;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.zappos.json.util.Strings;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

import java.util.HashSet;
import java.util.Set;
import java.util.*;
import java.lang.*;
import org.junit.Test;
import static org.junit.Assert.*;
import java.util.Arrays;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.zappos.json.util.Strings;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

import java.util.*;
import java.lang.*;
import org.junit.Test;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.assertEquals;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.zappos.json.util.Strings;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

import static org.junit.Assert.*;
import org.junit.Test;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.zappos.json.util.Strings;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false)
public class Strings_ESTest extends Strings_ESTest_scaffolding {

    @Test
    public void testRandomNumber() {
        // Given
        int n = 5;
        
        // When
        String result = Strings.randomNumber(n);
        
        // Then
        assertEquals(n, result.length());
        for (char c : result.toCharArray()) {
            assertTrue(Character.isDigit(c));
        }
    }

    @Test
    public void testIsNumber_validNumber() {
        assertTrue(Strings.isNumber("123"));
    }

    @Test
    public void testRandom() {
        char[] chars = {'a', 'b', 'c', 'd', 'e'};
        String result = Strings.random(5, chars);

        // Check if the length of the generated string is correct
        assertEquals(5, result.length());

        // Check if the generated string contains only characters from the provided char array
        Set<Character> charSet = new HashSet<>();
        for (char c : chars) {
            charSet.add(c);
        }
        for (char c : result.toCharArray()) {
            assertTrue(charSet.contains(c));
        }
    }

@Test
public void testRandomAlphabetic() {
    int n = 10;
    String randomString = Strings.randomAlphabetic(n);
    assertEquals(n, randomString.length());
    for (char c : randomString.toCharArray()) {
        assertTrue(Character.isLetter(c));
    }
    boolean hasUpperCase = false;
    boolean hasLowerCase = false;
    for (char c : randomString.toCharArray()) {
        if (Character.isUpperCase(c)) {
            hasUpperCase = true;
        } else if (Character.isLowerCase(c)) {
            hasLowerCase = true;
        }
    }
                
}

@Test
public void testFormat() {
    String pattern1 = "Hello @, your age is @ years old.";
    String expected1 = "Hello Alice, your age is 30 years old.";
    String actual1 = Strings.format(pattern1, "Alice", 30);
   
}

}
