// original test path: /Users/zhi/Documents/PH.D/Project/Testing/ChatTESTER/CodePackage/Prompt2Testing/repo_get/Four_project/Zappos_zappos-json/src/test/java/com/zappos/json/util/Reflections_ESTest.java
/*
 * This file was automatically generated by EvoSuite
 * Thu Jan 25 14:11:21 GMT 2024
 */
package com.zappos.json.util;

import java.util.*;
import java.lang.*;
import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.zappos.json.util.Reflections;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

import java.util.*;
import java.lang.*;
import org.junit.Test;
import java.lang.annotation.Annotation;
import java.lang.reflect.Method;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.assertFalse;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.zappos.json.util.Reflections;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

import static org.junit.Assert.assertTrue;
import static org.junit.Assert.assertFalse;
import org.junit.Test;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.zappos.json.util.Reflections;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

import java.util.*;
import java.lang.*;
import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.lang.reflect.ParameterizedType;
import java.util.List;
import java.util.ArrayList;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.zappos.json.util.Reflections;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

import org.junit.Test;
import java.lang.reflect.Field;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.util.List;
import java.util.ArrayList;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.zappos.json.util.Reflections;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false)
public class Reflections_ESTest extends Reflections_ESTest_scaffolding {

    @Test
    public void testGetGenericTypes() throws NoSuchFieldException {
        // Create a sample class for testing
        class SampleClass {
            List<String> stringList;
        }

        // Get the Field object for the field in the sample class
        Field field = SampleClass.class.getDeclaredField("stringList");

        // Test the getGenericTypes method
        Class<?>[] genericTypes = Reflections.getGenericTypes(field);

        // Assert that the genericTypes array is not null and contains the expected type
        assertNotNull(genericTypes);
        assertEquals(1, genericTypes.length);
        assertEquals(String.class, genericTypes[0]);
    }

@Test
public void testGetFirstGenericParameterType() {
    Method testMethod = null; 
     
}

@Test
public void testHasAnnotation() throws NoSuchMethodException {
    Method methodWithAnnotation = Reflections.class.getMethod("hasAnnotation", Method.class, Class.class);
    Method methodWithoutAnnotation = Reflections.class.getMethod("classPresent", String.class);
    boolean hasAnnotationTrue = Reflections.hasAnnotation(methodWithAnnotation, Test.class);
    boolean hasAnnotationFalse = Reflections.hasAnnotation(methodWithoutAnnotation, Test.class);
  
}

@Test
public void testGetGenericParameterTypes() throws NoSuchMethodException {
    Method method = Reflections.class.getMethod("getGenericParameterTypes", Method.class);
    Class<?>[] genericParameterTypes = Reflections.getGenericParameterTypes(method);
  
}

    @Test
    public void testClassPresent() {
        // Test when class is present
        assertTrue(Reflections.classPresent("java.lang.String"));

        // Test when class is not present
        assertFalse(Reflections.classPresent("com.example.NonExistentClass"));
    }

}
