// original test path: /Users/zhi/Documents/PH.D/Project/Testing/ChatTESTER/CodePackage/Prompt2Testing/repo_get/Four_project/Zappos_zappos-json/src/test/java/com/zappos/json/format/BigDecimalFormatter_ESTest.java
/*
 * This file was automatically generated by EvoSuite
 * Thu Jan 25 13:31:38 GMT 2024
 */
package com.zappos.json.format;

import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.zappos.json.ZapposJson;
import com.zappos.json.format.BigDecimalFormatter;
import com.zappos.json.format.ValueFormatter;
import java.math.BigDecimal;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

import static org.junit.Assert.assertEquals;
import org.junit.Test;
import java.math.BigDecimal;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.zappos.json.ZapposJson;
import com.zappos.json.format.BigDecimalFormatter;
import com.zappos.json.format.ValueFormatter;
import java.math.BigDecimal;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false)
public class BigDecimalFormatter_ESTest extends BigDecimalFormatter_ESTest_scaffolding {

    @Test
    public void testNewInstance() {
        BigDecimalFormatter bigDecimalFormatter = new BigDecimalFormatter();
        ValueFormatter<BigDecimal> valueFormatter = bigDecimalFormatter.newInstance();

        assertNotNull(valueFormatter);
        assertTrue(valueFormatter instanceof BigDecimalFormatter);
    }

    @Test
    public void testCast() {
        BigDecimalFormatter formatter = new BigDecimalFormatter();
        
        // Test case 1: Valid input
        Object validInput = new BigDecimal("10.5");
        BigDecimal result1 = formatter.cast(validInput);
        assertEquals(new BigDecimal("10.5"), result1);
        
        // Test case 2: Invalid input
        Object invalidInput = "invalid";
        try {
            BigDecimal result2 = formatter.cast(invalidInput);
            // If the invalid input does not throw an exception, the test should fail
            assertEquals("Invalid input should throw ClassCastException", null, result2);
        } catch (ClassCastException e) {
            // Expected behavior
        }
    }

}
