// original test path: /Users/zhi/Documents/PH.D/Project/Testing/ChatTESTER/CodePackage/Prompt2Testing/repo_get/Four_project/Zappos_zappos-json/src/test/java/com/zappos/json/JsonBeanAttribute_ESTest.java
/*
 * This file was automatically generated by EvoSuite
 * Thu Jan 25 13:48:09 GMT 2024
 */
package com.zappos.json;

import org.junit.Test;
import static org.junit.Assert.assertEquals;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.zappos.json.JsonBeanAttribute;
import com.zappos.json.annot.JsonEnum;
import com.zappos.json.format.JavaDateFormatter;
import com.zappos.json.format.ValueFormatter;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

import static org.junit.Assert.assertEquals;
import org.junit.Test;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.zappos.json.JsonBeanAttribute;
import com.zappos.json.annot.JsonEnum;
import com.zappos.json.format.JavaDateFormatter;
import com.zappos.json.format.ValueFormatter;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

import java.util.*;
import java.lang.*;
import static org.junit.Assert.assertEquals;
import org.junit.Test;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.zappos.json.JsonBeanAttribute;
import com.zappos.json.annot.JsonEnum;
import com.zappos.json.format.JavaDateFormatter;
import com.zappos.json.format.ValueFormatter;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

import org.junit.Test;
import java.lang.reflect.Field;
import static org.junit.Assert.assertEquals;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.zappos.json.JsonBeanAttribute;
import com.zappos.json.annot.JsonEnum;
import com.zappos.json.format.JavaDateFormatter;
import com.zappos.json.format.ValueFormatter;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

import static org.junit.Assert.assertEquals;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.zappos.json.JsonBeanAttribute;
import com.zappos.json.annot.JsonEnum;
import com.zappos.json.format.JavaDateFormatter;
import com.zappos.json.format.ValueFormatter;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false)
public class JsonBeanAttribute_ESTest extends JsonBeanAttribute_ESTest_scaffolding {

    @Test
    public void testGetFormatterPattern() {
        // Given
        JsonBeanAttribute jsonBeanAttribute = new JsonBeanAttribute();
        String expectedFormatterPattern = "testFormatterPattern";
        jsonBeanAttribute.setFormatterPattern(expectedFormatterPattern);

        // When
        String actualFormatterPattern = jsonBeanAttribute.getFormatterPattern();

        // Then
        assertEquals(expectedFormatterPattern, actualFormatterPattern);
    }

@Test
public void testGetFormatterClass() {
    Class<? extends ValueFormatter<?>> expectedFormatterClass = JavaDateFormatter.class;
    JsonBeanAttribute jsonBeanAttribute = new JsonBeanAttribute();
    jsonBeanAttribute.setFormatterClass(expectedFormatterClass);
    Class<? extends ValueFormatter<?>> actualFormatterClass = jsonBeanAttribute.getFormatterClass();
    
    assertEquals(expectedFormatterClass, actualFormatterClass);
}

    @Test
    public void testSetFormatterPattern() {
        // Given
        JsonBeanAttribute jsonBeanAttribute = new JsonBeanAttribute();

        // When
        jsonBeanAttribute.setFormatterPattern("yyyy-MM-dd");

        // Then
        assertEquals("Formatter pattern should be set correctly", "yyyy-MM-dd", jsonBeanAttribute.getFormatterPattern());
    }

    @Test
    public void testGetAttributeKey() {
        // Given
        String expectedAttributeKey = "testAttributeKey";
        JsonBeanAttribute jsonBeanAttribute = new JsonBeanAttribute(null, null, expectedAttributeKey);

        // When
        String actualAttributeKey = jsonBeanAttribute.getAttributeKey();

        // Then
        assertEquals(expectedAttributeKey, actualAttributeKey);
    }

    @Test
    public void testGetField() {
        // Given
        Field expectedField = null; // Initialize with the expected Field object

        JsonBeanAttribute jsonBeanAttribute = new JsonBeanAttribute(); // Create a new JsonBeanAttribute instance
        // Set the field using reflection (since the constructor is not accessible)
        try {
            Field field = JsonBeanAttribute.class.getDeclaredField("field");
            field.setAccessible(true);
            field.set(jsonBeanAttribute, expectedField);
        } catch (NoSuchFieldException | IllegalAccessException e) {
            e.printStackTrace();
        }

        // When
        Field actualField = jsonBeanAttribute.getField();

        // Then
        assertEquals(expectedField, actualField);
    }

    @Test
    public void testSetJsonKey() {
        // Given
        JsonBeanAttribute jsonBeanAttribute = new JsonBeanAttribute();
        String expectedJsonKey = "customKey";

        // When
        jsonBeanAttribute.setJsonKey(expectedJsonKey);

        // Then
        assertEquals(expectedJsonKey, jsonBeanAttribute.getJsonKey());
    }

    @Test
    public void testSetAttributeKey() {
        // Given
        JsonBeanAttribute jsonBeanAttribute = new JsonBeanAttribute();

        // When
        JsonBeanAttribute updatedAttribute = jsonBeanAttribute.setAttributeKey("newAttributeKey");

        // Then
        assertEquals("newAttributeKey", updatedAttribute.getAttributeKey());
    }

    @Test
    public void testGetJsonKey() {
        // Given
        Method method = null; // Define a valid Method instance
        Field field = null; // Define a valid Field instance
        String attributeKey = "testAttributeKey";
        JsonBeanAttribute jsonBeanAttribute = new JsonBeanAttribute(method, field, attributeKey);

        // When
        String actualJsonKey = jsonBeanAttribute.getJsonKey();

        // Then
        String expectedJsonKey = "testAttributeKey";
        assertEquals(expectedJsonKey, actualJsonKey);
    }

    @Test
    public void testSetFormatterClass() {
        JsonBeanAttribute jsonBeanAttribute = new JsonBeanAttribute();
        Class<? extends ValueFormatter<?>> formatterClass = JavaDateFormatter.class;

        jsonBeanAttribute.setFormatterClass(formatterClass);

        assertEquals(formatterClass, jsonBeanAttribute.getFormatterClass());
    }

}
