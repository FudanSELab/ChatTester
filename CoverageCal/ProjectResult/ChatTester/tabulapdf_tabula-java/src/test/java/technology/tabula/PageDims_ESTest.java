// original test path: /Users/zhi/Documents/PH.D/Project/Testing/ChatTESTER/CodePackage/Prompt2Testing/repo_get/Four_project/tabulapdf_tabula-java/src/test/java/technology/tabula/PageDims_ESTest.java
/*
 * This file was automatically generated by EvoSuite
 * Sat Feb 10 09:56:04 GMT 2024
 */
package technology.tabula;

import org.junit.Test;
import static org.junit.Assert.assertEquals;
import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import technology.tabula.PageDims;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false)
public class PageDims_ESTest extends PageDims_ESTest_scaffolding {

    @Test
    public void testGetHeight() {
        // Given
        float top = 10.0f;
        float left = 20.0f;
        float width = 100.0f;
        float height = 50.0f;
        
        PageDims pageDims = PageDims.of(top, left, width, height);
        
        // When
        float retrievedHeight = pageDims.getHeight();
        
        // Then
        assertEquals(height, retrievedHeight, 0.0f);
    }

    @Test
    public void testGetLeft() {
        float top = 10.0f;
        float left = 20.0f;
        float width = 100.0f;
        float height = 200.0f;

        PageDims pageDims = PageDims.of(top, left, width, height);

        float actualLeft = pageDims.getLeft();
        float expectedLeft = 20.0f;

        assertEquals(expectedLeft, actualLeft, 0.0f);
    }

    @Test
    public void testGetWidth() {
        // Given
        float expectedWidth = 10.0f;
        PageDims pageDims = PageDims.of(0.0f, 0.0f, expectedWidth, 0.0f);

        // When
        float actualWidth = pageDims.getWidth();

        // Then
        assertEquals(expectedWidth, actualWidth, 0.0f);
    }

    @Test
    public void testGetTop() {
        float expectedTop = 10.0f;
        PageDims pageDims = PageDims.of(expectedTop, 5.0f, 20.0f, 15.0f);
        
        float actualTop = pageDims.getTop();
        
        assertEquals(expectedTop, actualTop, 0.0f);
    }

    @Test
    public void testOf() {
        float top = 10.0f;
        float left = 20.0f;
        float width = 100.0f;
        float height = 50.0f;

        PageDims pageDims = PageDims.of(top, left, width, height);

        assertEquals(top, pageDims.getTop(), 0.001);
        assertEquals(left, pageDims.getLeft(), 0.001);
        assertEquals(width, pageDims.getWidth(), 0.001);
        assertEquals(height, pageDims.getHeight(), 0.001);
    }

}
