// original test path: /Users/zhi/Documents/PH.D/Project/Testing/ChatTESTER/CodePackage/Prompt2Testing/repo_get/Four_project/tabulapdf_tabula-java/src/test/java/technology/tabula/QuickSort_ESTest.java
/*
 * This file was automatically generated by EvoSuite
 * Sat Feb 10 10:01:44 GMT 2024
 */
package technology.tabula;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.RandomAccess;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import technology.tabula.QuickSort;

import org.junit.Test;
import java.util.List;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import technology.tabula.QuickSort;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false)
public class QuickSort_ESTest extends QuickSort_ESTest_scaffolding {

    @Test
    public void testSort() {
        // Create a list of unsorted elements
        List<Integer> unsortedList = new ArrayList<>();
        unsortedList.add(5);
        unsortedList.add(2);
        unsortedList.add(8);
        unsortedList.add(1);
        unsortedList.add(3);

        // Sort the list using the QuickSort algorithm
        QuickSort.sort(unsortedList);

        // Create a list of expected sorted elements
        List<Integer> expectedList = new ArrayList<>();
        expectedList.add(1);
        expectedList.add(2);
        expectedList.add(3);
        expectedList.add(5);
        expectedList.add(8);

        // Assert that the list is sorted correctly
        assertEquals(expectedList, unsortedList);
    }

    @Test
    public void testSort2() {
        // Create a list of unsorted elements
        List<Integer> unsortedList = new ArrayList<>();
        unsortedList.add(5);
        unsortedList.add(2);
        unsortedList.add(8);
        unsortedList.add(1);
        unsortedList.add(3);

        // Define a comparator for sorting integers in ascending order
        Comparator<Integer> ascendingComparator = Comparator.naturalOrder();

        // Call the sort method to sort the list
        QuickSort.sort(unsortedList, ascendingComparator);

        // Check if the list is sorted in ascending order
        for (int i = 0; i < unsortedList.size() - 1; i++) {
            assertTrue(unsortedList.get(i) <= unsortedList.get(i + 1));
        }
    }

}
