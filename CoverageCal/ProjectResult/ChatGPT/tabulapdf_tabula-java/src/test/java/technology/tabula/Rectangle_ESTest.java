/*
 * This file was automatically generated by EvoSuite
 * Sat Feb 10 10:03:59 GMT 2024
 */
package technology.tabula;


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import technology.tabula.Rectangle;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false)
public class Rectangle_ESTest extends Rectangle_ESTest_scaffolding {

@Test(timeout = 4000)
public void test00() throws Throwable {
    Rectangle rectangle0 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);
    rectangle0.add(0.0, (double) 0.0F);
    Rectangle rectangle1 = new Rectangle(987.8F, 0.0F, 0.0F, 987.8F);
    float float0 = rectangle0.verticalOverlapRatio(rectangle1);
    assertEquals(Float.POSITIVE_INFINITY, rectangle0.height, 0.01F);
    assertEquals(1.0F, float0, 0.01F);
}

@Test(timeout = 4000)
public void test01() throws Throwable {
    Rectangle rectangle0 = new Rectangle(0.0F, 532.54016F, 0.0F, 229.62F);
    float float0 = rectangle0.getRight();
    assertEquals(0.0F, rectangle0.width, 0.01F);
    assertEquals(0.0F, rectangle0.y, 0.01F);
    assertEquals(114.80999755859375, rectangle0.getCenterY(), 0.01);
    assertEquals(532.54016F, float0, 0.01F);
}

@Test(timeout = 4000)
public void test02() throws Throwable {
    Rectangle rectangle0 = new Rectangle();
    float float0 = rectangle0.verticalOverlap(rectangle0);
    assertEquals(0.0F, float0, 0.01F);
}

@Test(timeout = 4000)
public void test03() throws Throwable {
    Rectangle rectangle0 = new Rectangle();
    rectangle0.setBottom((-1));
    rectangle0.setTop(1020.68054F);
    assertEquals(-0.0F, rectangle0.getArea(), 0.01F);
}

@Test(timeout = 4000)
public void test04() throws Throwable {
    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();
    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);
    Point2D[] point2DArray0 = rectangle0.getPoints();
    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);
    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);
    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);
    assertEquals(4, point2DArray0.length);
}

@Test(timeout = 4000)
public void test05() throws Throwable {
    Rectangle rectangle0 = new Rectangle();
    Rectangle rectangle1 = new Rectangle(0.4F, 0.0F, 0.0F, 0.0F);
    Rectangle rectangle2 = rectangle1.merge(rectangle0);
    rectangle0.setBottom(1877.9292F);
    int int0 = rectangle0.compareTo(rectangle2);
    assertEquals(0.4F, rectangle1.height, 0.01F);
    assertEquals(1, int0);
}

@Test(timeout = 4000)
public void test06() throws Throwable {
    Rectangle rectangle0 = new Rectangle(1.0F, (-486.23865F), 1.0F, 2254.05F);
    float float0 = rectangle0.getBottom();
    assertEquals(2255.05F, float0, 0.01F);
    assertEquals((-485.2386474609375), rectangle0.getMaxX(), 0.01);
}

@Test(timeout = 4000)
public void test07() throws Throwable {
    Rectangle rectangle0 = new Rectangle(653.869F, 4128.04F, 4128.04F, 4128.04F);
    Rectangle rectangle1 = new Rectangle(653.869F, 4128.04F, 653.869F, 4128.04F);
    rectangle0.compareTo(rectangle1);
    assertEquals(4781.9090576171875, rectangle1.getMaxY(), 0.01);
    assertEquals(4781.9090576171875, rectangle1.getMaxX(), 0.01);
    assertEquals(4128.04F, rectangle0.width, 0.01F);
    assertEquals(0, rectangle1.isLtrDominant());
}

@Test(timeout = 4000)
public void test08() throws Throwable {
    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();
    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);
    assertEquals((-3.4028235E38F), rectangle0.width, 0.01F);
    rectangle0.setFrameFromCenter((-1.0), (double) Float.NEGATIVE_INFINITY, (double) Float.POSITIVE_INFINITY, 2916.991886);
    boolean boolean0 = rectangle0.verticallyOverlaps(rectangle0);
    assertFalse(boolean0);
}

@Test(timeout = 4000)
public void test09() throws Throwable {
    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();
    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);
    rectangle0.setLeft((-1137.2F));
    rectangle0.setBottom((-1.0F));
    assertEquals((-1137.2F), rectangle0.x, 0.01F);
}

@Test(timeout = 4000)
public void test10() throws Throwable {
    Rectangle rectangle0 = new Rectangle();
    float float0 = rectangle0.getLeft();
    assertEquals(0.0F, float0, 0.01F);
}

@Test(timeout = 4000)
public void test11() throws Throwable {
    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();
    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);
    rectangle0.setLeft((-1137.2F));
    rectangle0.setBottom((-1.0F));
    assertEquals((-1137.2F), rectangle0.x, 0.01F);
}

@Test(timeout = 4000)
public void test12() throws Throwable {
    Rectangle rectangle0 = new Rectangle(1.0F, (-486.23865F), 1.0F, 2254.05F);
    rectangle0.setFrameFromCenter((double) 2.0F, (double) 2.0F, 2440.0, (double) 2254.05F);
    rectangle0.setRight((-1));
    assertEquals(4504.1F, rectangle0.height, 0.01F);
}

@Test(timeout = 4000)
public void test13() throws Throwable {
    Rectangle rectangle0 = new Rectangle();
    Rectangle rectangle1 = new Rectangle(0.4F, 0.0F, 0.0F, 0.0F);
    Rectangle rectangle2 = rectangle1.merge(rectangle0);
    rectangle0.setBottom(1877.9292F);
    int int0 = rectangle0.compareTo(rectangle2);
    assertEquals(0.4F, rectangle1.height, 0.01F);
    assertEquals(1, int0);
}

@Test(timeout = 4000)
public void test14() throws Throwable {
    Rectangle rectangle0 = new Rectangle();
    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();
    linkedList0.add(rectangle0);
    linkedList0.push(rectangle0);
    rectangle0.add((double) 3.4028235E38F, (-2851.865300569));
    Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);
    assertTrue(linkedList0.contains(rectangle1));
    assertEquals(0.0F, rectangle1.x, 0.01F);
}

@Test(timeout = 4000)
public void test15() throws Throwable {
    Rectangle rectangle0 = new Rectangle();
    rectangle0.setBottom((-1));
    rectangle0.setTop(1020.68054F);
    assertEquals(-0.0F, rectangle0.getArea(), 0.01F);
}

@Test(timeout = 4000)
public void test16() throws Throwable {
    Rectangle rectangle0 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);
    Rectangle rectangle1 = new Rectangle(0.0F, Float.POSITIVE_INFINITY, (-1137.2F), 12.713349F);
    boolean boolean0 = rectangle0.horizontallyOverlaps(rectangle1);
    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);
    assertEquals((-14457.62F), rectangle1.getArea(), 0.01F);
    assertEquals(Float.POSITIVE_INFINITY, rectangle1.x, 0.01F);
    assertFalse(boolean0);
    assertEquals(0.0F, rectangle1.y, 0.01F);
}

@Test(timeout = 4000)
public void test17() throws Throwable {
    Rectangle rectangle0 = new Rectangle(1.0F, 1.0F, 1.0F, 1099.1113F);
    float float0 = rectangle0.getTop();
    assertEquals(1099.1113F, rectangle0.getArea(), 0.01F);
    assertEquals(1.0F, float0, 0.01F);
    assertEquals(1.0F, rectangle0.x, 0.01F);
}

}
