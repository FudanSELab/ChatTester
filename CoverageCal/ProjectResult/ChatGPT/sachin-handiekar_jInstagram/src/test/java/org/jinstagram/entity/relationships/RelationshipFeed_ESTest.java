// original test path: /Users/zhi/Documents/PH.D/Project/Testing/ChatTESTER/CodePackage/Prompt2Testing/repo_get/Four_project/sachin-handiekar_jInstagram/src/test/java/org/jinstagram/entity/relationships/RelationshipFeed_ESTest.java
/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 27 04:10:49 GMT 2024
 */
package org.jinstagram.entity.relationships;


import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jinstagram.entity.common.Meta;
import org.jinstagram.entity.relationships.RelationshipData;
import org.jinstagram.entity.relationships.RelationshipFeed;
import org.junit.runner.RunWith;

import org.junit.Test;
import static org.junit.Assert.*;
import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jinstagram.entity.common.Meta;
import org.jinstagram.entity.relationships.RelationshipData;
import org.jinstagram.entity.relationships.RelationshipFeed;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false)
public class RelationshipFeed_ESTest extends RelationshipFeed_ESTest_scaffolding {

@Test
public void testGetData() {
    // Create an instance of RelationshipFeed
    RelationshipFeed relationshipFeed = new RelationshipFeed();

    // Create an instance of RelationshipData
    RelationshipData expectedData = new RelationshipData();

    // Set the expected data in the RelationshipFeed instance
    relationshipFeed.setData(expectedData);

    // Call the getData() method
    RelationshipData actualData = relationshipFeed.getData();

    // Assert that the actual data is equal to the expected data
    assertEquals(expectedData, actualData);
}

@Test
public void testSetMeta() {
    // Create a new instance of the class
    RelationshipFeed relationshipFeed = new RelationshipFeed();

    // Create a new instance of the Meta class
    Meta meta = new Meta();

    // Set the meta object using the setMeta method
    relationshipFeed.setMeta(meta);

    // Get the meta object using the getMeta method
    Meta actualMeta = relationshipFeed.getMeta();

    // Assert that the actual meta object is equal to the expected meta object
    assertEquals(meta, actualMeta);
}

    @Test
    public void testSetData() {
        // Create a new instance of RelationshipFeed
        RelationshipFeed relationshipFeed = new RelationshipFeed();

        // Create a new instance of RelationshipData
        RelationshipData data = new RelationshipData();

        // Set the data using the setData method
        relationshipFeed.setData(data);

        // Verify that the data is set correctly
        assertEquals(data, relationshipFeed.getData());
    }

@Test
public void testGetMeta() {
    // Create an instance of RelationshipFeed
    RelationshipFeed relationshipFeed = new RelationshipFeed();

    // Create an instance of Meta
    Meta expectedMeta = new Meta();
    expectedMeta.setCode(200);
    expectedMeta.setErrorType("none");

    // Set the expected Meta object to the RelationshipFeed instance
    relationshipFeed.setMeta(expectedMeta);

    // Call the getMeta() method
    Meta actualMeta = relationshipFeed.getMeta();

    // Assert that the actual Meta object is equal to the expected Meta object
    assertEquals(expectedMeta, actualMeta);
}

@Test
public void testToString() {
    // Create test data
    RelationshipData testData = new RelationshipData();
    Meta testMeta = new Meta();
    RelationshipFeed relationshipFeed = new RelationshipFeed();
    relationshipFeed.setData(testData);
    relationshipFeed.setMeta(testMeta);

    // Call the method under test
    String result = relationshipFeed.toString();

    // Verify the result
    String expected = "RelationshipFeed [data=" + testData + ", meta=" + testMeta + "]";
    assertEquals(expected, result);
}

}
