// original test path: /Users/zhi/Documents/PH.D/Project/Testing/ChatTESTER/CodePackage/Prompt2Testing/repo_get/Four_project/sachin-handiekar_jInstagram/src/test/java/org/jinstagram/realtime/SubscriptionResponseObject_ESTest.java
/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 27 05:03:32 GMT 2024
 */
package org.jinstagram.realtime;


import org.junit.Test;
import static org.junit.Assert.*;
import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jinstagram.realtime.SubscriptionResponseObject;
import org.junit.runner.RunWith;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jinstagram.realtime.SubscriptionResponseObject;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false)
public class SubscriptionResponseObject_ESTest extends SubscriptionResponseObject_ESTest_scaffolding {

@Test
public void testSetChangedAspect() {
    // Create an instance of SubscriptionResponseObject
    SubscriptionResponseObject subscription = new SubscriptionResponseObject();

    // Set the changed aspect using the setChangedAspect method
    String changedAspect = "aspect";
    subscription.setChangedAspect(changedAspect);

    // Verify that the changed aspect is set correctly
    assertEquals(changedAspect, subscription.getChangedAspect());
}

    @Test
    public void testSetSubscriptionId() {
        SubscriptionResponseObject response = new SubscriptionResponseObject();
        String subscriptionId = "12345";
        
        response.setSubscriptionId(subscriptionId);
        
        assertEquals(subscriptionId, response.getSubscriptionId());
    }

    @Test
    public void testGetEpochTime() {
        SubscriptionResponseObject response = new SubscriptionResponseObject();
        long expectedEpochTime = 1234567890;
        response.setEpochTime(expectedEpochTime);

        long actualEpochTime = response.getEpochTime();

        assertEquals(expectedEpochTime, actualEpochTime);
    }

    @Test
    public void testGetObjectId() {
        // Create an instance of SubscriptionResponseObject
        SubscriptionResponseObject response = new SubscriptionResponseObject();

        // Set the objectId using the setter method
        response.setObjectId("12345");

        // Call the getObjectId method and assert the expected value
        assertEquals("12345", response.getObjectId());
    }

    @Test
    public void testSetObjectId() {
        SubscriptionResponseObject response = new SubscriptionResponseObject();
        String objectId = "12345";
        response.setObjectId(objectId);
        assertEquals(objectId, response.getObjectId());
    }

@Test
public void testSetObject() {
    // Create an instance of SubscriptionResponseObject
    SubscriptionResponseObject response = new SubscriptionResponseObject();

    // Set the object using the setObject method
    String expectedObject = "Test Object";
    response.setObject(expectedObject);

    // Verify that the object is set correctly
    String actualObject = response.getObject();
    assertEquals(expectedObject, actualObject);
}

    @Test
    public void testGetSubscriptionId() {
        // Create an instance of SubscriptionResponseObject
        SubscriptionResponseObject response = new SubscriptionResponseObject();

        // Set the subscriptionId using the setter method
        response.setSubscriptionId("12345");

        // Call the getSubscriptionId method and assert the expected value
        assertEquals("12345", response.getSubscriptionId());
    }

    @Test
    public void testGetObject() {
        // Create an instance of SubscriptionResponseObject
        SubscriptionResponseObject response = new SubscriptionResponseObject();

        // Set the object value
        String expectedObject = "Test Object";
        response.setObject(expectedObject);

        // Call the getObject() method
        String actualObject = response.getObject();

        // Assert that the returned object is equal to the expected object
        assertEquals(expectedObject, actualObject);
    }

    @Test
    public void testSetEpochTime() {
        SubscriptionResponseObject response = new SubscriptionResponseObject();
        long epochTime = 1234567890L;
        
        response.setEpochTime(epochTime);
        
        assertEquals(epochTime, response.getEpochTime());
    }

@Test
public void testGetChangedAspect() {
    // Create an instance of SubscriptionResponseObject
    SubscriptionResponseObject obj = new SubscriptionResponseObject();

    // Set the value of changedAspect using the setter method
    String expected = "aspect";
    obj.setChangedAspect(expected);

    // Call the getChangedAspect method and store the result
    String actual = obj.getChangedAspect();

    // Assert that the actual value is equal to the expected value
    assertEquals(expected, actual);
}

}
