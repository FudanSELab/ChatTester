// original test path: /Users/zhi/Documents/PH.D/Project/Testing/ChatTESTER/CodePackage/Prompt2Testing/repo_get/Four_project/sachin-handiekar_jInstagram/src/test/java/org/jinstagram/InstagramConfig_ESTest.java
/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 27 04:50:40 GMT 2024
 */
package org.jinstagram;

import org.junit.Test;
import static org.junit.Assert.*;
import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jinstagram.InstagramConfig;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false)
public class InstagramConfig_ESTest extends InstagramConfig_ESTest_scaffolding {

    @Test
    public void testSetConnectionKeepAlive() {
        InstagramConfig config = new InstagramConfig();
        boolean connectionKeepAlive = true;
        
        config.setConnectionKeepAlive(connectionKeepAlive);
        
        assertEquals(connectionKeepAlive, config.isConnectionKeepAlive());
    }

    @Test
    public void testSetConnectionTimeoutMills() {
        InstagramConfig config = new InstagramConfig();
        int connectionTimeoutMills = 5000;
        
        config.setConnectionTimeoutMills(connectionTimeoutMills);
        
        assertEquals(connectionTimeoutMills, config.getConnectionTimeoutMills());
    }

    @Test
    public void testGetVersion() {
        InstagramConfig config = new InstagramConfig();
        String expectedVersion = "1.0";
        config.setVersion(expectedVersion);

        String actualVersion = config.getVersion();

        assertEquals(expectedVersion, actualVersion);
    }

    @Test
    public void testSetVersion() {
        // Create an instance of InstagramConfig
        InstagramConfig config = new InstagramConfig();

        // Set the base URI
        config.setBaseURI("https://api.instagram.com");

        // Set the version
        String version = "v1";
        config.setVersion(version);

        // Verify that the version is set correctly
        assertEquals(version, config.getVersion());

        // Verify that the API URL is set correctly
        String expectedApiURL = "https://api.instagram.com/v1";
        assertEquals(expectedApiURL, config.getApiURL());
    }

    @Test
    public void testSetRetryOnServerError() {
        InstagramConfig config = new InstagramConfig();
        boolean retryOnServerError = true;
        
        config.setRetryOnServerError(retryOnServerError);
        
        assertEquals(retryOnServerError, config.isRetryOnServerError());
    }

    @Test
    public void testSetBaseURI() {
        // Create an instance of InstagramConfig
        InstagramConfig config = new InstagramConfig();

        // Set the baseURI
        String baseURI = "https://api.instagram.com";
        config.setBaseURI(baseURI);

        // Verify that the baseURI is set correctly
        assertEquals(baseURI, config.getBaseURI());

        // Verify that the apiURL is set correctly
        String expectedApiURL = baseURI + "/" + config.getVersion();
        assertEquals(expectedApiURL, config.getApiURL());
    }

    @Test
    public void testGetConnectionTimeoutMills() {
        InstagramConfig config = new InstagramConfig();
        int expectedTimeout = 5000;
        config.setConnectionTimeoutMills(expectedTimeout);

        int actualTimeout = config.getConnectionTimeoutMills();

        assertEquals(expectedTimeout, actualTimeout);
    }

    @Test
    public void testIsConnectionKeepAlive() {
        InstagramConfig config = new InstagramConfig();
        boolean expected = false;
        boolean actual = config.isConnectionKeepAlive();
        assertEquals(expected, actual);
    }

    @Test
    public void testGetReadTimeoutMills() {
        InstagramConfig config = new InstagramConfig();
        int expectedTimeout = 1000;
        config.setReadTimeoutMills(expectedTimeout);

        int actualTimeout = config.getReadTimeoutMills();

        assertEquals(expectedTimeout, actualTimeout);
    }

    @Test
    public void testSetEnforceSignedRequest() {
        InstagramConfig config = new InstagramConfig();
        boolean enforceSignedRequest = true;
        
        config.setEnforceSignedRequest(enforceSignedRequest);
        
        assertTrue(config.isEnforceSignedRequest());
    }

    @Test
    public void testIsEnforceSignedRequest() {
        InstagramConfig config = new InstagramConfig();
        boolean enforceSignedRequest = config.isEnforceSignedRequest();
        assertFalse(enforceSignedRequest);
    }

    @Test
    public void testGetBaseURI() {
        // Create an instance of InstagramConfig
        InstagramConfig config = new InstagramConfig();

        // Set the baseURI
        String expectedBaseURI = "https://www.example.com";
        config.setBaseURI(expectedBaseURI);

        // Get the baseURI using the getBaseURI() method
        String actualBaseURI = config.getBaseURI();

        // Assert that the actual baseURI is equal to the expected baseURI
        assertEquals(expectedBaseURI, actualBaseURI);
    }

    @Test
    public void testSetReadTimeoutMills() {
        InstagramConfig config = new InstagramConfig();
        int readTimeoutMills = 5000;
        
        config.setReadTimeoutMills(readTimeoutMills);
        
        assertEquals(readTimeoutMills, config.getReadTimeoutMills());
    }

    @Test
    public void testIsRetryOnServerError() {
        InstagramConfig config = new InstagramConfig();
        boolean expected = false;
        boolean actual = config.isRetryOnServerError();
        assertEquals(expected, actual);
    }

}
