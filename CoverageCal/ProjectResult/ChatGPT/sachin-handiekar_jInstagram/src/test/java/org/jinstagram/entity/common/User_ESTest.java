// original test path: /Users/zhi/Documents/PH.D/Project/Testing/ChatTESTER/CodePackage/Prompt2Testing/repo_get/Four_project/sachin-handiekar_jInstagram/src/test/java/org/jinstagram/entity/common/User_ESTest.java
/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 27 03:53:01 GMT 2024
 */
package org.jinstagram.entity.common;


import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jinstagram.entity.common.User;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false)
public class User_ESTest extends User_ESTest_scaffolding {

@Test
public void testGetBio() {
    // Create a new User object
    User user = new User();

    // Set the bio of the user
    String expectedBio = "This is my bio";
    user.setBio(expectedBio);

    // Call the getBio() method and assert the returned value
    String actualBio = user.getBio();
    assertEquals(expectedBio, actualBio);
}

@Test
public void testGetUserName() {
    // Create a new User object
    User user = new User();

    // Set the username using the setter method
    user.setUserName("john_doe");

    // Call the getUserName() method and store the result in a variable
    String result = user.getUserName();

    // Assert that the result is equal to the expected username
    assertEquals("john_doe", result);
}

@Test
public void testSetId() {
    // Create a new instance of the User class
    User user = new User();

    // Set the id using the setId method
    String id = "12345";
    user.setId(id);

    // Verify that the id has been set correctly
    assertEquals(id, user.getId());
}

@Test
public void testSetProfilePictureUrl() {
    // Create a new instance of the User class
    User user = new User();

    // Set the profile picture URL using the setProfilePictureUrl method
    String profilePictureUrl = "https://example.com/profile.jpg";
    user.setProfilePictureUrl(profilePictureUrl);

    // Verify that the profile picture URL has been set correctly
    assertEquals(profilePictureUrl, user.getProfilePictureUrl());
}

@Test
public void testGetId() {
    // Create a new instance of the User class
    User user = new User();

    // Set the id using the setter method
    user.setId("12345");

    // Call the getId() method and assert that it returns the expected value
    assertEquals("12345", user.getId());
}

@Test
public void testGetProfilePictureUrl() {
    // Create a new User object
    User user = new User();

    // Set the profile picture URL
    String profilePictureUrl = "https://example.com/profile.jpg";
    user.setProfilePictureUrl(profilePictureUrl);

    // Get the profile picture URL using the getProfilePictureUrl() method
    String result = user.getProfilePictureUrl();

    // Assert that the returned profile picture URL is equal to the one set
    assertEquals(profilePictureUrl, result);
}

@Test
public void testGetWebsiteUrl() {
    // Create a User object
    User user = new User();

    // Set the website URL
    String websiteUrl = "https://www.example.com";
    user.setWebsiteUrl(websiteUrl);

    // Get the website URL using the getWebsiteUrl() method
    String retrievedWebsiteUrl = user.getWebsiteUrl();

    // Assert that the retrieved website URL is equal to the set website URL
    assertEquals(websiteUrl, retrievedWebsiteUrl);
}

@Test
public void testToString() {
    // Create a User object with sample data
    User user = new User();
    user.setBio("Sample Bio");
    user.setFullName("John Doe");
    user.setId("123456");
    user.setProfilePictureUrl("https://example.com/profile.jpg");
    user.setUserName("johndoe");
    user.setWebsiteUrl("https://example.com");

    // Expected result
    String expected = "User [bio=Sample Bio, fullName=John Doe, id=123456, profilePictureUrl=https://example.com/profile.jpg, userName=johndoe, websiteUrl=https://example.com]";

    // Call the toString() method
    String result = user.toString();

    // Assert the result
    assertEquals(expected, result);
}

@Test
public void testSetWebsiteUrl() {
    // Create a new instance of the User class
    User user = new User();

    // Set the website URL using the setWebsiteUrl method
    String websiteUrl = "https://example.com";
    user.setWebsiteUrl(websiteUrl);

    // Verify that the website URL has been set correctly
    assertEquals(websiteUrl, user.getWebsiteUrl());
}

@Test
public void testGetFullName() {
    // Create a new User object
    User user = new User();

    // Set the full name of the user
    String fullName = "John Doe";
    user.setFullName(fullName);

    // Get the full name using the getFullName() method
    String retrievedFullName = user.getFullName();

    // Assert that the retrieved full name is equal to the set full name
    assertEquals(fullName, retrievedFullName);
}

@Test
public void testSetFullName() {
    // Create a new instance of User
    User user = new User();

    // Set the full name using the setFullName method
    String fullName = "John Doe";
    user.setFullName(fullName);

    // Verify that the full name has been set correctly
    assertEquals(fullName, user.getFullName());
}

@Test
public void testSetBio() {
    // Create a new User object
    User user = new User();

    // Set the bio using the setBio method
    String bio = "This is my bio";
    user.setBio(bio);

    // Verify that the bio has been set correctly
    assertEquals(bio, user.getBio());
}

}
