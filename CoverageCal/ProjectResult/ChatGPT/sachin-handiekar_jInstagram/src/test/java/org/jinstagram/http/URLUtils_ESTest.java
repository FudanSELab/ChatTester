// original test path: /Users/zhi/Documents/PH.D/Project/Testing/ChatTESTER/CodePackage/Prompt2Testing/repo_get/Four_project/sachin-handiekar_jInstagram/src/test/java/org/jinstagram/http/URLUtils_ESTest.java
/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 27 04:48:19 GMT 2024
 */
package org.jinstagram.http;

import org.junit.Test;
import static org.junit.Assert.*;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jinstagram.http.URLUtils;
import org.junit.runner.RunWith;

import java.util.HashMap;
import java.util.Map;
import org.junit.Test;
import static org.junit.Assert.*;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jinstagram.http.URLUtils;
import org.junit.runner.RunWith;

import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import org.junit.Test;
import static org.junit.Assert.*;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jinstagram.http.URLUtils;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false)
public class URLUtils_ESTest extends URLUtils_ESTest_scaffolding {

    @Test
    public void testPercentEncode() {
        String input = "Hello World!";
        String expectedOutput = "Hello%20World%21";
        String actualOutput = URLUtils.percentEncode(input);
        assertEquals(expectedOutput, actualOutput);
    }

    @Test
    public void testQueryStringToMap() {
        // Test case 1: queryString is null
        String queryString1 = null;
        Map<String, String> result1 = URLUtils.queryStringToMap(queryString1);
        assertNotNull(result1);
        assertTrue(result1.isEmpty());

        // Test case 2: queryString is empty
        String queryString2 = "";
        Map<String, String> result2 = URLUtils.queryStringToMap(queryString2);
        assertNotNull(result2);
        assertTrue(result2.isEmpty());

        // Test case 3: queryString with single parameter
        String queryString3 = "key1=value1";
        Map<String, String> result3 = URLUtils.queryStringToMap(queryString3);
        assertNotNull(result3);
        assertEquals(1, result3.size());
        assertEquals("value1", result3.get("key1"));

        // Test case 4: queryString with multiple parameters
        String queryString4 = "key1=value1&key2=value2&key3=value3";
        Map<String, String> result4 = URLUtils.queryStringToMap(queryString4);
        assertNotNull(result4);
        assertEquals(3, result4.size());
        assertEquals("value1", result4.get("key1"));
        assertEquals("value2", result4.get("key2"));
        assertEquals("value3", result4.get("key3"));

        // Test case 5: queryString with encoded values
        String queryString5 = "key1=value%201&key2=value%202";
        Map<String, String> result5 = URLUtils.queryStringToMap(queryString5);
        assertNotNull(result5);
        assertEquals(2, result5.size());
        assertEquals("value 1", result5.get("key1"));
        assertEquals("value 2", result5.get("key2"));
    }

    @Test
    public void testFormURLDecode() {
        String encodedString = "Hello%20World%21";
        String expectedDecodedString = "Hello World!";
        String decodedString = URLUtils.formURLDecode(encodedString);
        assertEquals(expectedDecodedString, decodedString);
    }

    @Test
    public void testDecodeURIComponent() {
        // Test case 1: Decoding a URL-encoded string
        String encodedString = "Hello%20World%21";
        String expectedDecodedString = "Hello World!";
        String decodedString = URLUtils.decodeURIComponent(encodedString);
        assertEquals(expectedDecodedString, decodedString);

        // Test case 2: Decoding a non URL-encoded string
        String nonEncodedString = "Hello World!";
        String expectedNonDecodedString = "Hello World!";
        String nonDecodedString = URLUtils.decodeURIComponent(nonEncodedString);
        assertEquals(expectedNonDecodedString, nonDecodedString);

        // Test case 3: Decoding a string with special characters
        String specialCharsString = "%24%25%26%2B%2C%2F%3A%3B%3D%3F%40";
        String expectedSpecialCharsDecodedString = "$%&+,/:;=?@";
        String specialCharsDecodedString = URLUtils.decodeURIComponent(specialCharsString);
        assertEquals(expectedSpecialCharsDecodedString, specialCharsDecodedString);
    }

}
