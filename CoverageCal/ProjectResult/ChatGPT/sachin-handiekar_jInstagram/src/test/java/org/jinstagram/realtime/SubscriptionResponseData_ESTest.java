// original test path: /Users/zhi/Documents/PH.D/Project/Testing/ChatTESTER/CodePackage/Prompt2Testing/repo_get/Four_project/sachin-handiekar_jInstagram/src/test/java/org/jinstagram/realtime/SubscriptionResponseData_ESTest.java
/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 27 05:02:29 GMT 2024
 */
package org.jinstagram.realtime;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jinstagram.realtime.SubscriptionResponseData;
import org.junit.runner.RunWith;

import org.junit.Test;
import static org.junit.Assert.*;
import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jinstagram.realtime.SubscriptionResponseData;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false)
public class SubscriptionResponseData_ESTest extends SubscriptionResponseData_ESTest_scaffolding {

    @Test
    public void testGetCallbackUrl() {
        // Create an instance of SubscriptionResponseData
        SubscriptionResponseData responseData = new SubscriptionResponseData();

        // Set the callbackUrl using the setter method
        String expectedCallbackUrl = "https://example.com/callback";
        responseData.setCallbackUrl(expectedCallbackUrl);

        // Call the getCallbackUrl method and assert the returned value
        String actualCallbackUrl = responseData.getCallbackUrl();
        assertEquals(expectedCallbackUrl, actualCallbackUrl);
    }

    @Test
    public void testSetCallbackUrl() {
        SubscriptionResponseData responseData = new SubscriptionResponseData();
        String callbackUrl = "https://example.com/callback";

        responseData.setCallbackUrl(callbackUrl);

        assertEquals(callbackUrl, responseData.getCallbackUrl());
    }

    @Test
    public void testSetType() {
        SubscriptionResponseData responseData = new SubscriptionResponseData();
        String type = "exampleType";
        responseData.setType(type);
        assertEquals(type, responseData.getType());
    }

    @Test
    public void testSetObject() {
        SubscriptionResponseData responseData = new SubscriptionResponseData();
        String expectedObject = "Test Object";
        
        responseData.setObject(expectedObject);
        String actualObject = responseData.getObject();
        
        assertEquals(expectedObject, actualObject);
    }

    @Test
    public void testSetAspect() {
        SubscriptionResponseData responseData = new SubscriptionResponseData();
        String aspect = "testAspect";
        responseData.setAspect(aspect);
        assertEquals(aspect, responseData.getAspect());
    }

    @Test
    public void testGetType() {
        // Create an instance of SubscriptionResponseData
        SubscriptionResponseData responseData = new SubscriptionResponseData();

        // Set the type using the setter method
        responseData.setType("exampleType");

        // Get the type using the getType() method
        String type = responseData.getType();

        // Assert that the returned type is equal to the expected type
        assertEquals("exampleType", type);
    }

    @Test
    public void testGetAspect() {
        // Create an instance of SubscriptionResponseData
        SubscriptionResponseData responseData = new SubscriptionResponseData();

        // Set the aspect value
        String aspectValue = "aspect";
        responseData.setAspect(aspectValue);

        // Call the getAspect() method and assert the returned value
        String returnedAspect = responseData.getAspect();
        assertEquals(aspectValue, returnedAspect);
    }

    @Test
    public void testGetId() {
        // Create an instance of SubscriptionResponseData
        SubscriptionResponseData responseData = new SubscriptionResponseData();

        // Set the value of id using the setter method
        responseData.setId("12345");

        // Get the value of id using the getter method
        String id = responseData.getId();

        // Assert that the value of id is equal to the expected value
        assertEquals("12345", id);
    }

@Test
public void testGetObject() {
    // Create an instance of SubscriptionResponseData
    SubscriptionResponseData responseData = new SubscriptionResponseData();

    // Set the value of the object property
    String expectedObject = "Test Object";
    responseData.setObject(expectedObject);

    // Call the getObject() method and assert the returned value
    String actualObject = responseData.getObject();
    assertEquals(expectedObject, actualObject);
}

    @Test
    public void testSetId() {
        SubscriptionResponseData responseData = new SubscriptionResponseData();
        String id = "12345";
        responseData.setId(id);
        assertEquals(id, responseData.getId());
    }

    @Test
    public void testSetObjectId() {
        SubscriptionResponseData responseData = new SubscriptionResponseData();
        String objectId = "12345";
        responseData.setObjectId(objectId);
        assertEquals(objectId, responseData.getObjectId());
    }

    @Test
    public void testGetObjectId() {
        // Create an instance of SubscriptionResponseData
        SubscriptionResponseData responseData = new SubscriptionResponseData();

        // Set the objectId using the setObjectId() method
        String expectedObjectId = "12345";
        responseData.setObjectId(expectedObjectId);

        // Call the getObjectId() method and assert the returned value
        String actualObjectId = responseData.getObjectId();
        assertEquals(expectedObjectId, actualObjectId);
    }

}
