// original test path: /Users/zhi/Documents/PH.D/Project/Testing/ChatTESTER/CodePackage/Prompt2Testing/repo_get/Four_project/sachin-handiekar_jInstagram/src/test/java/org/jinstagram/http/Request_ESTest.java
/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 27 04:43:07 GMT 2024
 */
package org.jinstagram.http;

import org.junit.Test;
import static org.junit.Assert.*;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.Proxy;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.jinstagram.http.Request;
import org.jinstagram.http.Verbs;
import org.junit.runner.RunWith;

import java.util.Map;
import org.junit.Test;
import static org.junit.Assert.*;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.Proxy;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.jinstagram.http.Request;
import org.jinstagram.http.Verbs;
import org.junit.runner.RunWith;

import java.net.Proxy;
import org.junit.Test;
import static org.junit.Assert.*;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.Proxy;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.jinstagram.http.Request;
import org.jinstagram.http.Verbs;
import org.junit.runner.RunWith;

import org.junit.Test;
import java.util.Map;
import java.util.HashMap;
import static org.junit.Assert.*;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.Proxy;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.jinstagram.http.Request;
import org.jinstagram.http.Verbs;
import org.junit.runner.RunWith;

import org.junit.Test;
import java.util.concurrent.TimeUnit;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.Proxy;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.jinstagram.http.Request;
import org.jinstagram.http.Verbs;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false)
public class Request_ESTest extends Request_ESTest_scaffolding {

    @Test
    public void testGetConnectTimeoutInMillis() {
        Request request = new Request(Verbs.GET, "https://example.com");
        request.setConnectTimeout(5000, TimeUnit.MILLISECONDS);
        int expectedTimeout = 5000;
        
        int actualTimeout = request.getConnectTimeoutInMillis();
        
        assertEquals(expectedTimeout, actualTimeout);
    }

    @Test
    public void testSetReadTimeout() {
        Request request = new Request(Verbs.GET, "https://example.com");

        int duration = 10;
        TimeUnit unit = TimeUnit.SECONDS;

        request.setReadTimeout(duration, unit);

        int expectedTimeoutInMillis = (int) unit.toMillis(duration);
        int actualTimeoutInMillis = request.getReadTimeoutInMillis();

        assertEquals(expectedTimeoutInMillis, actualTimeoutInMillis);
    }

    @Test
    public void testAddBodyParameter() {
        // Create a Request object
        Request request = new Request(Verbs.GET, "https://example.com");

        // Add body parameter
        String key = "paramKey";
        String value = "paramValue";
        request.addBodyParameter(key, value);

        // Get the body parameters
        Map<String, String> bodyParams = request.getBodyParams();

        // Assert that the body parameter was added correctly
        assertTrue(bodyParams.containsKey(key));
        assertEquals(value, bodyParams.get(key));
    }

    @Test
    public void testGetProxy() {
        // Create a Request object
        Request request = new Request(Verbs.GET, "https://example.com");

        // Set the proxy
        Proxy expectedProxy = Proxy.NO_PROXY;
        request.setProxy(expectedProxy);

        // Get the proxy from the Request object
        Proxy actualProxy = request.getProxy();

        // Assert that the returned proxy is the same as the expected proxy
        assertEquals(expectedProxy, actualProxy);
    }

    @Test
    public void testGetQueryStringParams() {
        // Create a Request object
        Request request = new Request(Verbs.GET, "https://example.com");

        // Set query string parameters
        request.addQuerystringParameter("param1", "value1");
        request.addQuerystringParameter("param2", "value2");

        // Call the getQueryStringParams() method
        Map<String, String> params = request.getQueryStringParams();

        // Verify the returned map contains the expected parameters
        assertEquals(2, params.size());
        assertEquals("value1", params.get("param1"));
        assertEquals("value2", params.get("param2"));
    }

    @Test
    public void testGetVerb() {
        // Create a Request object
        Request request = new Request(Verbs.GET, "https://example.com");

        // Call the getVerb() method
        Verbs verb = request.getVerb();

        // Assert that the returned verb is equal to the expected verb
        assertEquals(Verbs.GET, verb);
    }

    @Test
    public void testGetConnectionKeepAlive() {
        Request request = new Request(Verbs.GET, "https://example.com");
        request.setConnectionKeepAlive(true);
        boolean connectionKeepAlive = request.getConnectionKeepAlive();
        assertTrue(connectionKeepAlive);
    }

    @Test
    public void testAddHeader() {
        // Create a Request object
        Request request = new Request(Verbs.GET, "https://example.com");

        // Add a header
        String key = "Content-Type";
        String value = "application/json";
        request.addHeader(key, value);

        // Get the headers from the Request object
        Map<String, String> headers = request.getHeaders();

        // Verify that the header was added correctly
        assertTrue(headers.containsKey(key));
        assertEquals(value, headers.get(key));
    }

    @Test
    public void testGetUrl() {
        // Create a Request object
        Verbs verb = Verbs.GET;
        String url = "https://example.com";
        Request request = new Request(verb, url);

        // Call the getUrl() method
        String result = request.getUrl();

        // Assert that the returned URL is equal to the original URL
        assertEquals(url, result);
    }

    @Test
    public void testGetReadTimeoutInMillis() {
        Request request = new Request(Verbs.GET, "https://example.com");
        request.setReadTimeout(5000, TimeUnit.MILLISECONDS);
        int expectedTimeout = 5000;
        
        int actualTimeout = request.getReadTimeoutInMillis();
        
        assertEquals(expectedTimeout, actualTimeout);
    }

    @Test
    public void testAddQuerystringParameter() {
        // Create a Request object
        Request request = new Request(Verbs.GET, "https://example.com");

        // Add querystring parameter
        String key = "param1";
        String value = "value1";
        request.addQuerystringParameter(key, value);

        // Get the querystring parameters
        Map<String, String> queryParams = request.getQueryStringParams();

        // Assert that the querystring parameter is added correctly
        assertTrue(queryParams.containsKey(key));
        assertEquals(value, queryParams.get(key));
    }

    @Test
    public void testSetConnectTimeout() {
        Request request = new Request(Verbs.GET, "https://example.com");
        int duration = 10;
        TimeUnit unit = TimeUnit.SECONDS;

        request.setConnectTimeout(duration, unit);

        int expectedTimeoutInMillis = (int) unit.toMillis(duration);
        int actualTimeoutInMillis = request.getConnectTimeoutInMillis();

        assertEquals(expectedTimeoutInMillis, actualTimeoutInMillis);
    }

    @Test
    public void testAddPayload() {
        // Create a Request object
        Request request = new Request(Verbs.GET, "https://example.com");

        // Set the payload
        String payload = "Test Payload";
        request.addPayload(payload);

        // Verify that the payload is set correctly
        assertEquals(payload, request.getBodyContents());
    }

    @Test
    public void testToString() {
        Request request = new Request(Verbs.GET, "https://example.com");
        String expected = "@Request(GET https://example.com)";
        String actual = request.toString();
        assertEquals(expected, actual);
    }

    @Test
    public void testGetHeaders() {
        // Create a Request object
        Request request = new Request(Verbs.GET, "https://example.com");

        // Add headers to the Request object
        request.addHeader("Content-Type", "application/json");
        request.addHeader("Authorization", "Bearer token");

        // Get the headers from the Request object
        Map<String, String> headers = request.getHeaders();

        // Assert that the headers are not null
        assertNotNull(headers);

        // Assert that the headers contain the expected values
        assertEquals("application/json", headers.get("Content-Type"));
        assertEquals("Bearer token", headers.get("Authorization"));
    }

    @Test
    public void testGetBodyParams() {
        // Create a Request object
        Request request = new Request(Verbs.GET, "https://example.com");

        // Add body parameters
        request.addBodyParameter("param1", "value1");
        request.addBodyParameter("param2", "value2");

        // Get the body parameters
        Map<String, String> bodyParams = request.getBodyParams();

        // Assert that the body parameters are correct
        assertEquals(2, bodyParams.size());
        assertEquals("value1", bodyParams.get("param1"));
        assertEquals("value2", bodyParams.get("param2"));
    }

    @Test
    public void testSetProxy() {
        // Create a Request object
        Request request = new Request(Verbs.GET, "https://example.com");

        // Create a Proxy object
        Proxy proxy = Proxy.NO_PROXY;

        // Set the proxy for the Request object
        request.setProxy(proxy);

        // Verify that the proxy is set correctly
        assertEquals(proxy, request.getProxy());
    }

    @Test
    public void testSetCharset() {
        Request request = new Request(Verbs.GET, "https://example.com");
        String charsetName = "UTF-8";
        
        request.setCharset(charsetName);
        
        assertEquals(charsetName, request.getCharset());
    }

}
