// original test path: /Users/zhi/Documents/PH.D/Project/Testing/ChatTESTER/CodePackage/Prompt2Testing/repo_get/Four_project/Zappos_zappos-json/src/test/java/com/zappos/json/format/JavaDateFormatter_ESTest.java
/*
 * This file was automatically generated by EvoSuite
 * Thu Jan 25 13:35:46 GMT 2024
 */
package com.zappos.json.format;

import org.junit.Test;
import static org.junit.Assert.*;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.zappos.json.ZapposJson;
import com.zappos.json.format.JavaDateFormatter;
import com.zappos.json.format.ValueFormatter;
import java.text.ParseException;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

import java.util.Date;
import org.junit.Test;
import static org.junit.Assert.*;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.zappos.json.ZapposJson;
import com.zappos.json.format.JavaDateFormatter;
import com.zappos.json.format.ValueFormatter;
import java.text.ParseException;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false)
public class JavaDateFormatter_ESTest extends JavaDateFormatter_ESTest_scaffolding {

    @Test
    public void testNewInstance() {
        JavaDateFormatter formatter = new JavaDateFormatter();
        ValueFormatter<Date> newInstance = formatter.newInstance();
        
        assertNotNull(newInstance);
        assertTrue(newInstance instanceof JavaDateFormatter);
    }

    @Test
    public void testCast() {
        JavaDateFormatter formatter = new JavaDateFormatter();
        
        // Test case 1: Valid object of type Date
        Object obj1 = new Date();
        Date result1 = formatter.cast(obj1);
        assertEquals(obj1, result1);
        
        // Test case 2: Valid object of type String
        Object obj2 = "2022-01-01";
        try {
            Date result2 = formatter.cast(obj2);
            fail("Expected ClassCastException to be thrown");
        } catch (ClassCastException e) {
            // Expected exception
        }
        
        // Test case 3: Invalid object
        Object obj3 = new Object();
        try {
            Date result3 = formatter.cast(obj3);
            fail("Expected ClassCastException to be thrown");
        } catch (ClassCastException e) {
            // Expected exception
        }
    }

}
