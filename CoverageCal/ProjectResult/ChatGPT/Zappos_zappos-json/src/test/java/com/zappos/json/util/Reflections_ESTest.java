// original test path: /Users/zhi/Documents/PH.D/Project/Testing/ChatTESTER/CodePackage/Prompt2Testing/repo_get/Four_project/Zappos_zappos-json/src/test/java/com/zappos/json/util/Reflections_ESTest.java
/*
 * This file was automatically generated by EvoSuite
 * Thu Jan 25 14:11:21 GMT 2024
 */
package com.zappos.json.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.zappos.json.util.Reflections;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

import org.junit.Test;
import static org.junit.Assert.*;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.zappos.json.util.Reflections;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

import org.junit.Test;
import java.lang.annotation.Annotation;
import java.lang.reflect.Method;
import static org.junit.Assert.*;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.zappos.json.util.Reflections;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false)
public class Reflections_ESTest extends Reflections_ESTest_scaffolding {

    @Test
    public void testHasAnnotation() throws NoSuchMethodException {
        // Create a sample class for testing
        class SampleClass {
            @Deprecated
            public void deprecatedMethod() {
            }

            public void nonDeprecatedMethod() {
            }
        }

        // Get the sample class
        Class<SampleClass> sampleClass = SampleClass.class;

        // Get the methods of the sample class
        Method deprecatedMethod = sampleClass.getDeclaredMethod("deprecatedMethod");
        Method nonDeprecatedMethod = sampleClass.getDeclaredMethod("nonDeprecatedMethod");

        // Test the hasAnnotation method
        assertTrue(Reflections.hasAnnotation(deprecatedMethod, Deprecated.class));
        assertFalse(Reflections.hasAnnotation(nonDeprecatedMethod, Deprecated.class));
    }

@Test
public void testGetSecondGenericParameterType() throws NoSuchMethodException {
    // Create a sample class for testing
    class SampleClass<T, U> {
        public void sampleMethod(T param1, U param2) {}
    }
    
    // Get the sample method
    Method method = SampleClass.class.getMethod("sampleMethod", Object.class, Object.class);
    
    // Call the focal method
    Class<?> result = Reflections.getSecondGenericParameterType(method);
    
    // Assert the result
    assertNull(result);
}

    @Test
    public void testClassPresent() {
        // Test case 1: Class is present
        assertTrue(Reflections.classPresent("java.lang.String"));

        // Test case 2: Class is not present
        assertFalse(Reflections.classPresent("com.example.NonExistentClass"));
    }

}
