// original test path: /Users/zhi/Documents/PH.D/Project/Testing/ChatTESTER/CodePackage/Prompt2Testing/repo_get/Four_project/Zappos_zappos-json/src/test/java/com/zappos/json/JsonWriter_ESTest.java
/*
 * This file was automatically generated by EvoSuite
 * Thu Jan 25 14:01:13 GMT 2024
 */
package com.zappos.json;

import java.io.IOException;
import java.io.StringWriter;
import java.io.Writer;
import javax.xml.bind.DatatypeConverter;
import org.junit.Test;
import static org.junit.Assert.*;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.zappos.json.JsonConfig;
import com.zappos.json.JsonWriter;
import com.zappos.json.ZapposJson;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.IOException;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.time.ZoneId;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;

import java.io.IOException;
import java.io.StringWriter;
import java.io.Writer;
import org.junit.Test;
import static org.junit.Assert.*;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.zappos.json.JsonConfig;
import com.zappos.json.JsonWriter;
import com.zappos.json.ZapposJson;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.IOException;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.time.ZoneId;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false)
public class JsonWriter_ESTest extends JsonWriter_ESTest_scaffolding {

    @Test
    public void testWriteBoolean() throws IOException {
        // Create a StringWriter to capture the output
        StringWriter writer = new StringWriter();

        // Create a ZapposJson instance for testing
        ZapposJson zapposJson = new ZapposJson();

        // Set the expected output
        String expectedOutput = "true";

        // Call the writeBoolean method with the test values
        JsonWriter.writeBoolean(zapposJson, true, writer);

        // Get the actual output from the StringWriter
        String actualOutput = writer.toString();

        // Assert that the actual output matches the expected output
        assertEquals(expectedOutput, actualOutput);
    }

    @Test
    public void testWriteBase64String() throws IOException {
        // Create a ZapposJson instance for testing
        ZapposJson zapposJson = new ZapposJson();

        // Create a byte array for testing
        byte[] value = {1, 2, 3, 4, 5};

        // Create a StringWriter to capture the output
        StringWriter writer = new StringWriter();

        // Call the writeBase64String method
        JsonWriter.writeBase64String(zapposJson, value, writer);

        // Get the result from the StringWriter
        String result = writer.toString();

        // Verify the result
        assertEquals("\"AQIDBAU=\"", result);
    }

    @Test
    public void testWriteString() throws IOException {
        // Create a ZapposJson instance
        ZapposJson zapposJson = new ZapposJson();

        // Create a StringWriter to capture the output
        StringWriter writer = new StringWriter();

        // Call the writeString method with a sample value
        JsonWriter.writeString(zapposJson, "Hello World", writer);

        // Verify the output
        assertEquals("\"Hello World\"", writer.toString());
    }

    @Test
    public void testWriteArray() throws IOException {
        double[] values = {1.5, 2.7, 3.9};
        StringWriter writer = new StringWriter();
        
        JsonWriter.writeArray(values, writer);
        
        String expected = "[1.5,2.7,3.9]";
        String actual = writer.toString();
        
        assertEquals(expected, actual);
    }

}
