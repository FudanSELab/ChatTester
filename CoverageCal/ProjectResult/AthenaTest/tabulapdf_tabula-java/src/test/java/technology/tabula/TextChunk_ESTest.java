/*
 * This file was automatically generated by EvoSuite
 * Sat Feb 10 10:15:23 GMT 2024
 */
package technology.tabula;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.geom.Rectangle2D;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import technology.tabula.Line;
import technology.tabula.Rectangle;
import technology.tabula.TextChunk;
import technology.tabula.TextElement;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false)
public class TextChunk_ESTest extends TextChunk_ESTest_scaffolding {
    @Test(expected = IllegalArgumentException.class) public void testSplitAt() { 
    TextChunk[] split = TextChunk.EMPTY.splitAt(0);
    }
    
    
    @Test 
    public void testGroupByDirectionality() { 
    TextChunk chunk1 = new TextChunk(0, 0, 0, 0);
    TextChunk chunk2 = new TextChunk(0, 0, 0, 0);
    assertEquals(0, chunk1.getTextElements().size());
    assertEquals(0, chunk2.getTextElements().size());
    assertEquals(0, chunk2.getTextElements().size());
    assertEquals(0, chunk2.getTextElements().size());
    assertEquals(0, chunk2.getTextElements().size());
    assertEquals(0, chunk2.getTextElements().size());
    assertEquals(0, chunk2.getTextElements().size());
    assertEquals(0, chunk2.getTextElements().size());
    assertEquals(0, chunk2.getTextElements().size());
    assertEquals(0, chunk2.getTextElements().size());
    assertEquals(0, chunk2.getTextElements().size());
    assertEquals(0, chunk2.getTextElements().size());
    assertEquals(0, chunk2.getTextElements().size());
    assertEquals(0, chunk2.getTextElements().size());
    assertEquals(0, chunk2.getTextElements().size());
    assertEquals(0, chunk2.getTextElements().size());
    assertEquals(0, chunk2.getTextElements().size());
    assertEquals(0, chunk2.getTextElements().size());
    assertEquals(0, chunk2.getTextElements().size());
    assertEquals(0, chunk2.getTextElements().size());
    assertEquals(0, chunk2.getTextElements().size());
    assertEquals(0, chunk2.getTextElements().size());
    assertEquals(0, chunk2.getTextElements().size());
    assertEquals(0, chunk2.getTextElements().size());
    assertEquals(0, chunk2.getTextElements().size());
    assertEquals(0, chunk2.getTextElements().size());
    assertEquals(0, chunk2.getTextElements().size());
    assertEquals(0, chunk2.getTextElements().size());
    assertEquals(0, chunk2.getTextElements().size());
    }
    
    
    @Test 
    public void testGetText() { 
    TextChunk textChunk = new TextChunk(0, 0, 0, 0);
    assertEquals("", textChunk.getText());
    }
    
}
