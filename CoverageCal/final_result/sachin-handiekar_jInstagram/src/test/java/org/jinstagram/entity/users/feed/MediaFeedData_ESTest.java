/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 27 04:30:23 GMT 2024
 */
package org.jinstagram.entity.users.feed;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jinstagram.entity.common.Caption;
import org.jinstagram.entity.common.Comments;
import org.jinstagram.entity.common.Images;
import org.jinstagram.entity.common.Likes;
import org.jinstagram.entity.common.Location;
import org.jinstagram.entity.common.User;
import org.jinstagram.entity.common.UsersInPhoto;
import org.jinstagram.entity.common.Videos;
import org.jinstagram.entity.users.feed.CarouselMedia;
import org.jinstagram.entity.users.feed.MediaFeedData;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false)
public class MediaFeedData_ESTest extends MediaFeedData_ESTest_scaffolding {
    @Test(timeout = 4000)
    public void test00() throws Throwable {
        MediaFeedData mediaFeedData0 = new MediaFeedData();
        mediaFeedData0.setUserHasLiked(true);
        boolean boolean0 = mediaFeedData0.isUserHasLiked();
        assertTrue(boolean0);
    }
    
    @Test(timeout = 4000)
    public void test00() throws Throwable {
        MediaFeedData mediaFeedData0 = new MediaFeedData();
        mediaFeedData0.setUserHasLiked(true);
        boolean boolean0 = mediaFeedData0.isUserHasLiked();
        assertTrue(boolean0);
    }
    
    @Test(timeout = 4000)
    public void test01() throws Throwable {
        MediaFeedData mediaFeedData0 = new MediaFeedData();
        Videos videos0 = new Videos();
        mediaFeedData0.setVideos(videos0);
        Videos videos1 = mediaFeedData0.getVideos();
        assertSame(videos1, videos0);
    }
    
    @Test(timeout = 4000)
    public void test01() throws Throwable {
        MediaFeedData mediaFeedData0 = new MediaFeedData();
        Videos videos0 = new Videos();
        mediaFeedData0.setVideos(videos0);
        Videos videos1 = mediaFeedData0.getVideos();
        assertSame(videos1, videos0);
    }
    
    @Test(timeout = 4000)
    public void test02() throws Throwable {
        MediaFeedData mediaFeedData0 = new MediaFeedData();
        LinkedList<UsersInPhoto> linkedList0 = new LinkedList<UsersInPhoto>();
        UsersInPhoto usersInPhoto0 = new UsersInPhoto();
        linkedList0.add(usersInPhoto0);
        mediaFeedData0.setUsersInPhotoList(linkedList0);
        List<UsersInPhoto> list0 = mediaFeedData0.getUsersInPhotoList();
        assertFalse(list0.isEmpty());
    }
    
    @Test(timeout = 4000)
    public void test02() throws Throwable {
        MediaFeedData mediaFeedData0 = new MediaFeedData();
        LinkedList<UsersInPhoto> linkedList0 = new LinkedList<UsersInPhoto>();
        UsersInPhoto usersInPhoto0 = new UsersInPhoto();
        linkedList0.add(usersInPhoto0);
        mediaFeedData0.setUsersInPhotoList(linkedList0);
        List<UsersInPhoto> list0 = mediaFeedData0.getUsersInPhotoList();
        assertFalse(list0.isEmpty());
    }
    
    @Test(timeout = 4000)
    public void test05() throws Throwable {
        MediaFeedData mediaFeedData0 = new MediaFeedData();
        LinkedList<String> linkedList0 = new LinkedList<String>();
        mediaFeedData0.setTags(linkedList0);
        List<String> list0 = mediaFeedData0.getTags();
        assertEquals(0, list0.size());
    }
    
    @Test(timeout = 4000)
    public void test05() throws Throwable {
        MediaFeedData mediaFeedData0 = new MediaFeedData();
        LinkedList<String> linkedList0 = new LinkedList<String>();
        mediaFeedData0.setTags(linkedList0);
        List<String> list0 = mediaFeedData0.getTags();
        assertEquals(0, list0.size());
    }
    
    @Test(timeout = 4000)
    public void test07() throws Throwable {
        MediaFeedData mediaFeedData0 = new MediaFeedData();
        Location location0 = new Location();
        location0.setLongitude(1.0);
        mediaFeedData0.setLocation(location0);
        Location location1 = mediaFeedData0.getLocation();
        assertNull(location1.getName());
    }
    
    @Test(timeout = 4000)
    public void test07() throws Throwable {
        MediaFeedData mediaFeedData0 = new MediaFeedData();
        Location location0 = new Location();
        location0.setLongitude(1.0);
        mediaFeedData0.setLocation(location0);
        Location location1 = mediaFeedData0.getLocation();
        assertNull(location1.getName());
    }
    
    @Test(timeout = 4000)
    public void test11() throws Throwable {
        MediaFeedData mediaFeedData0 = new MediaFeedData();
        mediaFeedData0.setLink("org.jinstagram.entity.common.User");
        String string0 = mediaFeedData0.getLink();
        assertEquals("org.jinstagram.entity.common.User", string0);
    }
    
    @Test(timeout = 4000)
    public void test11() throws Throwable {
        MediaFeedData mediaFeedData0 = new MediaFeedData();
        mediaFeedData0.setLink("org.jinstagram.entity.common.User");
        String string0 = mediaFeedData0.getLink();
        assertEquals("org.jinstagram.entity.common.User", string0);
    }
    
    @Test(timeout = 4000)
    public void test13() throws Throwable {
        MediaFeedData mediaFeedData0 = new MediaFeedData();
        Likes likes0 = new Likes();
        likes0.setCount(542);
        mediaFeedData0.setLikes(likes0);
        Likes likes1 = mediaFeedData0.getLikes();
        assertEquals(542, likes1.getCount());
    }
    
    @Test(timeout = 4000)
    public void test13() throws Throwable {
        MediaFeedData mediaFeedData0 = new MediaFeedData();
        Likes likes0 = new Likes();
        likes0.setCount(542);
        mediaFeedData0.setLikes(likes0);
        Likes likes1 = mediaFeedData0.getLikes();
        assertEquals(542, likes1.getCount());
    }
    
    @Test(timeout = 4000)
    public void test15() throws Throwable {
        MediaFeedData mediaFeedData0 = new MediaFeedData();
        mediaFeedData0.setImageFilter("'p`?Fy");
        String string0 = mediaFeedData0.getImageFilter();
        assertEquals("'p`?Fy", string0);
    }
    
    @Test(timeout = 4000)
    public void test15() throws Throwable {
        MediaFeedData mediaFeedData0 = new MediaFeedData();
        mediaFeedData0.setImageFilter("'p`?Fy");
        String string0 = mediaFeedData0.getImageFilter();
        assertEquals("'p`?Fy", string0);
    }
    
    @Test(timeout = 4000)
    public void test19() throws Throwable {
        MediaFeedData mediaFeedData0 = new MediaFeedData();
        Comments comments0 = new Comments();
        mediaFeedData0.setComments(comments0);
        Comments comments1 = mediaFeedData0.getComments();
        assertEquals(0, comments1.getCount());
    }
    
    @Test(timeout = 4000)
    public void test21() throws Throwable {
        MediaFeedData mediaFeedData0 = new MediaFeedData();
        LinkedList<CarouselMedia> linkedList0 = new LinkedList<CarouselMedia>();
        CarouselMedia carouselMedia0 = new CarouselMedia();
        linkedList0.add(carouselMedia0);
        mediaFeedData0.setCarouselMedia(linkedList0);
        List<CarouselMedia> list0 = mediaFeedData0.getCarouselMedia();
        assertTrue(list0.contains(carouselMedia0));
    }
    
    @Test(timeout = 4000)
    public void test22() throws Throwable {
        MediaFeedData mediaFeedData0 = new MediaFeedData();
        Images images0 = new Images();
        mediaFeedData0.setImages(images0);
        Images images1 = mediaFeedData0.getImages();
        assertSame(images1, images0);
    }
    
    @Test(timeout = 4000)
    public void test22() throws Throwable {
        MediaFeedData mediaFeedData0 = new MediaFeedData();
        Images images0 = new Images();
        mediaFeedData0.setImages(images0);
        Images images1 = mediaFeedData0.getImages();
        assertSame(images1, images0);
    }
    
    @Test(timeout = 4000)
    public void test32() throws Throwable {
        MediaFeedData mediaFeedData0 = new MediaFeedData();
        Caption caption0 = mediaFeedData0.getCaption();
        assertNull(caption0);
    }
    
    @Test(timeout = 4000)
    public void test42() throws Throwable {
        MediaFeedData mediaFeedData0 = new MediaFeedData();
        Caption caption0 = new Caption();
        mediaFeedData0.setCaption(caption0);
        Caption caption1 = mediaFeedData0.getCaption();
        assertSame(caption1, caption0);
    }
}
