/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 27 05:03:32 GMT 2024
 */
package org.jinstagram.realtime;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jinstagram.realtime.SubscriptionResponseObject;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false)
public class SubscriptionResponseObject_ESTest extends SubscriptionResponseObject_ESTest_scaffolding {
    @Test(timeout = 4000)
    public void test00() throws Throwable {
        SubscriptionResponseObject subscriptionResponseObject0 = new SubscriptionResponseObject();
        subscriptionResponseObject0.setSubscriptionId("V*D/h?)EXLt");
        String string0 = subscriptionResponseObject0.getSubscriptionId();
        assertEquals("V*D/h?)EXLt", string0);
    }
    
    @Test(timeout = 4000)
    public void test00() throws Throwable {
        SubscriptionResponseObject subscriptionResponseObject0 = new SubscriptionResponseObject();
        subscriptionResponseObject0.setSubscriptionId("V*D/h?)EXLt");
        String string0 = subscriptionResponseObject0.getSubscriptionId();
        assertEquals("V*D/h?)EXLt", string0);
    }
    
    @Test(timeout = 4000)
    public void test02() throws Throwable {
        SubscriptionResponseObject subscriptionResponseObject0 = new SubscriptionResponseObject();
        subscriptionResponseObject0.setObjectId("KU60X");
        String string0 = subscriptionResponseObject0.getObjectId();
        assertEquals("KU60X", string0);
    }
    
    @Test(timeout = 4000)
    public void test02() throws Throwable {
        SubscriptionResponseObject subscriptionResponseObject0 = new SubscriptionResponseObject();
        subscriptionResponseObject0.setObjectId("KU60X");
        String string0 = subscriptionResponseObject0.getObjectId();
        assertEquals("KU60X", string0);
    }
    
    @Test(timeout = 4000)
    public void test04() throws Throwable {
        SubscriptionResponseObject subscriptionResponseObject0 = new SubscriptionResponseObject();
        subscriptionResponseObject0.setObject("-#9GL7uU");
        String string0 = subscriptionResponseObject0.getObject();
        assertEquals("-#9GL7uU", string0);
    }
    
    @Test(timeout = 4000)
    public void test04() throws Throwable {
        SubscriptionResponseObject subscriptionResponseObject0 = new SubscriptionResponseObject();
        subscriptionResponseObject0.setObject("-#9GL7uU");
        String string0 = subscriptionResponseObject0.getObject();
        assertEquals("-#9GL7uU", string0);
    }
    
    @Test(timeout = 4000)
    public void test06() throws Throwable {
        SubscriptionResponseObject subscriptionResponseObject0 = new SubscriptionResponseObject();
        subscriptionResponseObject0.setEpochTime(762L);
        long long0 = subscriptionResponseObject0.getEpochTime();
        assertEquals(762L, long0);
    }
    
    @Test(timeout = 4000)
    public void test06() throws Throwable {
        SubscriptionResponseObject subscriptionResponseObject0 = new SubscriptionResponseObject();
        subscriptionResponseObject0.setEpochTime(762L);
        long long0 = subscriptionResponseObject0.getEpochTime();
        assertEquals(762L, long0);
    }
    
    @Test(timeout = 4000)
    public void test08() throws Throwable {
        SubscriptionResponseObject subscriptionResponseObject0 = new SubscriptionResponseObject();
        subscriptionResponseObject0.setChangedAspect("(> &E^M");
        String string0 = subscriptionResponseObject0.getChangedAspect();
        assertEquals("(> &E^M", string0);
    }
    
    @Test(timeout = 4000)
    public void test08() throws Throwable {
        SubscriptionResponseObject subscriptionResponseObject0 = new SubscriptionResponseObject();
        subscriptionResponseObject0.setChangedAspect("(> &E^M");
        String string0 = subscriptionResponseObject0.getChangedAspect();
        assertEquals("(> &E^M", string0);
    }
}
