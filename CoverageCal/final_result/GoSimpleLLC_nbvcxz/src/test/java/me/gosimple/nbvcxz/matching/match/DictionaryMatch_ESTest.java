/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 27 03:25:40 GMT 2024
 */
package me.gosimple.nbvcxz.matching.match;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.regex.Pattern;
import me.gosimple.nbvcxz.matching.PasswordMatcher;
import me.gosimple.nbvcxz.matching.match.DictionaryMatch;
import me.gosimple.nbvcxz.resources.AdjacencyGraph;
import me.gosimple.nbvcxz.resources.Configuration;
import me.gosimple.nbvcxz.resources.Dictionary;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false)
public class DictionaryMatch_ESTest extends DictionaryMatch_ESTest_scaffolding {
    @Test(timeout = 4000)
    public void test03() throws Throwable {
        LinkedList<Character[]> linkedList0 = new LinkedList<Character[]>();
        DictionaryMatch dictionaryMatch0 = new DictionaryMatch(",Evay\"M1SZ|E", (Configuration) null, 0, 0, ",Evay\"M1SZ|E", 0, linkedList0, false, true, ",Evay\"M1SZ|E", 3112);
        int int0 = dictionaryMatch0.getRank();
        assertTrue(dictionaryMatch0.isReversed());
        assertFalse(dictionaryMatch0.isLeet());
        assertEquals(3112, dictionaryMatch0.getDistance());
        assertEquals(0, int0);
        assertEquals(0.0, dictionaryMatch0.calculateEntropy(), 0.01);
    }
    
    @Test(timeout = 4000)
    public void test03() throws Throwable {
        LinkedList<Character[]> linkedList0 = new LinkedList<Character[]>();
        DictionaryMatch dictionaryMatch0 = new DictionaryMatch(",Evay\"M1SZ|E", (Configuration) null, 0, 0, ",Evay\"M1SZ|E", 0, linkedList0, false, true, ",Evay\"M1SZ|E", 3112);
        int int0 = dictionaryMatch0.getRank();
        assertTrue(dictionaryMatch0.isReversed());
        assertFalse(dictionaryMatch0.isLeet());
        assertEquals(3112, dictionaryMatch0.getDistance());
        assertEquals(0, int0);
        assertEquals(0.0, dictionaryMatch0.calculateEntropy(), 0.01);
    }
    
    @Test(timeout = 4000)
    public void test06() throws Throwable {
        LinkedList<Character[]> linkedList0 = new LinkedList<Character[]>();
        Character[] characterArray0 = new Character[7];
        Character character0 = new Character('{');
        characterArray0[0] = character0;
        characterArray0[1] = character0;
        linkedList0.add(characterArray0);
        DictionaryMatch dictionaryMatch0 = new DictionaryMatch("Q9ZRLNz$stxg", (Configuration) null, (-1512), (-1512), "Q9ZRLNz$stxg", (-1512), linkedList0, false, true, "-!4Z5zRb8d", (-1512));
        dictionaryMatch0.getLeetSubstitution();
        assertTrue(dictionaryMatch0.isLeet());
        assertTrue(dictionaryMatch0.isReversed());
        assertEquals("-!4Z5zRb8d", dictionaryMatch0.getDictionaryName());
        assertEquals((-1512), dictionaryMatch0.getRank());
        assertEquals((-1512), dictionaryMatch0.getDistance());
    }
    
    @Test(timeout = 4000)
    public void test00() throws Throwable {
        LinkedList<Character[]> linkedList0 = new LinkedList<Character[]>();
        Character[] characterArray0 = new Character[7];
        Character character0 = new Character('{');
        characterArray0[0] = character0;
        characterArray0[1] = character0;
        linkedList0.add(characterArray0);
        linkedList0.add(characterArray0);
        DictionaryMatch dictionaryMatch0 = new DictionaryMatch("Q9ZRLNz$stxg", (Configuration) null, (-1512), (-1512), "Q9ZRLNz$stxg", (-1512), linkedList0, false, true, "-!4Z5zRb8d", (-1512));
        assertEquals((-1512), dictionaryMatch0.getDistance());
        assertEquals("-!4Z5zRb8d", dictionaryMatch0.getDictionaryName());
        assertEquals(Double.NaN, dictionaryMatch0.getAverageEntropy(), 0.01);
        assertTrue(dictionaryMatch0.isReversed());
        assertTrue(dictionaryMatch0.isLeet());
    }
}
