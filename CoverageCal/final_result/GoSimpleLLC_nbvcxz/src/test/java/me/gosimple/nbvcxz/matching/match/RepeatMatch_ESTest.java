/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 27 03:27:38 GMT 2024
 */
package me.gosimple.nbvcxz.matching.match;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.regex.Pattern;
import me.gosimple.nbvcxz.matching.PasswordMatcher;
import me.gosimple.nbvcxz.matching.match.RepeatMatch;
import me.gosimple.nbvcxz.resources.AdjacencyGraph;
import me.gosimple.nbvcxz.resources.Configuration;
import me.gosimple.nbvcxz.resources.Dictionary;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false)
public class RepeatMatch_ESTest extends RepeatMatch_ESTest_scaffolding {
    @Test(timeout = 4000)
    public void test1() throws Throwable {
        LinkedList<PasswordMatcher> linkedList0 = new LinkedList<PasswordMatcher>();
        HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
        LinkedList<Dictionary> linkedList1 = new LinkedList<Dictionary>();
        LinkedList<AdjacencyGraph> linkedList2 = new LinkedList<AdjacencyGraph>();
        HashMap<Character, Character[]> hashMap1 = new HashMap<Character, Character[]>();
        Pattern pattern0 = Pattern.compile("U=L| X&V%'vloo%", 506);
        Double double0 = new Double(506);
        Locale locale0 = Locale.ITALY;
        Configuration configuration0 = new Configuration(linkedList0, hashMap0, linkedList1, linkedList2, hashMap1, pattern0, double0, (Integer) null, locale0, false, 0L);
        RepeatMatch repeatMatch0 = new RepeatMatch("LMD", configuration0, "3pu|'E\"R{_d2O9?", 506, 506);
        int int0 = repeatMatch0.getRepeat();
        assertEquals("3pu|'E\"R{_d2O9?", repeatMatch0.getRepeatingCharacters());
        assertEquals(0.0, repeatMatch0.getAverageEntropy(), 0.01);
        assertEquals(0, int0);
    }
}
