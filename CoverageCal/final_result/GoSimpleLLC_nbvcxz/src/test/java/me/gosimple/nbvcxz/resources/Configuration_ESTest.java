/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 27 03:56:06 GMT 2024
 */
package me.gosimple.nbvcxz.resources;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.regex.Pattern;
import me.gosimple.nbvcxz.matching.PasswordMatcher;
import me.gosimple.nbvcxz.matching.YearMatcher;
import me.gosimple.nbvcxz.resources.AdjacencyGraph;
import me.gosimple.nbvcxz.resources.Configuration;
import me.gosimple.nbvcxz.resources.Dictionary;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false)
public class Configuration_ESTest extends Configuration_ESTest_scaffolding {
    @Test(timeout = 4000)
    public void test00() throws Throwable {
        LinkedList<PasswordMatcher> linkedList0 = new LinkedList<PasswordMatcher>();
        LinkedList<Dictionary> linkedList1 = new LinkedList<Dictionary>();
        LinkedList<AdjacencyGraph> linkedList2 = new LinkedList<AdjacencyGraph>();
        HashMap<Character, Character[]> hashMap0 = new HashMap<Character, Character[]>();
        Pattern pattern0 = Pattern.compile("");
        Double double0 = new Double(278.1067);
        Integer integer0 = new Integer(0);
        Locale locale0 = Locale.SIMPLIFIED_CHINESE;
        Configuration configuration0 = new Configuration(linkedList0, (Map<String, Long>) null, linkedList1, linkedList2, hashMap0, pattern0, double0, integer0, locale0, true, 0);
        boolean boolean0 = configuration0.isDistanceCalc();
        assertTrue(boolean0);
    }
    
    @Test(timeout = 4000)
    public void test06() throws Throwable {
        LinkedList<PasswordMatcher> linkedList0 = new LinkedList<PasswordMatcher>();
        LinkedList<Dictionary> linkedList1 = new LinkedList<Dictionary>();
        LinkedList<AdjacencyGraph> linkedList2 = new LinkedList<AdjacencyGraph>();
        HashMap<Character, Character[]> hashMap0 = new HashMap<Character, Character[]>();
        Pattern pattern0 = Pattern.compile("");
        Double double0 = new Double(278.1067);
        Integer integer0 = new Integer(0);
        Locale locale0 = Locale.SIMPLIFIED_CHINESE;
        Configuration configuration0 = new Configuration(linkedList0, (Map<String, Long>) null, linkedList1, linkedList2, hashMap0, pattern0, double0, integer0, locale0, true, 0);
        configuration0.getMinimumEntropy();
        assertTrue(configuration0.isDistanceCalc());
    }
    
    @Test(timeout = 4000)
    public void test12() throws Throwable {
        LinkedList<PasswordMatcher> linkedList0 = new LinkedList<PasswordMatcher>();
        HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
        LinkedList<Dictionary> linkedList1 = new LinkedList<Dictionary>();
        LinkedList<AdjacencyGraph> linkedList2 = new LinkedList<AdjacencyGraph>();
        Pattern pattern0 = Pattern.compile("");
        Integer integer0 = new Integer((-439));
        Locale locale0 = Locale.TAIWAN;
        Configuration configuration0 = new Configuration(linkedList0, hashMap0, linkedList1, linkedList2, (Map<Character, Character[]>) null, pattern0, (Double) null, integer0, locale0, true, 0L);
        Map<Character, Character[]> map0 = configuration0.getLeetTable();
        assertNull(map0);
        assertTrue(configuration0.isDistanceCalc());
    }
    
    @Test(timeout = 4000)
    public void test14() throws Throwable {
        LinkedList<PasswordMatcher> linkedList0 = new LinkedList<PasswordMatcher>();
        LinkedList<Dictionary> linkedList1 = new LinkedList<Dictionary>();
        LinkedList<AdjacencyGraph> linkedList2 = new LinkedList<AdjacencyGraph>();
        HashMap<Character, Character[]> hashMap0 = new HashMap<Character, Character[]>();
        Pattern pattern0 = Pattern.compile("");
        Double double0 = new Double(278.1067);
        Integer integer0 = new Integer(0);
        Locale locale0 = Locale.SIMPLIFIED_CHINESE;
        Configuration configuration0 = new Configuration(linkedList0, (Map<String, Long>) null, linkedList1, linkedList2, hashMap0, pattern0, double0, integer0, locale0, true, 0);
        Map<String, Long> map0 = configuration0.getGuessTypes();
        assertTrue(configuration0.isDistanceCalc());
        assertNull(map0);
    }
    
    @Test(timeout = 4000)
    public void test16() throws Throwable {
        LinkedList<PasswordMatcher> linkedList0 = new LinkedList<PasswordMatcher>();
        HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
        LinkedList<AdjacencyGraph> linkedList1 = new LinkedList<AdjacencyGraph>();
        HashMap<Character, Character[]> hashMap1 = new HashMap<Character, Character[]>();
        Pattern pattern0 = Pattern.compile("me.gosimple.nbvcxz.resources.Configuration");
        Double double0 = new Double((-1172.9158265564326));
        Integer integer0 = new Integer(1);
        Locale locale0 = Locale.FRANCE;
        Configuration configuration0 = new Configuration(linkedList0, hashMap0, (List<Dictionary>) null, linkedList1, hashMap1, pattern0, double0, integer0, locale0, true, 0L);
        List<Dictionary> list0 = configuration0.getDictionaries();
        assertNull(list0);
        assertTrue(configuration0.isDistanceCalc());
    }
    
    @Test(timeout = 4000)
    public void test20() throws Throwable {
        LinkedList<PasswordMatcher> linkedList0 = new LinkedList<PasswordMatcher>();
        HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
        LinkedList<Dictionary> linkedList1 = new LinkedList<Dictionary>();
        LinkedList<AdjacencyGraph> linkedList2 = new LinkedList<AdjacencyGraph>();
        HashMap<Character, Character[]> hashMap1 = new HashMap<Character, Character[]>();
        Integer integer0 = new Integer(752);
        Locale locale0 = Locale.CHINA;
        Configuration configuration0 = new Configuration(linkedList0, hashMap0, linkedList1, linkedList2, hashMap1, (Pattern) null, (Double) null, integer0, locale0, true, 752);
        configuration0.getAdjacencyGraphs();
        assertTrue(configuration0.isDistanceCalc());
        assertEquals(752L, configuration0.getCombinationAlgorithmTimeout());
    }
    
    @Test(timeout = 4000)
    public void test24() throws Throwable {
        LinkedList<PasswordMatcher> linkedList0 = new LinkedList<PasswordMatcher>();
        HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
        LinkedList<Dictionary> linkedList1 = new LinkedList<Dictionary>();
        HashMap<Character, Character[]> hashMap1 = new HashMap<Character, Character[]>();
        Pattern pattern0 = Pattern.compile("", 0);
        Double double0 = new Double(0);
        Integer integer0 = new Integer(0);
        Locale locale0 = Locale.forLanguageTag("");
        Configuration configuration0 = new Configuration(linkedList0, hashMap0, linkedList1, (List<AdjacencyGraph>) null, hashMap1, pattern0, double0, integer0, locale0, true, 0L);
        configuration0.getFeedbackResource();
        assertTrue(configuration0.isDistanceCalc());
    }
    
    @Test(timeout = 4000)
    public void test33() throws Throwable {
        LinkedList<PasswordMatcher> linkedList0 = new LinkedList<PasswordMatcher>();
        HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
        LinkedList<Dictionary> linkedList1 = new LinkedList<Dictionary>();
        LinkedList<AdjacencyGraph> linkedList2 = new LinkedList<AdjacencyGraph>();
        HashMap<Character, Character[]> hashMap1 = new HashMap<Character, Character[]>();
        Integer integer0 = new Integer(752);
        Locale locale0 = Locale.CHINA;
        Configuration configuration0 = new Configuration(linkedList0, hashMap0, linkedList1, linkedList2, hashMap1, (Pattern) null, (Double) null, integer0, locale0, true, 752);
        configuration0.getLocale();
        assertTrue(configuration0.isDistanceCalc());
        assertEquals(752L, configuration0.getCombinationAlgorithmTimeout());
    }
}
