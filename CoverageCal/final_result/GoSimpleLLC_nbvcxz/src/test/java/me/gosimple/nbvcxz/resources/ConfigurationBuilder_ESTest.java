/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 27 03:58:16 GMT 2024
 */
package me.gosimple.nbvcxz.resources;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.regex.Pattern;
import me.gosimple.nbvcxz.matching.PasswordMatcher;
import me.gosimple.nbvcxz.resources.AdjacencyGraph;
import me.gosimple.nbvcxz.resources.Configuration;
import me.gosimple.nbvcxz.resources.ConfigurationBuilder;
import me.gosimple.nbvcxz.resources.Dictionary;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false)
public class ConfigurationBuilder_ESTest extends ConfigurationBuilder_ESTest_scaffolding {
    @Test(timeout = 4000)
    public void test00() throws Throwable {
        ConfigurationBuilder configurationBuilder0 = new ConfigurationBuilder();
        BigDecimal bigDecimal0 = ConfigurationBuilder.getMooresMultiplier();
        ConfigurationBuilder configurationBuilder1 = configurationBuilder0.setMinimumEntropy(bigDecimal0, "OFFLINE_BCRYPT_5");
        assertEquals(20000L, configurationBuilder1.getDefaultCrackingHardwareCost());
        assertEquals((byte) 1, bigDecimal0.byteValue());
    }
    
    @Test(timeout = 4000)
    public void test22() throws Throwable {
        ConfigurationBuilder configurationBuilder0 = new ConfigurationBuilder();
        configurationBuilder0.createConfiguration();
        Configuration configuration0 = configurationBuilder0.createConfiguration();
        assertEquals(500L, configuration0.getCombinationAlgorithmTimeout());
        assertEquals(256, (int) configuration0.getMaxLength());
        assertEquals(20000L, configurationBuilder0.getDefaultCrackingHardwareCost());
        assertEquals(35.0, configuration0.getMinimumEntropy(), 0.01);
    }
    
    @Test(timeout = 4000)
    public void test01() throws Throwable {
        Long long0 = new Long(0L);
        Map<String, Long> map0 = ConfigurationBuilder.getDefaultGuessTypes(long0);
        assertEquals(11, map0.size());
    }
    
    @Test(timeout = 4000)
    public void test22() throws Throwable {
        ConfigurationBuilder configurationBuilder0 = new ConfigurationBuilder();
        configurationBuilder0.createConfiguration();
        Configuration configuration0 = configurationBuilder0.createConfiguration();
        assertEquals(500L, configuration0.getCombinationAlgorithmTimeout());
        assertEquals(256, (int) configuration0.getMaxLength());
        assertEquals(20000L, configurationBuilder0.getDefaultCrackingHardwareCost());
        assertEquals(35.0, configuration0.getMinimumEntropy(), 0.01);
    }
    
    @Test(timeout = 4000)
    public void test04() throws Throwable {
        Pattern pattern0 = ConfigurationBuilder.getDefaultYearPattern();
        assertEquals("19\\d\\d|200\\d|201\\d|202\\d", pattern0.toString());
    }
    
    @Test(timeout = 4000)
    public void test05() throws Throwable {
        Map<Character, Character[]> map0 = ConfigurationBuilder.getDefaultLeetTable();
        assertEquals(22, map0.size());
    }
    
    @Test(timeout = 4000)
    public void test06() throws Throwable {
        double double0 = ConfigurationBuilder.getDefaultMinimumEntropy();
        assertEquals(35.0, double0, 0.01);
    }
    
    @Test(timeout = 4000)
    public void test08() throws Throwable {
        int int0 = ConfigurationBuilder.getDefaultMaxLength();
        assertEquals(256, int0);
    }
    
    @Test(timeout = 4000)
    public void test09() throws Throwable {
        long long0 = ConfigurationBuilder.getDefaultCombinationAlgorithmTimeout();
        assertEquals(500L, long0);
    }
    
    @Test(timeout = 4000)
    public void test10() throws Throwable {
        List<Dictionary> list0 = ConfigurationBuilder.getDefaultDictionaries();
        assertEquals(6, list0.size());
    }
    
    @Test(timeout = 4000)
    public void test11() throws Throwable {
        Boolean boolean0 = ConfigurationBuilder.getDefaultDistanceCalc();
        assertTrue(boolean0);
    }
    
    @Test(timeout = 4000)
    public void test12() throws Throwable {
        List<AdjacencyGraph> list0 = ConfigurationBuilder.getDefaultAdjacencyGraphs();
        assertEquals(3, list0.size());
    }
    
    @Test(timeout = 4000)
    public void test17() throws Throwable {
        List<PasswordMatcher> list0 = ConfigurationBuilder.getDefaultPasswordMatchers();
        ConfigurationBuilder configurationBuilder0 = new ConfigurationBuilder();
        ConfigurationBuilder configurationBuilder1 = configurationBuilder0.setPasswordMatchers(list0);
        assertTrue(configurationBuilder1.getDefaultDistanceCalc());
    }
    
    @Test(timeout = 4000)
    public void test18() throws Throwable {
        ConfigurationBuilder configurationBuilder0 = new ConfigurationBuilder();
        Locale locale0 = Locale.GERMAN;
        ConfigurationBuilder configurationBuilder1 = configurationBuilder0.setLocale(locale0);
        assertSame(configurationBuilder1, configurationBuilder0);
    }
    
    @Test(timeout = 4000)
    public void test20() throws Throwable {
        ConfigurationBuilder configurationBuilder0 = new ConfigurationBuilder();
        Integer integer0 = new Integer((-1923370555));
        ConfigurationBuilder configurationBuilder1 = configurationBuilder0.setMaxLength(integer0);
        assertSame(configurationBuilder1, configurationBuilder0);
    }
    
    @Test(timeout = 4000)
    public void test21() throws Throwable {
        ConfigurationBuilder configurationBuilder0 = new ConfigurationBuilder();
        Double double0 = new Double(2.0);
        ConfigurationBuilder configurationBuilder1 = configurationBuilder0.setMinimumEntropy(double0);
        assertSame(configurationBuilder0, configurationBuilder1);
    }
}
