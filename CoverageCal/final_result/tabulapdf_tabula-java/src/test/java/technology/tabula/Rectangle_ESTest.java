/*
 * This file was automatically generated by EvoSuite
 * Sat Feb 10 10:03:59 GMT 2024
 */
package technology.tabula;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import technology.tabula.Rectangle;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false)
public class Rectangle_ESTest extends Rectangle_ESTest_scaffolding {
    @Test(timeout = 4000)
    public void test55() throws Throwable {
        LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();
        Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);
        Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);
        float float0 = rectangle0.verticalOverlapRatio(rectangle1);
        assertEquals(3.4028235E38F, rectangle0.y, 0.01F);
        assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);
        assertEquals(3.4028235E38F, rectangle0.x, 0.01F);
        assertEquals(0.0F, float0, 0.01F);
    }
    
    @Test(timeout = 4000)
    public void test01() throws Throwable {
        LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();
        Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);
        rectangle0.setLeft((-1137.2F));
        rectangle0.setBottom((-1.0F));
        assertEquals((-1137.2F), rectangle0.x, 0.01F);
    }
    
    @Test(timeout = 4000)
    public void test53() throws Throwable {
        LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();
        Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);
        Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);
        rectangle0.setBottom(3.4028235E38F);
        rectangle1.add(0.0, (double) 0.0F);
        float float0 = rectangle0.verticalOverlapRatio(rectangle1);
        assertEquals(Float.POSITIVE_INFINITY, rectangle1.width, 0.01F);
        assertEquals(Float.NaN, float0, 0.01F);
    }
    
    @Test(timeout = 4000)
    public void test03() throws Throwable {
        Rectangle rectangle0 = new Rectangle(1.0F, (-486.23865F), 1.0F, 2254.05F);
        rectangle0.setFrameFromCenter((double) 2.0F, (double) 2.0F, 2440.0, (double) 2254.05F);
        rectangle0.setRight((-1));
        assertEquals(4504.1F, rectangle0.height, 0.01F);
    }
    
    @Test(timeout = 4000)
    public void test05() throws Throwable {
        LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();
        Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);
        rectangle0.setTop((-3179.1138F));
        rectangle0.setLeft(1354.0F);
        assertEquals(1354.0F, rectangle0.x, 0.01F);
    }
    
    @Test(timeout = 4000)
    public void test55() throws Throwable {
        LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();
        Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);
        Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);
        float float0 = rectangle0.verticalOverlapRatio(rectangle1);
        assertEquals(3.4028235E38F, rectangle0.y, 0.01F);
        assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);
        assertEquals(3.4028235E38F, rectangle0.x, 0.01F);
        assertEquals(0.0F, float0, 0.01F);
    }
    
    @Test(timeout = 4000)
    public void test55() throws Throwable {
        LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();
        Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);
        Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);
        float float0 = rectangle0.verticalOverlapRatio(rectangle1);
        assertEquals(3.4028235E38F, rectangle0.y, 0.01F);
        assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);
        assertEquals(3.4028235E38F, rectangle0.x, 0.01F);
        assertEquals(0.0F, float0, 0.01F);
    }
    
    @Test(timeout = 4000)
    public void test65() throws Throwable {
        LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();
        Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);
        boolean boolean0 = rectangle0.horizontallyOverlaps(rectangle0);
        assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);
        assertFalse(boolean0);
        assertEquals(3.4028235E38F, rectangle0.x, 0.01F);
        assertEquals(3.4028235E38F, rectangle0.y, 0.01F);
    }
    
    @Test(timeout = 4000)
    public void test15() throws Throwable {
        LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();
        Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);
        assertEquals((-3.4028235E38F), rectangle0.width, 0.01F);
        rectangle0.setFrameFromCenter((-1.0), (double) Float.NEGATIVE_INFINITY, (double) Float.POSITIVE_INFINITY, 2916.991886);
        boolean boolean0 = rectangle0.verticallyOverlaps(rectangle0);
        assertFalse(boolean0);
    }
    
    @Test(timeout = 4000)
    public void test16() throws Throwable {
        Rectangle rectangle0 = new Rectangle();
        Rectangle rectangle1 = new Rectangle(0.4F, 0.0F, 0.0F, 0.0F);
        Rectangle rectangle2 = rectangle1.merge(rectangle0);
        rectangle0.setBottom(1877.9292F);
        int int0 = rectangle0.compareTo(rectangle2);
        assertEquals(0.4F, rectangle1.height, 0.01F);
        assertEquals(1, int0);
    }
    
    @Test(timeout = 4000)
    public void test18() throws Throwable {
        Rectangle rectangle0 = new Rectangle();
        float float0 = rectangle0.verticalOverlap(rectangle0);
        assertEquals(0.0F, float0, 0.01F);
    }
    
    @Test(timeout = 4000)
    public void test24() throws Throwable {
        Rectangle rectangle0 = new Rectangle(1.0F, 1.0F, 1.0F, 1099.1113F);
        float float0 = rectangle0.getTop();
        assertEquals(1099.1113F, rectangle0.getArea(), 0.01F);
        assertEquals(1.0F, float0, 0.01F);
        assertEquals(1.0F, rectangle0.x, 0.01F);
    }
    
    @Test(timeout = 4000)
    public void test29() throws Throwable {
        LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();
        Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);
        rectangle0.setLeft((-1137.2F));
        float float0 = rectangle0.getLeft();
        assertEquals(0.0F, rectangle0.width, 0.01F);
        assertEquals((-1137.2F), float0, 0.01F);
    }
    
    @Test(timeout = 4000)
    public void test30() throws Throwable {
        Rectangle rectangle0 = new Rectangle(1.0F, (-486.23865F), 1.0F, 2254.05F);
        float float0 = rectangle0.getBottom();
        assertEquals(2255.05F, float0, 0.01F);
        assertEquals((-485.2386474609375), rectangle0.getMaxX(), 0.01);
    }
    
    @Test(timeout = 4000)
    public void test66() throws Throwable {
        LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();
        Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);
        Point2D[] point2DArray0 = rectangle0.getPoints();
        assertEquals(3.4028235E38F, rectangle0.x, 0.01F);
        assertEquals(3.4028235E38F, rectangle0.y, 0.01F);
        assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);
        assertEquals(4, point2DArray0.length);
    }
}
