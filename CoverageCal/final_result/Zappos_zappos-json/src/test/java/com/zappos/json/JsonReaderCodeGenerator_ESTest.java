/*
 * This file was automatically generated by EvoSuite
 * Thu Jan 25 13:55:24 GMT 2024
 */
package com.zappos.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.zappos.json.JsonBeanAttribute;
import com.zappos.json.JsonBeanIntrospector;
import com.zappos.json.JsonReaderCodeGenerator;
import com.zappos.json.JsonReaderInvoker;
import com.zappos.json.ZapposJson;
import com.zappos.json.format.JavaTimeInstantFormatter;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false)
public class JsonReaderCodeGenerator_ESTest extends JsonReaderCodeGenerator_ESTest_scaffolding {
    @Test(timeout = 4000)
    public void test02() throws Throwable {
        ZapposJson zapposJson0 = ZapposJson.getInstance();
        JsonBeanIntrospector jsonBeanIntrospector0 = new JsonBeanIntrospector(zapposJson0);
        JsonReaderCodeGenerator jsonReaderCodeGenerator0 = new JsonReaderCodeGenerator(zapposJson0, jsonBeanIntrospector0);
        Class<Object> class0 = Object.class;
        try {
            jsonReaderCodeGenerator0.registerReader(class0);
            fail("Expecting exception: RuntimeException");
        } catch (RuntimeException e) {
            // 
            // bean introspection failed
            // 
            verifyException("com.zappos.json.JsonBeanIntrospector", e);
        }
    }
    
    @Test(timeout = 4000)
    public void test04() throws Throwable {
        Class<Object> class0 = Object.class;
        JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);
        JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = jsonReaderCodeGenerator_TypeInfo0.addAttributeInfo(class0, (JsonBeanAttribute) null);
        jsonReaderCodeGenerator_AttributeInfo0.getDetail();
        assertEquals(0, jsonReaderCodeGenerator_AttributeInfo0.getArrayType());
    }
    
    @Test(timeout = 4000)
    public void test04() throws Throwable {
        Class<Object> class0 = Object.class;
        JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);
        JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = jsonReaderCodeGenerator_TypeInfo0.addAttributeInfo(class0, (JsonBeanAttribute) null);
        jsonReaderCodeGenerator_AttributeInfo0.getDetail();
        assertEquals(0, jsonReaderCodeGenerator_AttributeInfo0.getArrayType());
    }
    
    @Test(timeout = 4000)
    public void test04() throws Throwable {
        Class<Object> class0 = Object.class;
        JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);
        JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = jsonReaderCodeGenerator_TypeInfo0.addAttributeInfo(class0, (JsonBeanAttribute) null);
        jsonReaderCodeGenerator_AttributeInfo0.getDetail();
        assertEquals(0, jsonReaderCodeGenerator_AttributeInfo0.getArrayType());
    }
    
    @Test(timeout = 4000)
    public void test05() throws Throwable {
        Class<JsonReaderInvoker> class0 = JsonReaderInvoker.class;
        JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);
        Class<?> class1 = jsonReaderCodeGenerator_TypeInfo0.getType();
        assertFalse(class1.isArray());
    }
    
    @Test(timeout = 4000)
    public void test06() throws Throwable {
        Class<Object> class0 = Object.class;
        JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);
        JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();
        JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = jsonReaderCodeGenerator_TypeInfo0.addAttributeInfo(class0, jsonBeanAttribute0);
        jsonReaderCodeGenerator_AttributeInfo0.getAttributeType();
        assertEquals(0, jsonReaderCodeGenerator_AttributeInfo0.getArrayType());
    }
    
    @Test(timeout = 4000)
    public void test11() throws Throwable {
        JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode("OBJECT", "OBJECT");
        JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode1 = new JsonReaderCodeGenerator.PathAndCode("", "D]#&Gx<^@=`");
        boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals(jsonReaderCodeGenerator_PathAndCode1);
        assertFalse(boolean0);
        assertEquals("D]#&Gx<^@=`", jsonReaderCodeGenerator_PathAndCode1.getCode());
        assertEquals("", jsonReaderCodeGenerator_PathAndCode1.getPath());
    }
    
    @Test(timeout = 4000)
    public void test08() throws Throwable {
        Class<Object> class0 = Object.class;
        JsonReaderCodeGenerator.TypeInfo jsonReaderCodeGenerator_TypeInfo0 = new JsonReaderCodeGenerator.TypeInfo(class0);
        List<JsonReaderCodeGenerator.AttributeInfo> list0 = jsonReaderCodeGenerator_TypeInfo0.getAttributeInfos();
        assertTrue(list0.isEmpty());
    }
    
    @Test(timeout = 4000)
    public void test11() throws Throwable {
        JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode("OBJECT", "OBJECT");
        JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode1 = new JsonReaderCodeGenerator.PathAndCode("", "D]#&Gx<^@=`");
        boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals(jsonReaderCodeGenerator_PathAndCode1);
        assertFalse(boolean0);
        assertEquals("D]#&Gx<^@=`", jsonReaderCodeGenerator_PathAndCode1.getCode());
        assertEquals("", jsonReaderCodeGenerator_PathAndCode1.getPath());
    }
    
    @Test(timeout = 4000)
    public void test11() throws Throwable {
        JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode0 = new JsonReaderCodeGenerator.PathAndCode("OBJECT", "OBJECT");
        JsonReaderCodeGenerator.PathAndCode jsonReaderCodeGenerator_PathAndCode1 = new JsonReaderCodeGenerator.PathAndCode("", "D]#&Gx<^@=`");
        boolean boolean0 = jsonReaderCodeGenerator_PathAndCode0.equals(jsonReaderCodeGenerator_PathAndCode1);
        assertFalse(boolean0);
        assertEquals("D]#&Gx<^@=`", jsonReaderCodeGenerator_PathAndCode1.getCode());
        assertEquals("", jsonReaderCodeGenerator_PathAndCode1.getPath());
    }
    
    @Test(timeout = 4000)
    public void test18() throws Throwable {
        Class<JavaTimeInstantFormatter> class0 = JavaTimeInstantFormatter.class;
        JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();
        JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = new JsonReaderCodeGenerator.AttributeInfo(class0, jsonBeanAttribute0);
        jsonReaderCodeGenerator_AttributeInfo0.setArrayType(2015);
        assertEquals(2015, jsonReaderCodeGenerator_AttributeInfo0.getArrayType());
    }
    
    @Test(timeout = 4000)
    public void test20() throws Throwable {
        Class<JavaTimeInstantFormatter> class0 = JavaTimeInstantFormatter.class;
        JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();
        JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo0 = new JsonReaderCodeGenerator.AttributeInfo(class0, jsonBeanAttribute0);
        JsonReaderCodeGenerator.AttributeInfo jsonReaderCodeGenerator_AttributeInfo1 = jsonReaderCodeGenerator_AttributeInfo0.setCollectionType(class0);
        assertEquals(0, jsonReaderCodeGenerator_AttributeInfo1.getArrayType());
    }
}
