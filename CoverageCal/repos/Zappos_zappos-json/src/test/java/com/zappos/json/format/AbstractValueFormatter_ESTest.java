/*
 * This file was automatically generated by EvoSuite
 * Thu Jan 25 13:29:33 GMT 2024
 */
package com.zappos.json.format;


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.zappos.json.ZapposJson;
import com.zappos.json.format.BigIntegerFormatter;
import com.zappos.json.format.JavaTimeLocalDateFormatter;
import com.zappos.json.format.JavaTimestampFormatter;
import com.zappos.json.format.NoOpValueFormatter;
import java.time.Clock;
import java.time.Period;
import java.time.ZoneOffset;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.IsoChronology;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false)
public class AbstractValueFormatter_ESTest extends AbstractValueFormatter_ESTest_scaffolding {


@Test(timeout = 4000)
public void test01() throws Throwable {
    NoOpValueFormatter noOpValueFormatter0 = new NoOpValueFormatter();
    noOpValueFormatter0.setPattern("");
    noOpValueFormatter0.getPattern();
    assertTrue(noOpValueFormatter0.isJsString());
}


@Test(timeout = 4000)
public void test08() throws Throwable {
    NoOpValueFormatter noOpValueFormatter0 = new NoOpValueFormatter();
    assertTrue(noOpValueFormatter0.isJsString());
    ZapposJson zapposJson0 = ZapposJson.getInstance();
    noOpValueFormatter0.setJsString(false);
    noOpValueFormatter0.toJsonValue(zapposJson0, "");
    assertFalse(noOpValueFormatter0.isJsString());
}


@Test(timeout = 4000)
public void test04() throws Throwable {
    BigIntegerFormatter bigIntegerFormatter0 = new BigIntegerFormatter();
    ZapposJson zapposJson0 = ZapposJson.getInstance();
    // Undeclared exception!
    try {
        bigIntegerFormatter0.formatObject(zapposJson0, zapposJson0);
        fail("Expecting exception: ClassCastException");
    } catch (ClassCastException e) {
    }
}

}
