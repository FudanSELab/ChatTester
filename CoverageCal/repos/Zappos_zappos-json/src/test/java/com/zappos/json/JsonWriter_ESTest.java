/*
 * This file was automatically generated by EvoSuite
 * Thu Jan 25 14:01:13 GMT 2024
 */
package com.zappos.json;


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.zappos.json.JsonConfig;
import com.zappos.json.JsonWriter;
import com.zappos.json.ZapposJson;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.IOException;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.time.ZoneId;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false)
public class JsonWriter_ESTest extends JsonWriter_ESTest_scaffolding {


@Test(timeout = 4000)
public void test29() throws Throwable {
    MockFile mockFile0 = new MockFile("EH|", "EH|");
    MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
    ZapposJson zapposJson0 = new ZapposJson();
    JsonWriter.writeNumber(zapposJson0, (-1L), mockFileWriter0);
}


// @Test(timeout = 4000)
// public void test50() throws Throwable {
//     CharArrayWriter charArrayWriter0 = new CharArrayWriter();
//     ZapposJson zapposJson0 = ZapposJson.getInstance("Character @ = new Character((String)@);\n");
//     Set<String> set0 = ZoneId.getAvailableZoneIds();
//     // Undeclared exception!
//     try {
//         JsonWriter.writeIterable(zapposJson0, set0, charArrayWriter0);
//         fail("Expecting exception: RuntimeException");
//     } catch (RuntimeException e) {
//         //
//         // org.evosuite.runtime.TooManyResourcesException: Loop has been executed more times than the allowed 10000
//         //
//         verifyException("com.zappos.json.ZapposJson", e);
//     }
// }


@Test(timeout = 4000)
public void test04() throws Throwable {
    ZapposJson zapposJson0 = new ZapposJson();
    PipedWriter pipedWriter0 = new PipedWriter();
    HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
    try {
        JsonWriter.writeMap(zapposJson0, hashMap0, pipedWriter0);
        fail("Expecting exception: IOException");
    } catch (IOException e) {
        // 
        // Pipe not connected
        // 
        verifyException("java.io.PipedWriter", e);
    }
}


@Test(timeout = 4000)
public void test01() throws Throwable {
    ZapposJson zapposJson0 = new ZapposJson(true);
    JsonConfig.ReaderConfig jsonConfig_ReaderConfig0 = JsonConfig.ReaderConfig.READ_ENUM_USING_ORDINAL;
    File file0 = MockFile.createTempFile(".next();\n", ".next();\n");
    MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
    JsonWriter.writeEnum(zapposJson0, jsonConfig_ReaderConfig0, mockFileWriter0);
}


@Test(timeout = 4000)
public void test48() throws Throwable {
    ZapposJson zapposJson0 = ZapposJson.getInstance("TG$gvGV}05y");
    CharArrayWriter charArrayWriter0 = new CharArrayWriter();
    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, false);
    JsonWriter.writeBoolean(zapposJson0, (Boolean) false, mockPrintWriter0);
}


@Test(timeout = 4000)
public void test10() throws Throwable {
    byte[] byteArray0 = new byte[8];
    // Undeclared exception!
    try {
        JsonWriter.writeBase64String((ZapposJson) null, byteArray0, (Writer) null);
        fail("Expecting exception: NullPointerException");
    } catch (NullPointerException e) {
        // 
        // no message in exception (getMessage() returned null)
        // 
        verifyException("com.zappos.json.JsonWriter", e);
    }
}


@Test(timeout = 4000)
public void test45() throws Throwable {
    CharArrayWriter charArrayWriter0 = new CharArrayWriter();
    ZapposJson zapposJson0 = new ZapposJson();
    Object[] objectArray0 = new Object[2];
    JsonWriter.writeArray(zapposJson0, objectArray0, (Writer) charArrayWriter0);
    assertEquals(11, charArrayWriter0.size());
    assertEquals("[null,null]", charArrayWriter0.toString());
}


@Test(timeout = 4000)
public void test00() throws Throwable {
    ZapposJson zapposJson0 = ZapposJson.getInstance("TG$gvGV}05y");
    CharArrayWriter charArrayWriter0 = new CharArrayWriter();
    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, false);
    JsonWriter.writeString(zapposJson0, "TG$gvGV}05y", mockPrintWriter0);
    assertEquals("\"TG$gvGV}05y\"", charArrayWriter0.toString());
    assertEquals(13, charArrayWriter0.size());
}


@Test(timeout = 4000)
public void test16() throws Throwable {
    long[] longArray0 = new long[6];
    PipedWriter pipedWriter0 = new PipedWriter();
    try {
        JsonWriter.writeArray(longArray0, (Writer) pipedWriter0);
        fail("Expecting exception: IOException");
    } catch (IOException e) {
        // 
        // Pipe not connected
        // 
        verifyException("java.io.PipedWriter", e);
    }
}

}
