/*
 * This file was automatically generated by EvoSuite
 * Sat Feb 10 10:11:53 GMT 2024
 */
package technology.tabula;


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Point;
import java.awt.geom.Rectangle2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import technology.tabula.RectangularTextContainer;
import technology.tabula.Table;
import technology.tabula.extractors.ExtractionAlgorithm;
import technology.tabula.extractors.SpreadsheetExtractionAlgorithm;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false)
public class Table_ESTest extends Table_ESTest_scaffolding {


@Test(timeout = 4000)
public void test03() throws Throwable {
    Table table0 = Table.empty();
    Table table1 = Table.empty();
    table0.getRight();
    Rectangle2D.union(table0, table0, table1);
    table0.x = (float) 2;
    RectangularTextContainer rectangularTextContainer0 = table0.getCell(2, 2);
    RectangularTextContainer rectangularTextContainer1 = table0.getCell(2, 2);
    Point point0 = new Point(2, 2);
    java.awt.Rectangle rectangle0 = new java.awt.Rectangle(point0);
    point0.y = 0;
    Rectangle2D.intersect(rectangularTextContainer0, rectangle0, rectangularTextContainer0);
    Rectangle2D.intersect(rectangularTextContainer1, rectangle0, rectangle0);
    table1.setFrameFromDiagonal((-2384.7), 1.0, 1362.513001715171, (double) 0.0F);
    table0.getRowCount();
    table0.add(rectangularTextContainer1, 1, 1423);
    table1.add(rectangularTextContainer0, 1423, 2);
    table0.getExtractionMethod();
    table1.getRowCount();
    table1.getRowCount();
    table0.getColCount();
    Table table2 = Table.empty();
    table2.getExtractionMethod();
    Table table3 = Table.empty();
    table3.verticalOverlapRatio(rectangularTextContainer1);
    table1.getCell(1424, 1424);
    table3.getRows();
    table1.getColCount();
    assertEquals(1424, table1.getRowCount());
    Table.empty();
    table3.getRows();
    assertEquals(0, table3.getRowCount());
}


@Test(timeout = 4000)
public void test01() throws Throwable {
    Table table0 = Table.empty();
    table0.setPageNumber((-3380));
    int int0 = table0.getPageNumber();
    assertEquals((-3380), int0);
}

}
