/*
 * This file was automatically generated by EvoSuite
 * Sat Feb 10 10:03:59 GMT 2024
 */
package technology.tabula;


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import technology.tabula.Rectangle;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false)
public class Rectangle_ESTest extends Rectangle_ESTest_scaffolding {


@Test(timeout = 4000)
public void test55() throws Throwable {
    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();
    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);
    Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);
    float float0 = rectangle0.verticalOverlapRatio(rectangle1);
    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);
    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);
    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);
    assertEquals(0.0F, float0, 0.01F);
}


@Test(timeout = 4000)
public void test14() throws Throwable {
    Rectangle rectangle0 = new Rectangle();
    Rectangle rectangle1 = new Rectangle();
    float float0 = rectangle0.horizontalOverlap(rectangle1);
    assertEquals(0.0F, float0, 0.01F);
}


@Test(timeout = 4000)
public void test50() throws Throwable {
    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();
    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);
    float float0 = rectangle0.getRight();
    assertEquals(0.0F, float0, 0.01F);
    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);
    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);
}


@Test(timeout = 4000)
public void test40() throws Throwable {
    Rectangle rectangle0 = new Rectangle();
    // Undeclared exception!
    try {
        rectangle0.overlapRatio((Rectangle) null);
        fail("Expecting exception: NullPointerException");
    } catch (NullPointerException e) {
        // 
        // no message in exception (getMessage() returned null)
        // 
        verifyException("technology.tabula.Rectangle", e);
    }
}


@Test(timeout = 4000)
public void test19() throws Throwable {
    Rectangle rectangle0 = new Rectangle();
    Rectangle rectangle1 = new Rectangle(0.4F, 0.0F, 0.0F, 0.0F);
    Rectangle rectangle2 = rectangle1.merge(rectangle0);
    float float0 = rectangle1.verticalOverlap(rectangle2);
    assertEquals(0.4F, rectangle1.height, 0.01F);
    assertEquals(0.4F, float0, 0.01F);
}


@Test(timeout = 4000)
public void test05() throws Throwable {
    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();
    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);
    rectangle0.setTop((-3179.1138F));
    rectangle0.setLeft(1354.0F);
    assertEquals(1354.0F, rectangle0.x, 0.01F);
}


@Test(timeout = 4000)
public void test66() throws Throwable {
    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();
    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);
    Point2D[] point2DArray0 = rectangle0.getPoints();
    assertEquals(3.4028235E38F, rectangle0.x, 0.01F);
    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);
    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);
    assertEquals(4, point2DArray0.length);
}


@Test(timeout = 4000)
public void test16() throws Throwable {
    Rectangle rectangle0 = new Rectangle();
    Rectangle rectangle1 = new Rectangle(0.4F, 0.0F, 0.0F, 0.0F);
    Rectangle rectangle2 = rectangle1.merge(rectangle0);
    rectangle0.setBottom(1877.9292F);
    int int0 = rectangle0.compareTo(rectangle2);
    assertEquals(0.4F, rectangle1.height, 0.01F);
    assertEquals(1, int0);
}


@Test(timeout = 4000)
public void test48() throws Throwable {
    Rectangle rectangle0 = new Rectangle();
    float float0 = rectangle0.getBottom();
    assertEquals(0.0F, float0, 0.01F);
}


@Test(timeout = 4000)
public void test64() throws Throwable {
    Rectangle rectangle0 = new Rectangle();
    int int0 = rectangle0.isLtrDominant();
    assertEquals(0, int0);
}


@Test(timeout = 4000)
public void test15() throws Throwable {
    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();
    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);
    assertEquals((-3.4028235E38F), rectangle0.width, 0.01F);
    rectangle0.setFrameFromCenter((-1.0), (double) Float.NEGATIVE_INFINITY, (double) Float.POSITIVE_INFINITY, 2916.991886);
    boolean boolean0 = rectangle0.verticallyOverlaps(rectangle0);
    assertFalse(boolean0);
}


@Test(timeout = 4000)
public void test52() throws Throwable {
    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();
    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);
    float float0 = rectangle0.getLeft();
    assertEquals(3.4028235E38F, float0, 0.01F);
    assertEquals(3.4028235E38F, rectangle0.y, 0.01F);
    assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);
}


@Test(timeout = 4000)
public void test03() throws Throwable {
    Rectangle rectangle0 = new Rectangle(1.0F, (-486.23865F), 1.0F, 2254.05F);
    rectangle0.setFrameFromCenter((double) 2.0F, (double) 2.0F, 2440.0, (double) 2254.05F);
    rectangle0.setRight((-1));
    assertEquals(4504.1F, rectangle0.height, 0.01F);
}


@Test(timeout = 4000)
public void test67() throws Throwable {
    LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();
    Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);
    String string0 = rectangle0.toString();
    assertEquals("technology.tabula.Rectangle[x=3.4028235E38,y=3.4028235E38,w=-3.4028235E38,h=-3.4028235E38,bottom=0.000000,right=0.000000]", string0);
}


@Test(timeout = 4000)
public void test58() throws Throwable {
    Rectangle rectangle0 = new Rectangle(1352.58F, 1247.0F, 1352.58F, 1.4E-45F);
    boolean boolean0 = rectangle0.horizontallyOverlaps(rectangle0);
    assertEquals(1247.0F, rectangle0.x, 0.01F);
    assertEquals(1352.58F, rectangle0.y, 0.01F);
    assertTrue(boolean0);
    assertEquals(1.896E-42F, rectangle0.getArea(), 0.01F);
}


@Test(timeout = 4000)
public void test49() throws Throwable {
    Rectangle rectangle0 = new Rectangle();
    float float0 = rectangle0.getTop();
    assertEquals(0.0F, float0, 0.01F);
}

}
