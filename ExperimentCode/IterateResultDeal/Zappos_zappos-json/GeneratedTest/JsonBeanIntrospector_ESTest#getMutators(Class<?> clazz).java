// original test path: /Users/zhi/Documents/PH.D/Project/Testing/ChatTESTER/CodePackage/Prompt2Testing/repo_get/Four_project/Zappos_zappos-json/src/test/java/com/zappos/json/JsonBeanIntrospector_ESTest.java
/*
 * This file was automatically generated by EvoSuite
 * Thu Jan 25 13:49:54 GMT 2024
 */
package com.zappos.json;






import static org.mockito.Mockito.when;
import java.util.*;
import java.lang.*;
import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.mock;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.zappos.json.JsonBeanAttribute;
import com.zappos.json.JsonBeanIntrospector;
import com.zappos.json.ZapposJson;
import com.zappos.json.format.NoOpValueFormatter;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class JsonBeanIntrospector_ESTest extends JsonBeanIntrospector_ESTest_scaffolding {
}

    
    
    
    
    
    
    @Test
    public void testGetMutators() {
        // Create a mock ZapposJson object
        ZapposJson mockZapposJson = mock(ZapposJson.class);
        
        // Create a JsonBeanIntrospector object with the mock ZapposJson
        JsonBeanIntrospector jsonBeanIntrospector = new JsonBeanIntrospector(mockZapposJson);
        
        // Create a sample class for testing
        class TestClass {
            private String name;
            
            public void setName(String name) {
                this.name = name;
            }
            
            public String getName() {
                return name;
            }
        }
        
        // Get the mutators for the TestClass
        List<JsonBeanAttribute> mutators = jsonBeanIntrospector.getMutators(TestClass.class);
        
        // Assert that the mutators list is not null
        assertEquals(2, mutators.size());
        
        // Assert that the mutator names are correct
        assertEquals("setName", mutators.get(0).getName());
        assertEquals("setName", mutators.get(0).getMethod().getName());
        assertEquals("setName", mutators.get(0).getMethod().getName());
        
        assertEquals("getName", mutators.get(1).getName());
        assertEquals("getName", mutators.get(1).getMethod().getName());
        assertEquals("getName", mutators.get(1).getMethod().getName());
    }
}
