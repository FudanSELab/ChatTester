// original test path: /Users/zhi/Documents/PH.D/Project/Testing/ChatTESTER/CodePackage/Prompt2Testing/repo_get/Four_project/tabulapdf_tabula-java/src/test/java/technology/tabula/extractors/BasicExtractionAlgorithm_ESTest.java
/*
 * This file was automatically generated by EvoSuite
 * Sat Feb 10 09:49:38 GMT 2024
 */
package technology.tabula.extractors;
import java.util.ArrayList;
import java.util.List;
import technology.tabula.Line;
import technology.tabula.Rectangle;
import technology.tabula.TextChunk;
import technology.tabula.TextElement;
import org.junit.Test;
import static org.junit.Assert.*;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import technology.tabula.Line;
import technology.tabula.Page;
import technology.tabula.Ruling;
import technology.tabula.TextChunk;
import technology.tabula.extractors.BasicExtractionAlgorithm;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class BasicExtractionAlgorithm_ESTest extends BasicExtractionAlgorithm_ESTest_scaffolding {
    @Test
    public void testColumnPositions() {
        // Create test data
        List<Line> lines = new ArrayList<>();
        Line line1 = new Line();
        line1.addTextElement(new TextChunk("Text 1"));
        line1.addTextElement(new TextChunk("Text 2"));
        lines.add(line1);
        Line line2 = new Line();
        line2.addTextElement(new TextChunk("Text 3"));
        line2.addTextElement(new TextChunk("Text 4"));
        lines.add(line2);

        // Call the method under test
        List<Float> result = BasicExtractionAlgorithm.columnPositions(lines);

        // Assert the result
        assertEquals(4, result.size());
        assertEquals(0.0f, result.get(0), 0.001);
        assertEquals(0.0f, result.get(1), 0.001);
        assertEquals(0.0f, result.get(2), 0.001);
        assertEquals(0.0f, result.get(3), 0.001);
    }
}
