// original test path: /Users/zhi/Documents/PH.D/Project/Testing/ChatTESTER/CodePackage/Prompt2Testing/repo_get/Four_project/tabulapdf_tabula-java/src/test/java/technology/tabula/Ruling_ESTest.java
/*
 * This file was automatically generated by EvoSuite
 * Sat Feb 10 10:09:27 GMT 2024
 */
package technology.tabula;
import org.junit.Test;
import java.awt.geom.Point2D;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Point;
import java.awt.geom.Point2D;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import technology.tabula.Ruling;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class Ruling_ESTest extends Ruling_ESTest_scaffolding {
    @Test
    public void testFindIntersections() {
        // Create horizontal rulings
        List<Ruling> horizontals = new ArrayList<>();
        Ruling horizontal1 = new Ruling(0, 0, 10, 1);
        Ruling horizontal2 = new Ruling(0, 2, 10, 1);
        horizontals.add(horizontal1);
        horizontals.add(horizontal2);

        // Create vertical rulings
        List<Ruling> verticals = new ArrayList<>();
        Ruling vertical1 = new Ruling(1, 0, 1, 10);
        Ruling vertical2 = new Ruling(3, 0, 1, 10);
        verticals.add(vertical1);
        verticals.add(vertical2);

        // Call the method under test
        Map<Point2D, Ruling[]> result = Ruling.findIntersections(horizontals, verticals);

        // Assert the expected result
        assertEquals(2, result.size());

        // Assert the first intersection point
        Point2D intersection1 = new Point2D.Float(1, 1);
        assertTrue(result.containsKey(intersection1));
        Ruling[] rulings1 = result.get(intersection1);
        assertEquals(horizontal1, rulings1[0]);
        assertEquals(vertical1, rulings1[1]);

        // Assert the second intersection point
        Point2D intersection2 = new Point2D.Float(3, 1);
        assertTrue(result.containsKey(intersection2));
        Ruling[] rulings2 = result.get(intersection2);
        assertEquals(horizontal2, rulings2[0]);
        assertEquals(vertical2, rulings2[1]);
    }
}
