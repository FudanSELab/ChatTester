// original test path: /Users/zhi/Documents/PH.D/Project/Testing/ChatTESTER/CodePackage/Prompt2Testing/repo_get/Four_project/tabulapdf_tabula-java/src/test/java/technology/tabula/extractors/SpreadsheetExtractionAlgorithm_ESTest.java
/*
 * This file was automatically generated by EvoSuite
 * Sat Feb 10 09:51:32 GMT 2024
 */
package technology.tabula.extractors;
import org.junit.Test;
import static org.junit.Assert.*;
import java.util.List;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import technology.tabula.Cell;
import technology.tabula.Page;
import technology.tabula.Rectangle;
import technology.tabula.Ruling;
import technology.tabula.extractors.SpreadsheetExtractionAlgorithm;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class SpreadsheetExtractionAlgorithm_ESTest extends SpreadsheetExtractionAlgorithm_ESTest_scaffolding {
    @Test
    public void testIsTabular() {
        // Create a test page
        Page page = new Page();
        page.setText("Sample text");

        // Create a minimal region
        Page minimalRegion = new Page();
        minimalRegion.setText("Sample minimal region");

        // Create a table with defined rows and columns
        Table tableWithLines = new Table();
        tableWithLines.setRowCount(3);
        tableWithLines.setColCount(4);

        // Create a table without defined rows and columns
        Table tableWithoutLines = new Table();
        tableWithoutLines.setRowCount(5);
        tableWithoutLines.setColCount(6);

        // Create a list of tables
        List<Table> tables = new ArrayList<>();
        tables.add(tableWithLines);
        tables.add(tableWithoutLines);

        // Create a mock of SpreadsheetExtractionAlgorithm
        SpreadsheetExtractionAlgorithm algorithm = Mockito.mock(SpreadsheetExtractionAlgorithm.class);
        Mockito.when(algorithm.extract(minimalRegion)).thenReturn(tables);

        // Create a mock of BasicExtractionAlgorithm
        BasicExtractionAlgorithm basicAlgorithm = Mockito.mock(BasicExtractionAlgorithm.class);
        Mockito.when(basicAlgorithm.extract(minimalRegion)).thenReturn(tables);

        // Create an instance of the class under test
        SpreadsheetExtractionAlgorithm extractionAlgorithm = new SpreadsheetExtractionAlgorithm();

        // Set the mocked algorithms
        extractionAlgorithm.setAlgorithm(algorithm);
        extractionAlgorithm.setBasicAlgorithm(basicAlgorithm);

        // Test the isTabular method
        boolean result = extractionAlgorithm.isTabular(page);

        // Assert the result
        assertTrue(result);
    }
}
