// original test path: /Users/zhi/Documents/PH.D/Project/Testing/ChatTESTER/CodePackage/Prompt2Testing/repo_get/Four_project/Zappos_zappos-json/src/test/java/com/zappos/json/util/Reflections_ESTest.java
/*
 * This file was automatically generated by EvoSuite
 * Thu Jan 25 14:11:21 GMT 2024
 */
package com.zappos.json.util;
import org.junit.Test;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.lang.reflect.ParameterizedType;
import java.util.List;
import java.util.ArrayList;
import static org.junit.Assert.*;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.zappos.json.util.Reflections;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class Reflections_ESTest extends Reflections_ESTest_scaffolding {
    @Test
    public void testGetGenericParameterTypes() throws NoSuchMethodException {
        // Create a sample method for testing
        Method method = Reflections.class.getMethod("getGenericParameterTypes", Method.class);

        // Test case 1: No generic parameter types
        Class<?>[] result1 = Reflections.getGenericParameterTypes(method);
        assertNull(result1);

        // Test case 2: Single generic parameter type
        Method method2 = Reflections.class.getMethod("getField", Class.class, String.class);
        Class<?>[] result2 = Reflections.getGenericParameterTypes(method2);
        assertEquals(1, result2.length);
        assertEquals(Class.class, result2[0]);

        // Test case 3: Multiple generic parameter types
        Method method3 = Reflections.class.getMethod("hasAnnotation", Method.class, Field.class, Class.class);
        Class<?>[] result3 = Reflections.getGenericParameterTypes(method3);
        assertEquals(3, result3.length);
        assertEquals(Method.class, result3[0]);
        assertEquals(Field.class, result3[1]);
        assertEquals(Class.class, result3[2]);
    }
}
