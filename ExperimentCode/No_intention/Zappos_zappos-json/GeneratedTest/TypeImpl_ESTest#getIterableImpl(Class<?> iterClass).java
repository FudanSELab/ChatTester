// original test path: /Users/zhi/Documents/PH.D/Project/Testing/ChatTESTER/CodePackage/Prompt2Testing/repo_get/Four_project/Zappos_zappos-json/src/test/java/com/zappos/json/util/TypeImpl_ESTest.java
/*
 * This file was automatically generated by EvoSuite
 * Thu Jan 25 14:15:15 GMT 2024
 */
package com.zappos.json.util;
import org.junit.Test;
import static org.junit.Assert.*;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.zappos.json.util.TypeImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class TypeImpl_ESTest extends TypeImpl_ESTest_scaffolding {
    @Test
    public void testGetIterableImpl() {
        // Test case 1: iterClass is List.class
        TypeImpl result1 = TypeImpl.getIterableImpl(List.class);
        assertEquals(List.class, result1.getInfClass());
        assertEquals(ArrayList.class, result1.getImplClass());

        // Test case 2: iterClass is Collection.class
        TypeImpl result2 = TypeImpl.getIterableImpl(Collection.class);
        assertEquals(Collection.class, result2.getInfClass());
        assertEquals(ArrayList.class, result2.getImplClass());

        // Test case 3: iterClass is Iterable.class
        TypeImpl result3 = TypeImpl.getIterableImpl(Iterable.class);
        assertEquals(Iterable.class, result3.getInfClass());
        assertEquals(ArrayList.class, result3.getImplClass());

        // Test case 4: iterClass is an abstract class
        try {
            TypeImpl.getIterableImpl(AbstractClass.class);
            fail("Expected RuntimeException to be thrown");
        } catch (RuntimeException e) {
            assertEquals("Cannot find appropriate implementation of collection type: " + AbstractClass.class.getName(), e.getMessage());
        }

        // Test case 5: iterClass is an interface
        try {
            TypeImpl.getIterableImpl(Interface.class);
            fail("Expected RuntimeException to be thrown");
        } catch (RuntimeException e) {
            assertEquals("Cannot find appropriate implementation of collection type: " + Interface.class.getName(), e.getMessage());
        }

        // Test case 6: iterClass is a concrete class
        TypeImpl result6 = TypeImpl.getIterableImpl(ConcreteClass.class);
        assertEquals(ConcreteClass.class, result6.getInfClass());
        assertEquals(ConcreteClass.class, result6.getImplClass());
    }
}
