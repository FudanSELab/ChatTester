// original test path: /Users/zhi/Documents/PH.D/Project/Testing/ChatTESTER/CodePackage/Prompt2Testing/repo_get/Four_project/sachin-handiekar_jInstagram/src/test/java/org/jinstagram/auth/oauth/InstagramService_ESTest.java
/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 27 03:26:33 GMT 2024
 */
package org.jinstagram.auth.oauth;
import org.jinstagram.auth.exceptions.OAuthException;
import org.jinstagram.auth.model.OAuthConstants;
import org.jinstagram.auth.model.OAuthRequest;
import org.jinstagram.auth.model.Token;
import org.jinstagram.auth.model.Verifier;
import org.jinstagram.http.Response;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jinstagram.auth.InstagramApi;
import org.jinstagram.auth.model.OAuthConfig;
import org.jinstagram.auth.model.OAuthRequest;
import org.jinstagram.auth.model.Token;
import org.jinstagram.auth.model.Verifier;
import org.jinstagram.auth.oauth.InstagramService;
import org.jinstagram.http.Verbs;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class InstagramService_ESTest extends InstagramService_ESTest_scaffolding {
    @Test
    public void testGetAccessToken() throws IOException {
        // Create mock objects
        InstagramApi api = mock(InstagramApi.class);
        OAuthConfig config = mock(OAuthConfig.class);
        Verifier verifier = mock(Verifier.class);
        OAuthRequest request = mock(OAuthRequest.class);
        Response response = mock(Response.class);
        Token accessToken = mock(Token.class);

        // Set up mock behavior
        when(api.getAccessTokenVerb()).thenReturn("POST");
        when(api.getAccessTokenEndpoint()).thenReturn("https://api.instagram.com/oauth/access_token");
        when(config.getApiKey()).thenReturn("your_api_key");
        when(config.getApiSecret()).thenReturn("your_api_secret");
        when(config.getCallback()).thenReturn("https://your_callback_url");
        when(verifier.getValue()).thenReturn("your_verifier_value");
        when(api.getAccessTokenExtractor()).thenReturn(new TokenExtractor());

        // Create InstagramService instance
        InstagramService instagramService = new InstagramService(api, config);

        // Set up OAuthRequest mock behavior
        whenNew(OAuthRequest.class).withArguments("POST", "https://api.instagram.com/oauth/access_token").thenReturn(request);
        when(request.send()).thenReturn(response);
        when(response.getBody()).thenReturn("access_token=your_access_token");

        // Call the method under test
        Token result = instagramService.getAccessToken(verifier);

        // Verify the method behavior
        verify(request).addBodyParameter(OAuthConstants.CLIENT_ID, "your_api_key");
        verify(request).addBodyParameter(OAuthConstants.CLIENT_SECRET, "your_api_secret");
        verify(request).addBodyParameter(OAuthConstants.GRANT_TYPE, OAuthConstants.AUTHORIZATION_CODE);
        verify(request).addBodyParameter(OAuthConstants.CODE, "your_verifier_value");
        verify(request).addBodyParameter(OAuthConstants.REDIRECT_URI, "https://your_callback_url");
        verify(request).send();
        verify(api.getAccessTokenExtractor()).extract("access_token=your_access_token");
        assertEquals(accessToken, result);
    }
}
