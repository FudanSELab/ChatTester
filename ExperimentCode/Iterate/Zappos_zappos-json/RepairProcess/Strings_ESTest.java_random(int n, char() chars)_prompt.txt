0-->1-->0-->compileRepair


# Test Method
    @Test
    public void testRandom() {
        char[] chars = {'a', 'b', 'c', 'd', 'e'};
        String result = Strings.random(5, chars);
        assertEquals(5, result.length());

            <Buggy Line>: lambda expressions are not supported in -source 1.7
        assertTrue(result.chars().allMatch(c -> Arrays.binarySearch(chars, (char) c) >= 0));

    }


# Instruction
The test method has a bug error (marked <Buggy Line>). 
 Please repair the buggy code line and return the complete and compilable test method after repair. 
The generated code should be enclosed within ``` ```.

########

1-->2-->0-->compileRepair


# Test Method
@Test
public void testRandom() {
    char[] chars = {'a', 'b', 'c', 'd', 'e'};
    String result = Strings.random(5, chars);
    assertEquals(5, result.length());

        <Buggy Line>: lambda expressions are not supported in -source 1.7
    assertTrue(result.chars().allMatch(c -> new String(chars).indexOf((char) c) >= 0));

}


# Instruction
The test method has a bug error (marked <Buggy Line>). 
 Please repair the buggy code line and return the complete and compilable test method after repair. 
The generated code should be enclosed within ``` ```.

########

2-->3-->1-->compileRepair


# Focal Method
public class Strings {
private static final Random RANDOM = new Random();
# Focal method
public static String random(int n, char[] chars) {
    char[] c = new char[n];
    for (int i = 0; i < n; i++) {
        c[i] = chars[RANDOM.nextInt(chars.length)];
    }
    return new String(c);
}
}

# Method Intention
The random(int n, char[] chars) method is intended to generate a random string of length n by selecting characters from the provided char array, allowing for customizable and varied string generation based on the input characters.

# Instruction
Please generate a complete and compilable test method for the `Focal Method` based on the `Method Intention` and Class Information. 
The generated test method coverage for the focal method is as comprehensive as possible, and the generated code should be enclosed within ``` ```.

########

