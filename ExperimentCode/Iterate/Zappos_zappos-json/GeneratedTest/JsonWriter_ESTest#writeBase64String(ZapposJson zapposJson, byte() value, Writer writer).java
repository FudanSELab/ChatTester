// original test path: /Users/zhi/Documents/PH.D/Project/Testing/ChatTESTER/CodePackage/Prompt2Testing/repo_get/Four_project/Zappos_zappos-json/src/test/java/com/zappos/json/JsonWriter_ESTest.java
/*
 * This file was automatically generated by EvoSuite
 * Thu Jan 25 14:01:13 GMT 2024
 */
package com.zappos.json;



import org.mockito.Mock;
import java.util.*;
import java.lang.*;
import org.junit.Test;
import static org.junit.Assert.*;
import org.mockito.Mockito;
import java.io.StringWriter;
import java.io.Writer;
import java.io.IOException;
import javax.xml.bind.DatatypeConverter;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.zappos.json.JsonConfig;
import com.zappos.json.JsonWriter;
import com.zappos.json.ZapposJson;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.IOException;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.time.ZoneId;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class JsonWriter_ESTest extends JsonWriter_ESTest_scaffolding {
    
    
    
    
    
    @Test
    public void testWriteBase64String() throws IOException {
        // Arrange
        ZapposJson zapposJson = Mockito.mock(ZapposJson.class);
        byte[] value = {0, 1, 2, 3, 4}; // Sample byte array
        StringWriter writer = new StringWriter();

        // Act
        JsonWriter.writeBase64String(zapposJson, value, writer);

        // Assert
        String expectedJson = "\"" + DatatypeConverter.printBase64Binary(value) + "\"";
        String actualJson = writer.toString();
        assert actualJson.equals(expectedJson);
    }
}
