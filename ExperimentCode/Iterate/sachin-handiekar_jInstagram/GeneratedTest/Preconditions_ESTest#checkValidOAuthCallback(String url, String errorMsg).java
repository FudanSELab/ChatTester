// original test path: /Users/zhi/Documents/PH.D/Project/Testing/ChatTESTER/CodePackage/Prompt2Testing/repo_get/Four_project/sachin-handiekar_jInstagram/src/test/java/org/jinstagram/utils/Preconditions_ESTest.java
/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 27 05:17:41 GMT 2024
 */
package org.jinstagram.utils;
import org.junit.Test;
import static org.junit.Assert.*;
import org.jinstagram.utils.Preconditions;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jinstagram.utils.Preconditions;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class Preconditions_ESTest extends Preconditions_ESTest_scaffolding {
    @Test
    public void testCheckValidOAuthCallback() {
        // Test case 1: Valid OAuth callback URL
        String validUrl = "https://example.com/oauth/callback";
        String errorMsg1 = "Invalid OAuth callback URL";
        try {
            Preconditions.checkValidOAuthCallback(validUrl, errorMsg1);
        } catch (Exception e) {
            fail("Valid OAuth callback URL should not throw an exception");
        }

        // Test case 2: Empty URL
        String emptyUrl = "";
        String errorMsg2 = "Empty URL provided";
        try {
            Preconditions.checkValidOAuthCallback(emptyUrl, errorMsg2);
            fail("Empty URL should throw an exception");
        } catch (IllegalArgumentException e) {
            // Expected exception
        }

        // Test case 3: Invalid OAuth callback URL
        String invalidUrl = "invalidurl";
        String errorMsg3 = "Invalid OAuth callback URL";
        try {
            Preconditions.checkValidOAuthCallback(invalidUrl, errorMsg3);
            fail("Invalid OAuth callback URL should throw an exception");
        } catch (IllegalArgumentException e) {
            // Expected exception
        }
    }
}
