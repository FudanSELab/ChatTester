// original test path: /Users/zhi/Documents/PH.D/Project/Testing/ChatTESTER/CodePackage/Prompt2Testing/repo_get/Four_project/Zappos_zappos-json/src/test/java/com/zappos/json/util/Reflections_ESTest.java
/*
 * This file was automatically generated by EvoSuite
 * Thu Jan 25 14:11:21 GMT 2024
 */
package com.zappos.json.util;
import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Field;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.zappos.json.util.Reflections;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class Reflections_ESTest extends Reflections_ESTest_scaffolding {
    @Test
    public void testGetSecondGenericType() {
        // Create a sample Field object for testing
        Field field = null; // Initialize with an actual Field object

        // Test case when the field has at least two generic types
        Class<?>[] genericTypes = new Class[]{String.class, Integer.class}; // Example generic types
        Reflections reflection = new Reflections();
        reflection.setGenericTypes(field, genericTypes);
        Class<?> secondGenericType = reflection.getSecondGenericType(field);
        assertEquals(Integer.class, secondGenericType);

        // Test case when the field has only one generic type
        genericTypes = new Class[]{String.class}; // Example generic type
        reflection.setGenericTypes(field, genericTypes);
        secondGenericType = reflection.getSecondGenericType(field);
        assertNull(secondGenericType);

        // Test case when the field has no generic types
        genericTypes = null;
        reflection.setGenericTypes(field, genericTypes);
        secondGenericType = reflection.getSecondGenericType(field);
        assertNull(secondGenericType);
    }
}
