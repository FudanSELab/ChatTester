// original test path: /Users/zhi/Documents/PH.D/Project/Testing/ChatTESTER/CodePackage/Prompt2Testing/repo_get/Four_project/Zappos_zappos-json/src/test/java/com/zappos/json/util/Reflections_ESTest.java
/*
 * This file was automatically generated by EvoSuite
 * Thu Jan 25 14:11:21 GMT 2024
 */
package com.zappos.json.util;
import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.zappos.json.util.Reflections;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class Reflections_ESTest extends Reflections_ESTest_scaffolding {
    @Test
    public void testGetAnnotation() throws NoSuchFieldException {
        // Create a test class for reflection
        class TestClass {
            @TestAnnotation
            public void annotatedMethod() {
            }

            public String nonAnnotatedMethod() {
                return "Non-annotated method";
            }

            @TestAnnotation
            public String annotatedField;
        }

        // Get the methods and fields of the test class
        Method annotatedMethod = TestClass.class.getDeclaredMethod("annotatedMethod");
        Method nonAnnotatedMethod = TestClass.class.getDeclaredMethod("nonAnnotatedMethod");
        Field annotatedField = TestClass.class.getDeclaredField("annotatedField");

        // Test the getAnnotation method with different scenarios
        Reflections ref = new Reflections();
        TestAnnotation methodAnnotation = ref.getAnnotation(annotatedMethod, null, TestAnnotation.class);
        TestAnnotation fieldAnnotation = ref.getAnnotation(null, annotatedField, TestAnnotation.class);
        TestAnnotation bothAnnotation = ref.getAnnotation(annotatedMethod, annotatedField, TestAnnotation.class);
        TestAnnotation noAnnotation = ref.getAnnotation(nonAnnotatedMethod, null, TestAnnotation.class);

        assertNotNull("Method annotation should not be null", methodAnnotation);
        assertNotNull("Field annotation should not be null", fieldAnnotation);
        assertNotNull("Both method and field annotation should not be null", bothAnnotation);
        assertNull("Non-annotated method should return null for annotation", noAnnotation);
    }
}
