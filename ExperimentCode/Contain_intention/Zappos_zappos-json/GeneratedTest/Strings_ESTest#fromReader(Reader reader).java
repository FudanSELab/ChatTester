// original test path: /Users/zhi/Documents/PH.D/Project/Testing/ChatTESTER/CodePackage/Prompt2Testing/repo_get/Four_project/Zappos_zappos-json/src/test/java/com/zappos/json/util/Strings_ESTest.java
/*
 * This file was automatically generated by EvoSuite
 * Thu Jan 25 14:13:31 GMT 2024
 */
package com.zappos.json.util;
import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.zappos.json.util.Strings;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class Strings_ESTest extends Strings_ESTest_scaffolding {
    @Test
    public void testFromReader() throws IOException {
        // Create a mock Reader object
        Reader mockReader = mock(Reader.class);
        
        // Define the data to be read from the Reader
        String testData = "This is a test string";
        
        // Mock the behavior of the Reader to return the test data
        when(mockReader.read()).thenReturn((int) testData.charAt(0), (int) testData.charAt(1), (int) testData.charAt(2),
                (int) testData.charAt(3), (int) testData.charAt(4), (int) testData.charAt(5), (int) testData.charAt(6),
                (int) testData.charAt(7), (int) testData.charAt(8), (int) testData.charAt(9), (int) testData.charAt(10),
                (int) testData.charAt(11), (int) testData.charAt(12), (int) testData.charAt(13), (int) testData.charAt(14),
                (int) testData.charAt(15), (int) testData.charAt(16), (int) testData.charAt(17), (int) testData.charAt(18),
                (int) testData.charAt(19), (int) testData.charAt(20), (int) testData.charAt(21));
        
        // Call the method under test
        String result = Strings.fromReader(mockReader);
        
        // Verify the result
        assertEquals(testData, result);
    }
}
