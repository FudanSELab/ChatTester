// original test path: /Users/zhi/Documents/PH.D/Project/Testing/ChatTESTER/CodePackage/Prompt2Testing/repo_get/Four_project/Zappos_zappos-json/src/test/java/com/zappos/json/util/Strings_ESTest.java
/*
 * This file was automatically generated by EvoSuite
 * Thu Jan 25 14:13:31 GMT 2024
 */
package com.zappos.json.util;
import static org.junit.Assert.assertEquals;
import org.junit.Test;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.zappos.json.util.Strings;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class Strings_ESTest extends Strings_ESTest_scaffolding {
    @Test
    public void testFormat() {
        // Test case 1: Valid pattern with arguments
        String pattern1 = "Hello @, your age is @ years old.";
        String expected1 = "Hello Alice, your age is 30 years old.";
        String actual1 = Strings.format(pattern1, "Alice", 30);
        assertEquals(expected1, actual1);

        // Test case 2: Pattern with null argument
        String pattern2 = "Hello @, your age is @ years old.";
        String expected2 = "Hello null, your age is 25 years old.";
        String actual2 = Strings.format(pattern2, null, 25);
        assertEquals(expected2, actual2);

        // Test case 3: Pattern with multiple placeholders
        String pattern3 = "The sum of @ and @ is @.";
        String expected3 = "The sum of 10 and 20 is 30.";
        String actual3 = Strings.format(pattern3, 10, 20, 30);
        assertEquals(expected3, actual3);

        // Test case 4: Pattern with no arguments
        String pattern4 = "This is a test pattern.";
        String expected4 = "This is a test pattern.";
        String actual4 = Strings.format(pattern4);
        assertEquals(expected4, actual4);
    }
}
