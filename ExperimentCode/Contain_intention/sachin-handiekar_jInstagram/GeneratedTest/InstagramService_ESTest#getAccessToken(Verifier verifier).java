// original test path: /Users/zhi/Documents/PH.D/Project/Testing/ChatTESTER/CodePackage/Prompt2Testing/repo_get/Four_project/sachin-handiekar_jInstagram/src/test/java/org/jinstagram/auth/oauth/InstagramService_ESTest.java
/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 27 03:26:33 GMT 2024
 */
package org.jinstagram.auth.oauth;
import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.*;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jinstagram.auth.InstagramApi;
import org.jinstagram.auth.model.OAuthConfig;
import org.jinstagram.auth.model.OAuthRequest;
import org.jinstagram.auth.model.Token;
import org.jinstagram.auth.model.Verifier;
import org.jinstagram.auth.oauth.InstagramService;
import org.jinstagram.http.Verbs;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class InstagramService_ESTest extends InstagramService_ESTest_scaffolding {
    @Test
    public void testGetAccessToken() {
        // Mocking necessary objects
        InstagramApi api = mock(InstagramApi.class);
        OAuthConfig config = mock(OAuthConfig.class);
        Verifier verifier = new Verifier("mock_verifier_code");
        Token expectedToken = new Token("mock_access_token", "mock_token_secret");

        // Setting up the InstagramService instance
        InstagramService instagramService = new InstagramService(api, config);

        // Mocking the behavior of api and request
        when(api.getAccessTokenVerb()).thenReturn("POST");
        when(api.getAccessTokenEndpoint()).thenReturn("https://api.instagram.com/oauth/access_token");
        when(config.getApiKey()).thenReturn("mock_api_key");
        when(config.getApiSecret()).thenReturn("mock_api_secret");
        when(config.getCallback()).thenReturn("http://localhost/callback");
        when(config.hasScope()).thenReturn(false);

        // Mocking the response from the API
        Response mockResponse = new Response(200, "mock_response_body");
        when(request.send()).thenReturn(mockResponse);
        when(api.getAccessTokenExtractor().extract("mock_response_body")).thenReturn(expectedToken);

        // Calling the method under test
        Token actualToken = instagramService.getAccessToken(verifier);

        // Verifying the result
        assertEquals(expectedToken, actualToken);
    }
}
