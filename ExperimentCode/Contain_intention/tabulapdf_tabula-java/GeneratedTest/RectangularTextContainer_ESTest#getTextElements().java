// original test path: /Users/zhi/Documents/PH.D/Project/Testing/ChatTESTER/CodePackage/Prompt2Testing/repo_get/Four_project/tabulapdf_tabula-java/src/test/java/technology/tabula/RectangularTextContainer_ESTest.java
/*
 * This file was automatically generated by EvoSuite
 * Sat Feb 10 10:07:21 GMT 2024
 */
package technology.tabula;
import org.junit.Test;
import java.util.List;
import static org.junit.Assert.*;
import org.mockito.Mockito;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.geom.Point2D;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import technology.tabula.Cell;
import technology.tabula.RectangularTextContainer;
import technology.tabula.TextChunk;
import technology.tabula.TextElement;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class RectangularTextContainer_ESTest extends RectangularTextContainer_ESTest_scaffolding {
    @Test
    public void testGetTextElements() {
        // Create a sample list of text elements
        List<TextElement> expectedTextElements = new ArrayList<>();
        expectedTextElements.add(new TextElement("Text 1"));
        expectedTextElements.add(new TextElement("Text 2"));
        
        // Create a mock RectangularTextContainer object
        RectangularTextContainer<TextElement> container = Mockito.mock(RectangularTextContainer.class);
        
        // Set the expected text elements in the mock object
        Mockito.when(container.getTextElements()).thenReturn(expectedTextElements);
        
        // Retrieve the text elements from the mock object
        List<TextElement> actualTextElements = container.getTextElements();
        
        // Assert that the retrieved text elements match the expected text elements
        assertEquals(expectedTextElements, actualTextElements);
    }
}
