/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 27 04:43:07 GMT 2024
 */

package org.jinstagram.http;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.Proxy;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.jinstagram.http.Request;
import org.jinstagram.http.Verbs;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Request_ESTest extends Request_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Verbs verbs0 = Verbs.GET;
      Request request0 = new Request(verbs0, "?.*");
      request0.addQuerystringParameter("?.*", (String) null);
      assertFalse(request0.getConnectionKeepAlive());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Verbs verbs0 = Verbs.DELETE;
      Request request0 = new Request(verbs0, "}B:Q{&$6Q^6\u0002Hym>N");
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      HttpURLConnection httpURLConnection0 = mock(HttpURLConnection.class, new ViolatedAssumptionAnswer());
      doReturn(outputStream0).when(httpURLConnection0).getOutputStream();
      byte[] byteArray0 = new byte[1];
      request0.addBody(httpURLConnection0, byteArray0);
      assertFalse(request0.getConnectionKeepAlive());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Verbs verbs0 = Verbs.POST;
      Request request0 = new Request(verbs0, (String) null);
      request0.getUrl();
      assertFalse(request0.getConnectionKeepAlive());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Verbs verbs0 = Verbs.PUT;
      Request request0 = new Request(verbs0, "");
      request0.getUrl();
      assertFalse(request0.getConnectionKeepAlive());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Verbs verbs0 = Verbs.PUT;
      Request request0 = new Request(verbs0, "");
      request0.getSanitizedUrl();
      assertFalse(request0.getConnectionKeepAlive());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Verbs verbs0 = Verbs.POST;
      Request request0 = new Request(verbs0, "(-)?[0-9]+(.)?[0-9]*");
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      request0.setReadTimeout(2, timeUnit0);
      int int0 = request0.getReadTimeoutInMillis();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Verbs verbs0 = Verbs.DELETE;
      Request request0 = new Request(verbs0, "");
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      request0.setReadTimeout((-3810), timeUnit0);
      int int0 = request0.getReadTimeoutInMillis();
      assertEquals((-228600000), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Verbs verbs0 = Verbs.POST;
      Request request0 = new Request(verbs0, "");
      Proxy proxy0 = Proxy.NO_PROXY;
      request0.setProxy(proxy0);
      request0.getProxy();
      assertFalse(request0.getConnectionKeepAlive());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Verbs verbs0 = Verbs.GET;
      Request request0 = new Request(verbs0, "vonM_2ee~0)#t85k");
      request0.addHeader("Content-Length", "");
      request0.getHeaders();
      assertFalse(request0.getConnectionKeepAlive());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Verbs verbs0 = Verbs.DELETE;
      Request request0 = new Request(verbs0, "Received an invalid parameter");
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      request0.setConnectTimeout(1, timeUnit0);
      int int0 = request0.getConnectTimeoutInMillis();
      assertEquals(60000, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Verbs verbs0 = Verbs.DELETE;
      Request request0 = new Request(verbs0, "");
      request0.setCharset("");
      request0.getCharset();
      assertFalse(request0.getConnectionKeepAlive());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Verbs verbs0 = Verbs.GET;
      Request request0 = new Request(verbs0, "\"w)7V|[m?lIh;anl");
      request0.addPayload("");
      request0.getByteBodyContents();
      assertFalse(request0.getConnectionKeepAlive());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Verbs verbs0 = Verbs.POST;
      Request request0 = new Request(verbs0, "WU[liSYs?^dN(si:");
      request0.addBodyParameter("WU[liSYs?^dN(si:", "WU[liSYs?^dN(si:");
      request0.getBodyParams();
      assertFalse(request0.getConnectionKeepAlive());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Verbs verbs0 = Verbs.PUT;
      Request request0 = new Request(verbs0, "Malformed URL");
      request0.addPayload("Malformed URL");
      request0.getBodyContents();
      assertFalse(request0.getConnectionKeepAlive());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Verbs verbs0 = Verbs.POST;
      Request request0 = new Request(verbs0, "http.keepAlive");
      request0.addPayload("");
      request0.getBodyContents();
      assertFalse(request0.getConnectionKeepAlive());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Verbs verbs0 = Verbs.GET;
      String string0 = "org.jinstagram.http.Verbs";
      Request request0 = new Request(verbs0, "org.jinstagram.http.Verbs");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("-Of^Q4+Nqv_%", "org.jinstagram.http.Verbs", 0, "!", uRLStreamHandler0);
      HttpURLConnection httpURLConnection0 = mock(HttpURLConnection.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(httpURLConnection0).getResponseCode();
      doReturn((Map) null).when(httpURLConnection0).getHeaderFields();
      doReturn(uRL0).when(httpURLConnection0).getURL();
      request0.setConnection(httpURLConnection0);
      // Undeclared exception!
      try { 
        request0.doSend();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jinstagram.http.Response", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Verbs verbs0 = Verbs.POST;
      Request request0 = new Request(verbs0, (String) null);
      // Undeclared exception!
      try { 
        request0.getSanitizedUrl();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jinstagram.http.Request", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Verbs verbs0 = Verbs.POST;
      Request request0 = new Request(verbs0, (String) null);
      request0.setCharset("@Request(%s %s)");
      request0.addPayload("`}");
      // Undeclared exception!
      try { 
        request0.getByteBodyContents();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported Charset: @Request(%s %s)
         //
         verifyException("org.jinstagram.http.Request", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Verbs verbs0 = Verbs.GET;
      Request request0 = new Request(verbs0, "");
      // Undeclared exception!
      try { 
        request0.getByteBodyContents();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("org.jinstagram.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Verbs verbs0 = Verbs.PUT;
      Request request0 = new Request(verbs0, "http.keepAlive");
      HttpURLConnection httpURLConnection0 = mock(HttpURLConnection.class, new ViolatedAssumptionAnswer());
      request0.setConnection(httpURLConnection0);
      request0.addPayload("http.keepAlive");
      request0.setCharset("cd&*$V/4!MYsY!6");
      // Undeclared exception!
      try { 
        request0.doSend();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported Charset: cd&*$V/4!MYsY!6
         //
         verifyException("org.jinstagram.http.Request", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Verbs verbs0 = Verbs.DELETE;
      Request request0 = new Request(verbs0, "gg,DN/nH");
      request0.addHeader("gg,DN/nH", "/c),&&-");
      // Undeclared exception!
      try { 
        request0.addHeaders((HttpURLConnection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jinstagram.http.Request", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Verbs verbs0 = Verbs.POST;
      Request request0 = new Request(verbs0, "5I(D;;,<ehYi:{Sq$n");
      request0.setCharset("5I(D;;,<ehYi:{Sq$n");
      request0.getCharset();
      assertFalse(request0.getConnectionKeepAlive());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Verbs verbs0 = Verbs.GET;
      Request request0 = new Request(verbs0, "");
      request0.getCharset();
      assertFalse(request0.getConnectionKeepAlive());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Verbs verbs0 = Verbs.GET;
      Request request0 = new Request(verbs0, "");
      request0.getVerb();
      assertFalse(request0.getConnectionKeepAlive());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Verbs verbs0 = Verbs.GET;
      Request request0 = new Request(verbs0, "Cannot find specified encoding: %s");
      request0.getUrl();
      assertFalse(request0.getConnectionKeepAlive());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Verbs verbs0 = Verbs.POST;
      Request request0 = new Request(verbs0, "");
      HttpURLConnection httpURLConnection0 = mock(HttpURLConnection.class, new ViolatedAssumptionAnswer());
      request0.setConnection(httpURLConnection0);
      // Undeclared exception!
      try { 
        request0.doSend();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("org.jinstagram.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Verbs verbs0 = Verbs.DELETE;
      Request request0 = new Request(verbs0, "");
      request0.getBodyParams();
      assertFalse(request0.getConnectionKeepAlive());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Verbs verbs0 = Verbs.GET;
      Request request0 = new Request(verbs0, "\"w)7V|[m?lIh;anl");
      request0.getHeaders();
      assertFalse(request0.getConnectionKeepAlive());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Verbs verbs0 = Verbs.POST;
      Request request0 = new Request(verbs0, "(-)?[0-9]+(.)?[0-9]*");
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      request0.setConnectTimeout((-1904), timeUnit0);
      int int0 = request0.getConnectTimeoutInMillis();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Verbs verbs0 = Verbs.DELETE;
      Request request0 = new Request(verbs0, "2v9N}C.\"Cr");
      request0.setCharset("2v9N}C.\"Cr");
      request0.addPayload("2v9N}C.\"Cr");
      // Undeclared exception!
      try { 
        request0.getBodyContents();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unsupported Charset: 2v9N}C.\"Cr
         //
         verifyException("org.jinstagram.http.Request", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Verbs verbs0 = Verbs.POST;
      Request request0 = new Request(verbs0, "(-)?[0-9]+(.)?[0-9]*");
      int int0 = request0.getConnectTimeoutInMillis();
      assertFalse(request0.getConnectionKeepAlive());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Verbs verbs0 = Verbs.POST;
      Request request0 = new Request(verbs0, "(-)?[0-9]+(.)?[0-9]*");
      String string0 = request0.getSanitizedUrl();
      assertEquals("(-)", string0);
      assertFalse(request0.getConnectionKeepAlive());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Verbs verbs0 = Verbs.POST;
      Request request0 = new Request(verbs0, "(-)?[0-9]+(.)?[0-9]*");
      int int0 = request0.getReadTimeoutInMillis();
      assertEquals(0, int0);
      assertFalse(request0.getConnectionKeepAlive());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Verbs verbs0 = Verbs.POST;
      Request request0 = new Request(verbs0, "(-)?[0-9]+(.)?[0-9]*");
      request0.addHeader("(-)?[0-9]+(.)?[0-9]*", "(-)?[0-9]+(.)?[0-9]*");
      HttpURLConnection httpURLConnection0 = mock(HttpURLConnection.class, new ViolatedAssumptionAnswer());
      request0.addHeaders(httpURLConnection0);
      assertFalse(request0.getConnectionKeepAlive());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Verbs verbs0 = Verbs.POST;
      Request request0 = new Request(verbs0, "(-)?[0-9]+(.)?[0-9]*");
      request0.addPayload("4shh$?>PD+an^m");
      request0.getByteBodyContents();
      assertFalse(request0.getConnectionKeepAlive());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Verbs verbs0 = Verbs.POST;
      Request request0 = new Request(verbs0, "(-)?[0-9]+(.)?[0-9]*");
      // Undeclared exception!
      try { 
        request0.getBodyContents();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("org.jinstagram.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Verbs verbs0 = Verbs.POST;
      Request request0 = new Request(verbs0, "(-)?[0-9]+(.)?[0-9]*");
      request0.addBodyParameter("4shh$?>PD+an^m", "/-8H6<d@Jv]\"7V");
      assertFalse(request0.getConnectionKeepAlive());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Verbs verbs0 = Verbs.POST;
      Request request0 = new Request(verbs0, "(-)?[0-9]+(.)?[0-9]*");
      // Undeclared exception!
      try { 
        request0.send();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("org.jinstagram.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Verbs verbs0 = Verbs.DELETE;
      Request request0 = new Request(verbs0, "");
      request0.getProxy();
      assertFalse(request0.getConnectionKeepAlive());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Verbs verbs0 = Verbs.POST;
      Request request0 = new Request(verbs0, "WZ@'");
      // Undeclared exception!
      try { 
        request0.addBody((HttpURLConnection) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jinstagram.http.Request", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Verbs verbs0 = Verbs.GET;
      Request request0 = new Request(verbs0, "\"w)7V|[m?lIh;anl");
      String string0 = request0.toString();
      assertFalse(request0.getConnectionKeepAlive());
      assertEquals("@Request(GET \"w)7V|[m?lIh;anl)", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Verbs verbs0 = Verbs.DELETE;
      Request request0 = new Request(verbs0, "=a&(70B");
      // Undeclared exception!
      try { 
        request0.getQueryStringParams();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Malformed URL
         //
         verifyException("org.jinstagram.http.Request", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Verbs verbs0 = Verbs.DELETE;
      Request request0 = new Request(verbs0, "Received an invalid parameter");
      boolean boolean0 = request0.getConnectionKeepAlive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Verbs verbs0 = Verbs.DELETE;
      Request request0 = new Request(verbs0, "Received an invalid parameter");
      assertFalse(request0.getConnectionKeepAlive());
      
      request0.setConnectionKeepAlive(true);
      boolean boolean0 = request0.getConnectionKeepAlive();
      assertTrue(boolean0);
  }
}
