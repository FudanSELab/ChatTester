/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 27 05:13:58 GMT 2024
 */

package org.jinstagram.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jinstagram.utils.MapUtils;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MapUtils_ESTest extends MapUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("!", "!");
      // Undeclared exception!
      try { 
        MapUtils.decodeAndAppendEntries(hashMap0, (Map<String, String>) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("org.jinstagram.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      // Undeclared exception!
      try { 
        MapUtils.decodeAndAppendEntries((Map<String, String>) null, hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jinstagram.utils.MapUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("2uth&c'g[", "2uth&c'g[");
      List<String> list0 = MapUtils.getSortedKeys(hashMap0);
      assertTrue(list0.contains("2uth&c'g["));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      // Undeclared exception!
      try { 
        MapUtils.sort(hashMap0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("org.jinstagram.utils.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        MapUtils.getSortedKeys((Map<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jinstagram.utils.MapUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<String, AbstractMap.SimpleImmutableEntry<String, String>> hashMap0 = new HashMap<String, AbstractMap.SimpleImmutableEntry<String, String>>();
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>("9T#4*g9CLNtYeWVT ba", (String) null);
      hashMap0.put("{}", abstractMap_SimpleImmutableEntry0);
      String string0 = MapUtils.toString((Map<String, AbstractMap.SimpleImmutableEntry<String, String>>) hashMap0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = MapUtils.toString((Map<AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleImmutableEntry>, String>) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<AbstractMap.SimpleImmutableEntry<String, String>, String> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<String, String>, String>();
      String string0 = MapUtils.toString((Map<AbstractMap.SimpleImmutableEntry<String, String>, String>) hashMap0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      MapUtils.decodeAndAppendEntries(hashMap0, hashMap0);
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MapUtils mapUtils0 = new MapUtils();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      List<String> list0 = MapUtils.getSortedKeys(hashMap0);
      assertEquals(0, list0.size());
  }
}
