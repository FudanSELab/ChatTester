/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 27 04:03:11 GMT 2024
 */

package org.jinstagram.entity.locations;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ConcurrentModificationException;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jinstagram.entity.common.Location;
import org.jinstagram.entity.locations.LocationSearchFeed;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LocationSearchFeed_ESTest extends LocationSearchFeed_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LocationSearchFeed locationSearchFeed0 = new LocationSearchFeed();
      LinkedList<Location> linkedList0 = new LinkedList<Location>();
      Location location0 = new Location();
      linkedList0.add(location0);
      locationSearchFeed0.setLocationList(linkedList0);
      List<Location> list0 = locationSearchFeed0.getLocationList();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LocationSearchFeed locationSearchFeed0 = new LocationSearchFeed();
      LinkedList<Location> linkedList0 = new LinkedList<Location>();
      Location location0 = new Location();
      List<Location> list0 = linkedList0.subList(0, 0);
      linkedList0.add(location0);
      locationSearchFeed0.setLocationList(list0);
      // Undeclared exception!
      try { 
        locationSearchFeed0.toString();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LocationSearchFeed locationSearchFeed0 = new LocationSearchFeed();
      List<Location> list0 = locationSearchFeed0.getLocationList();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LocationSearchFeed locationSearchFeed0 = new LocationSearchFeed();
      String string0 = locationSearchFeed0.toString();
      assertEquals("LocationSearchFeed [locationList=null]", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LocationSearchFeed locationSearchFeed0 = new LocationSearchFeed();
      LinkedList<Location> linkedList0 = new LinkedList<Location>();
      locationSearchFeed0.setLocationList(linkedList0);
      List<Location> list0 = locationSearchFeed0.getLocationList();
      assertEquals(0, list0.size());
  }
}
