/*
 * This file was automatically generated by EvoSuite
 * Thu Jan 25 14:09:15 GMT 2024
 */

package com.zappos.json.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.zappos.json.util.ObjectArray;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ObjectArray_ESTest extends ObjectArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ObjectArray objectArray0 = new ObjectArray();
      objectArray0.modCount = 1492;
      Integer[] integerArray0 = new Integer[2];
      // Undeclared exception!
      try { 
        objectArray0.toArray(integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ObjectArray objectArray0 = new ObjectArray();
      objectArray0.modCount = 1492;
      // Undeclared exception!
      try { 
        objectArray0.toArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ObjectArray objectArray0 = new ObjectArray();
      objectArray0.modCount = (-837);
      int int0 = objectArray0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ObjectArray objectArray0 = new ObjectArray();
      // Undeclared exception!
      try { 
        objectArray0.get(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("com.zappos.json.util.ObjectArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ObjectArray objectArray0 = new ObjectArray();
      objectArray0.modCount = (-2461);
      // Undeclared exception!
      try { 
        objectArray0.get(2668);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2668, Size: 0
         //
         verifyException("com.zappos.json.util.ObjectArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object object0 = new Object();
      ObjectArray objectArray0 = new ObjectArray();
      Object[] objectArray1 = new Object[0];
      objectArray0.elementData = objectArray1;
      objectArray0.modCount = (-1995);
      boolean boolean0 = objectArray0.add(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object object0 = new Object();
      ObjectArray objectArray0 = new ObjectArray();
      objectArray0.modCount = (-1995);
      // Undeclared exception!
      try { 
        objectArray0.add(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zappos.json.util.ObjectArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ObjectArray objectArray0 = new ObjectArray();
      Object[] objectArray1 = new Object[6];
      objectArray0.elementData = objectArray1;
      boolean boolean0 = objectArray0.add(objectArray1[1]);
      assertTrue(boolean0);
      
      Integer[] integerArray0 = new Integer[3];
      Integer[] integerArray1 = objectArray0.toArray(integerArray0);
      assertEquals(1, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ObjectArray objectArray0 = new ObjectArray();
      Object[] objectArray1 = new Object[7];
      objectArray0.elementData = objectArray1;
      Integer[] integerArray0 = new Integer[2];
      Integer[] integerArray1 = objectArray0.toArray(integerArray0);
      assertEquals(0, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ObjectArray objectArray0 = new ObjectArray();
      Object[] objectArray1 = new Object[8];
      objectArray0.elementData = objectArray1;
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      boolean boolean0 = objectArray0.add(integer0);
      assertTrue(boolean0);
      
      Object[] objectArray2 = objectArray0.toArray();
      assertEquals(1, objectArray2.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ObjectArray objectArray0 = new ObjectArray();
      Object[] objectArray1 = new Object[0];
      objectArray0.elementData = objectArray1;
      Object[] objectArray2 = objectArray0.toArray();
      assertEquals(0, objectArray2.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ObjectArray objectArray0 = new ObjectArray();
      Object[] objectArray1 = new Object[8];
      objectArray0.elementData = objectArray1;
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      objectArray0.add(integer0);
      int int0 = objectArray0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ObjectArray objectArray0 = new ObjectArray();
      Object[] objectArray1 = new Object[6];
      objectArray0.elementData = objectArray1;
      objectArray0.add(objectArray1[1]);
      Object object0 = objectArray0.get(0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ObjectArray objectArray0 = new ObjectArray();
      Object[] objectArray1 = new Object[0];
      objectArray0.elementData = objectArray1;
      objectArray0.add(objectArray0);
      Integer[] integerArray0 = new Integer[0];
      // Undeclared exception!
      try { 
        objectArray0.toArray(integerArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ObjectArray objectArray0 = new ObjectArray();
      // Undeclared exception!
      try { 
        objectArray0.get((-348));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zappos.json.util.ObjectArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ObjectArray objectArray0 = new ObjectArray();
      Object[] objectArray1 = new Object[0];
      objectArray0.elementData = objectArray1;
      // Undeclared exception!
      try { 
        objectArray0.get((-1569));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1569
         //
         verifyException("com.zappos.json.util.ObjectArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ObjectArray objectArray0 = new ObjectArray();
      Integer[] integerArray0 = new Integer[1];
      objectArray0.elementData = (Object[]) integerArray0;
      // Undeclared exception!
      try { 
        objectArray0.add(objectArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // com.zappos.json.util.ObjectArray
         //
         verifyException("com.zappos.json.util.ObjectArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Object object0 = new Object();
      ObjectArray objectArray0 = new ObjectArray();
      Integer integer0 = new Integer((-2454));
      Object[] objectArray1 = new Object[0];
      objectArray0.elementData = objectArray1;
      objectArray0.add(integer0);
      objectArray0.add(object0);
      Object object1 = objectArray0.get(1);
      assertSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Object object0 = new Object();
      ObjectArray objectArray0 = new ObjectArray();
      Integer integer0 = new Integer((-2454));
      Object[] objectArray1 = new Object[0];
      objectArray0.elementData = objectArray1;
      objectArray0.add(integer0);
      objectArray0.add(object0);
      objectArray0.add(integer0);
      objectArray0.add(integer0);
      objectArray0.add((Object) null);
      boolean boolean0 = objectArray0.add(integer0);
      assertEquals(6, objectArray0.size());
      assertTrue(boolean0);
  }
}
