/*
 * This file was automatically generated by EvoSuite
 * Thu Jan 25 14:07:05 GMT 2024
 */

package com.zappos.json.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.zappos.json.ZapposJson;
import com.zappos.json.util.JsonUtils;
import java.io.CharArrayWriter;
import java.io.IOException;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsonUtils_ESTest extends JsonUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ZapposJson zapposJson0 = ZapposJson.getInstance("*ai\"!ww'{-g3*\"*O[7");
      // Undeclared exception!
      try { 
        JsonUtils.unescape(zapposJson0, (CharSequence) "&", (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ZapposJson zapposJson0 = ZapposJson.getInstance("f[lX;J:ziZx\"");
      String string0 = JsonUtils.unescape(zapposJson0, (CharSequence) "f[lX;J:ziZx\"");
      assertEquals("f[lX;J:ziZx\"", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ZapposJson zapposJson0 = ZapposJson.getInstance();
      CharBuffer charBuffer0 = CharBuffer.allocate(9);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0, 0, 0);
      String string0 = JsonUtils.escape(zapposJson0, (CharSequence) charBuffer1);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ZapposJson zapposJson0 = ZapposJson.getInstance();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write(9983);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      JsonUtils.unescape(zapposJson0, (CharSequence) stringBuffer0, (Writer) stringWriter0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ZapposJson zapposJson0 = ZapposJson.getInstance();
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        JsonUtils.unescape(zapposJson0, (CharSequence) "*aim\"!ww'{-g3*\"*O[7", (Writer) pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "\\u";
      ZapposJson zapposJson0 = ZapposJson.getInstance();
      // Undeclared exception!
      try { 
        JsonUtils.unescape(zapposJson0, (CharSequence) string0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ZapposJson zapposJson0 = ZapposJson.getInstance();
      // Undeclared exception!
      try { 
        JsonUtils.unescape(zapposJson0, (CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ZapposJson zapposJson0 = ZapposJson.getInstance();
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer charBuffer0 = CharBuffer.allocate(9983);
      JsonUtils.escape(zapposJson0, (CharSequence) charBuffer0, (Writer) stringWriter0);
      // Undeclared exception!
      JsonUtils.escape(zapposJson0, (CharSequence) charBuffer0, (Writer) stringWriter0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ZapposJson zapposJson0 = ZapposJson.getInstance();
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        JsonUtils.escape(zapposJson0, (CharSequence) "$u@],C=p25_^znH8,*Z", (Writer) pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ZapposJson zapposJson0 = ZapposJson.getInstance();
      CharBuffer charBuffer0 = CharBuffer.allocate(8233);
      String string0 = JsonUtils.escape(zapposJson0, (CharSequence) charBuffer0);
      // Undeclared exception!
      JsonUtils.escape(zapposJson0, (CharSequence) string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonUtils.escape((ZapposJson) null, (CharSequence) "&");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ZapposJson zapposJson0 = ZapposJson.getInstance("*ai\"!ww'{-g3*\"*O[7");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(5);
      JsonUtils.unescape(zapposJson0, (CharSequence) "*ai\"!ww'{-g3*\"*O[7", (Writer) charArrayWriter0);
      assertEquals(19, charArrayWriter0.size());
      assertEquals("*ai\"!ww'{-g3*\"*O[7", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(8232);
      ZapposJson zapposJson0 = ZapposJson.getInstance();
      JsonUtils.escape(zapposJson0, (CharSequence) "\u2028& \u2028", (Writer) stringWriter0);
      assertEquals("\\u2028& \\u2028", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ZapposJson zapposJson0 = ZapposJson.getInstance(".g");
      StringWriter stringWriter0 = new StringWriter(1948);
      stringWriter0.write((-4019));
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      JsonUtils.escape(zapposJson0, (CharSequence) stringBuffer0, (Writer) stringWriter0);
      assertEquals(2, stringBuffer0.length());
      assertEquals("\uF04D\uF04D", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ZapposJson zapposJson0 = ZapposJson.getInstance("*aim\"!ww'{-g3*\"*O[7");
      // Undeclared exception!
      try { 
        JsonUtils.escape(zapposJson0, (CharSequence) "*aim\"!ww'{-g3*\"*O[7", (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ZapposJson zapposJson0 = ZapposJson.getInstance();
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("$u@],C=p25\\_^znH8,*Z");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      String string0 = JsonUtils.unescape(zapposJson0, (CharSequence) charBuffer0);
      assertEquals("$u@],C=p25_^znH8,*Z", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write(128);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      ZapposJson zapposJson0 = ZapposJson.getInstance("KU/\";l");
      String string0 = JsonUtils.escape(zapposJson0, (CharSequence) stringBuffer0);
      assertEquals("\u0080", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ZapposJson zapposJson0 = ZapposJson.getInstance("*ai\"!ww'{-g3*\"*O[7");
      String string0 = JsonUtils.escape(zapposJson0, (CharSequence) "*ai\"!ww'{-g3*\"*O[7");
      assertEquals("*ai\\\"!ww'{-g3*\\\"*O[7", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JsonUtils jsonUtils0 = new JsonUtils();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ZapposJson zapposJson0 = ZapposJson.getInstance("");
      String string0 = JsonUtils.unescape(zapposJson0, (CharSequence) "");
      assertEquals("", string0);
  }
}
