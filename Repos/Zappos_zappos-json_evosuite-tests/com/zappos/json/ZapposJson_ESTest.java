/*
 * This file was automatically generated by EvoSuite
 * Thu Jan 25 14:19:12 GMT 2024
 */

package com.zappos.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.zappos.json.JsonConfig;
import com.zappos.json.ZapposJson;
import com.zappos.json.format.JavaDateFormatter;
import com.zappos.json.format.ValueFormatter;
import java.io.File;
import java.io.PipedReader;
import java.io.Reader;
import java.io.StringReader;
import java.io.Writer;
import java.lang.reflect.Array;
import java.sql.Timestamp;
import java.time.Instant;
import java.time.chrono.HijrahEra;
import java.util.Date;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ZapposJson_ESTest extends ZapposJson_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ZapposJson zapposJson0 = new ZapposJson();
      Class<HijrahEra>[] classArray0 = (Class<HijrahEra>[]) Array.newInstance(Class.class, 0);
      zapposJson0.debug("[]", classArray0);
      assertEquals(0, classArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ZapposJson.ZapposJsonSingleton zapposJson_ZapposJsonSingleton0 = ZapposJson.ZapposJsonSingleton.INSTANCE;
      ZapposJson zapposJson0 = zapposJson_ZapposJsonSingleton0.zapposJson;
      Instant instant0 = MockInstant.ofEpochSecond(0L);
      Timestamp timestamp0 = Timestamp.from(instant0);
      String string0 = zapposJson0.toJson((Object) timestamp0);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ZapposJson zapposJson0 = ZapposJson.getInstance();
      StringReader stringReader0 = new StringReader("Invalid character: ");
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        zapposJson0.fromJson((Reader) stringReader0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // bean introspection failed
         //
         verifyException("com.zappos.json.JsonBeanIntrospector", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ZapposJson.ZapposJsonSingleton zapposJson_ZapposJsonSingleton0 = ZapposJson.ZapposJsonSingleton.INSTANCE;
      ZapposJson zapposJson0 = zapposJson_ZapposJsonSingleton0.get();
      Class<Locale.Category> class0 = Locale.Category.class;
      // Undeclared exception!
      try { 
        zapposJson0.fromJson("#:%a\"FPyS[", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.IllegalArgumentException: No enum constant java.util.Locale.Category.#:%a\"FPyS[
         //
         verifyException("com.zappos.json.ZapposJson", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ZapposJson zapposJson0 = new ZapposJson(true);
      Class<Date> class0 = Date.class;
      zapposJson0.deregister(class0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ZapposJson zapposJson0 = new ZapposJson();
      JsonConfig.WriterConfig jsonConfig_WriterConfig0 = JsonConfig.WriterConfig.WRITE_ENUM_USING_NAME;
      boolean boolean0 = zapposJson0.is(jsonConfig_WriterConfig0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ZapposJson zapposJson0 = ZapposJson.getInstance();
      JsonConfig.ReaderConfig jsonConfig_ReaderConfig0 = JsonConfig.ReaderConfig.READ_ENUM_USING_NAME;
      boolean boolean0 = zapposJson0.is(jsonConfig_ReaderConfig0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ZapposJson zapposJson0 = new ZapposJson(true);
      Class<Date> class0 = Date.class;
      ValueFormatter<Object> valueFormatter0 = zapposJson0.getValueFormatter(class0);
      assertNotNull(valueFormatter0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ZapposJson zapposJson0 = new ZapposJson();
      // Undeclared exception!
      try { 
        zapposJson0.toJson((Object) zapposJson0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // javassist/ClassPool
         //
         verifyException("com.zappos.json.JsonWriterCodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ZapposJson zapposJson0 = new ZapposJson();
      // Undeclared exception!
      try { 
        zapposJson0.register((Class<?>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zappos.json.ZapposJson", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ZapposJson zapposJson0 = ZapposJson.getInstance();
      Class<Date>[] classArray0 = (Class<Date>[]) Array.newInstance(Class.class, 1);
      Class<Date> class0 = Date.class;
      classArray0[0] = class0;
      // Undeclared exception!
      try { 
        zapposJson0.register(classArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // javassist/ClassPool
         //
         verifyException("com.zappos.json.JsonWriterCodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Date> class0 = Date.class;
      ZapposJson zapposJson0 = new ZapposJson();
      // Undeclared exception!
      try { 
        zapposJson0.fromJson("", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"\"
         //
         verifyException("com.zappos.json.ZapposJson", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ZapposJson zapposJson0 = ZapposJson.getInstance();
      Class<Date> class0 = Date.class;
      // Undeclared exception!
      try { 
        zapposJson0.fromJson("", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NumberFormatException: For input string: \"\"
         //
         verifyException("com.zappos.json.ZapposJson", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ZapposJson zapposJson0 = ZapposJson.getInstance();
      // Undeclared exception!
      try { 
        zapposJson0.format((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zappos.json.ZapposJson", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ZapposJson.ZapposJsonSingleton zapposJson_ZapposJsonSingleton0 = ZapposJson.ZapposJsonSingleton.INSTANCE;
      ZapposJson zapposJson0 = zapposJson_ZapposJsonSingleton0.zapposJson;
      java.sql.Date date0 = new java.sql.Date(3581L);
      // Undeclared exception!
      try { 
        zapposJson0.toJson((Object) date0, (Writer) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("com.zappos.json.ZapposJson", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ZapposJson zapposJson0 = new ZapposJson();
      // Undeclared exception!
      try { 
        zapposJson0.toJson((Object) null, (Writer) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("com.zappos.json.ZapposJson", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ZapposJson zapposJson0 = ZapposJson.getInstance("}e1F");
      assertNotNull(zapposJson0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ZapposJson.ZapposJsonSingleton zapposJson_ZapposJsonSingleton0 = ZapposJson.ZapposJsonSingleton.INSTANCE;
      ZapposJson zapposJson0 = zapposJson_ZapposJsonSingleton0.get();
      JsonConfig.WriterConfig jsonConfig_WriterConfig0 = JsonConfig.WriterConfig.WRITE_ENUM_USING_ORDINAL;
      boolean boolean0 = zapposJson0.is(jsonConfig_WriterConfig0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ZapposJson zapposJson0 = ZapposJson.getInstance();
      Class<Date> class0 = Date.class;
      // Undeclared exception!
      try { 
        zapposJson0.register(class0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // javassist/ClassPool
         //
         verifyException("com.zappos.json.JsonWriterCodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ZapposJson zapposJson0 = new ZapposJson();
      PipedReader pipedReader0 = new PipedReader();
      Class<HijrahEra> class0 = HijrahEra.class;
      // Undeclared exception!
      try { 
        zapposJson0.fromJson((Reader) pipedReader0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("com.zappos.json.ZapposJson", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ZapposJson zapposJson0 = ZapposJson.getInstance();
      StringReader stringReader0 = new StringReader(" is an unsupported type.You need a custom ValueFormatter for this type.");
      Class<HijrahEra> class0 = HijrahEra.class;
      // Undeclared exception!
      try { 
        zapposJson0.fromJson((Reader) stringReader0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.IllegalArgumentException: No enum constant java.time.chrono.HijrahEra.is an unsupported type.You need a custom ValueFormatter for this type.
         //
         verifyException("com.zappos.json.ZapposJson", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ZapposJson zapposJson0 = ZapposJson.getInstance();
      PipedReader pipedReader0 = new PipedReader();
      Class<Date> class0 = Date.class;
      // Undeclared exception!
      try { 
        zapposJson0.fromJson((Reader) pipedReader0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("com.zappos.json.ZapposJson", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ZapposJson zapposJson0 = new ZapposJson();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        zapposJson0.toJson(object0, (Writer) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // javassist/ClassPool
         //
         verifyException("com.zappos.json.JsonWriterCodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ZapposJson zapposJson0 = new ZapposJson();
      Instant instant0 = MockInstant.now();
      Date date0 = Date.from(instant0);
      String string0 = zapposJson0.format(date0);
      assertEquals("1392409281320", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ZapposJson zapposJson0 = ZapposJson.getInstance();
      Object object0 = new Object();
      String string0 = zapposJson0.format(object0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ZapposJson zapposJson0 = new ZapposJson();
      Class<Date>[] classArray0 = (Class<Date>[]) Array.newInstance(Class.class, 0);
      zapposJson0.register(classArray0);
      assertEquals(0, classArray0.length);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ZapposJson zapposJson0 = new ZapposJson();
      zapposJson0.deregisterAll();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ZapposJson zapposJson0 = new ZapposJson();
      HijrahEra hijrahEra0 = HijrahEra.AH;
      File file0 = MockFile.createTempFile("java.time.chrono.ChronoLocalDate", "java.time.chrono.ChronoLocalDate");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      zapposJson0.toJson((Object) hijrahEra0, (Writer) mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ZapposJson.ZapposJsonSingleton zapposJson_ZapposJsonSingleton0 = ZapposJson.ZapposJsonSingleton.INSTANCE;
      ZapposJson zapposJson0 = zapposJson_ZapposJsonSingleton0.zapposJson;
      // Undeclared exception!
      try { 
        zapposJson0.deregister((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zappos.json.JsonWriterCodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ZapposJson zapposJson0 = new ZapposJson(false);
      Class<Date> class0 = Date.class;
      JavaDateFormatter javaDateFormatter0 = new JavaDateFormatter();
      zapposJson0.addValueFormatter(class0, javaDateFormatter0);
      assertTrue(javaDateFormatter0.isJsString());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ZapposJson zapposJson0 = new ZapposJson();
      String string0 = zapposJson0.toJson((Object) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ZapposJson zapposJson0 = ZapposJson.getInstance();
      Class<Date>[] classArray0 = (Class<Date>[]) Array.newInstance(Class.class, 1);
      // Undeclared exception!
      try { 
        zapposJson0.register(classArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("com.zappos.json.ZapposJson", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ZapposJson zapposJson0 = new ZapposJson();
      JsonConfig.ReaderConfig jsonConfig_ReaderConfig0 = JsonConfig.ReaderConfig.READ_ENUM_USING_ORDINAL;
      zapposJson0.configure(jsonConfig_ReaderConfig0, true);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ZapposJson zapposJson0 = ZapposJson.getInstance();
      Class<Date> class0 = Date.class;
      ValueFormatter<Object> valueFormatter0 = zapposJson0.getValueFormatter(class0);
      assertNotNull(valueFormatter0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ZapposJson zapposJson0 = new ZapposJson();
      JsonConfig.ReaderConfig jsonConfig_ReaderConfig0 = JsonConfig.ReaderConfig.READ_ENUM_USING_NAME;
      boolean boolean0 = zapposJson0.is(jsonConfig_ReaderConfig0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ZapposJson zapposJson0 = new ZapposJson();
      JsonConfig.WriterConfig jsonConfig_WriterConfig0 = JsonConfig.WriterConfig.WRITE_ENUM_USING_ORDINAL;
      zapposJson0.configure(jsonConfig_WriterConfig0, false);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ZapposJson zapposJson0 = new ZapposJson();
      Class<Date> class0 = Date.class;
      zapposJson0.removeValueFormatter(class0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ZapposJson zapposJson0 = ZapposJson.getInstance();
      Class<Date> class0 = Date.class;
      // Undeclared exception!
      try { 
        zapposJson0.fromJson((String) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }
}
