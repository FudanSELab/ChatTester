/*
 * This file was automatically generated by EvoSuite
 * Thu Jan 25 14:01:13 GMT 2024
 */

package com.zappos.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.zappos.json.JsonConfig;
import com.zappos.json.JsonWriter;
import com.zappos.json.ZapposJson;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.IOException;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.time.ZoneId;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsonWriter_ESTest extends JsonWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ZapposJson zapposJson0 = ZapposJson.getInstance("TG$gvGV}05y");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, false);
      JsonWriter.writeString(zapposJson0, "TG$gvGV}05y", mockPrintWriter0);
      assertEquals("\"TG$gvGV}05y\"", charArrayWriter0.toString());
      assertEquals(13, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ZapposJson zapposJson0 = new ZapposJson(true);
      JsonConfig.ReaderConfig jsonConfig_ReaderConfig0 = JsonConfig.ReaderConfig.READ_ENUM_USING_ORDINAL;
      File file0 = MockFile.createTempFile(".next();\n", ".next();\n");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      JsonWriter.writeEnum(zapposJson0, jsonConfig_ReaderConfig0, mockFileWriter0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      // Undeclared exception!
      try { 
        JsonWriter.writeMap((ZapposJson) null, (Map<?, ?>) null, charArrayWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zappos.json.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ZapposJson zapposJson0 = ZapposJson.getInstance("Cannot find type of Map");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Cannot find type of Map");
      HashMap<Object, JsonConfig.ReaderConfig> hashMap0 = new HashMap<Object, JsonConfig.ReaderConfig>();
      JsonConfig.ReaderConfig jsonConfig_ReaderConfig0 = JsonConfig.ReaderConfig.READ_ENUM_USING_ORDINAL;
      hashMap0.put(mockPrintWriter0, jsonConfig_ReaderConfig0);
      // Undeclared exception!
      try { 
        JsonWriter.writeMap(zapposJson0, hashMap0, mockPrintWriter0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.runtime.mock.java.io.MockPrintWriter cannot be cast to java.lang.String
         //
         verifyException("com.zappos.json.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ZapposJson zapposJson0 = new ZapposJson();
      PipedWriter pipedWriter0 = new PipedWriter();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      try { 
        JsonWriter.writeMap(zapposJson0, hashMap0, pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      // Undeclared exception!
      try { 
        JsonWriter.writeIterable((ZapposJson) null, (Iterable<?>) null, charArrayWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zappos.json.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      ZapposJson zapposJson0 = ZapposJson.getInstance();
      HashSet<Object> hashSet0 = new HashSet<Object>(1011);
      hashSet0.add(charArrayWriter0);
      // Undeclared exception!
      try { 
        JsonWriter.writeIterable(zapposJson0, hashSet0, charArrayWriter0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // javassist/ClassPool
         //
         verifyException("com.zappos.json.JsonWriterCodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ZapposJson zapposJson0 = new ZapposJson();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>(8232);
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        JsonWriter.writeIterable(zapposJson0, linkedHashSet0, pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ZapposJson zapposJson0 = new ZapposJson(true);
      File file0 = MockFile.createTempFile(".next();\n", ".next();\n");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      // Undeclared exception!
      try { 
        JsonWriter.writeEnum(zapposJson0, (Enum<?>) null, mockFileWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zappos.json.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      ZapposJson zapposJson0 = new ZapposJson(false);
      // Undeclared exception!
      try { 
        JsonWriter.writeBoolean(zapposJson0, (Boolean) null, stringWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zappos.json.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      // Undeclared exception!
      try { 
        JsonWriter.writeBase64String((ZapposJson) null, byteArray0, (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zappos.json.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      // Undeclared exception!
      try { 
        JsonWriter.writeArray((boolean[]) null, (Writer) charArrayWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zappos.json.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        JsonWriter.writeArray(booleanArray0, (Writer) pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      // Undeclared exception!
      try { 
        JsonWriter.writeArray((short[]) null, (Writer) charArrayWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zappos.json.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      short[] shortArray0 = new short[0];
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        JsonWriter.writeArray(shortArray0, (Writer) pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      // Undeclared exception!
      try { 
        JsonWriter.writeArray((long[]) null, (Writer) charArrayWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zappos.json.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      long[] longArray0 = new long[6];
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        JsonWriter.writeArray(longArray0, (Writer) pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      // Undeclared exception!
      try { 
        JsonWriter.writeArray((int[]) null, (Writer) charArrayWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zappos.json.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int[] intArray0 = new int[0];
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        JsonWriter.writeArray(intArray0, (Writer) pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      // Undeclared exception!
      try { 
        JsonWriter.writeArray((float[]) null, (Writer) charArrayWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zappos.json.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      float[] floatArray0 = new float[7];
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        JsonWriter.writeArray(floatArray0, (Writer) pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      // Undeclared exception!
      try { 
        JsonWriter.writeArray((double[]) null, (Writer) charArrayWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zappos.json.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        JsonWriter.writeArray(doubleArray0, (Writer) pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      // Undeclared exception!
      try { 
        JsonWriter.writeArray((char[]) null, (Writer) charArrayWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zappos.json.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[0];
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        JsonWriter.writeArray(charArray0, (Writer) pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      ZapposJson zapposJson0 = new ZapposJson();
      // Undeclared exception!
      try { 
        JsonWriter.writeArray(zapposJson0, (Object[]) null, (Writer) charArrayWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zappos.json.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ZapposJson zapposJson0 = ZapposJson.getInstance("TG$gvGV}05y");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, false);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) charArrayWriter0;
      // Undeclared exception!
      try { 
        JsonWriter.writeArray(zapposJson0, objectArray0, (Writer) mockPrintWriter0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // javassist/ClassPool
         //
         verifyException("com.zappos.json.JsonWriterCodeGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ZapposJson zapposJson0 = new ZapposJson();
      Object[] objectArray0 = new Object[0];
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        JsonWriter.writeArray(zapposJson0, objectArray0, (Writer) pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      ZapposJson zapposJson0 = ZapposJson.getInstance((String) null);
      // Undeclared exception!
      try { 
        JsonWriter.writeString(zapposJson0, (String) null, stringWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockFile mockFile0 = new MockFile("EH|", "EH|");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      ZapposJson zapposJson0 = new ZapposJson();
      JsonWriter.writeNumber(zapposJson0, (-1L), mockFileWriter0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      double[] doubleArray0 = new double[6];
      JsonWriter.writeArray(doubleArray0, (Writer) charArrayWriter0);
      assertEquals(25, charArrayWriter0.size());
      assertEquals("[0.0,0.0,0.0,0.0,0.0,0.0]", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      double[] doubleArray0 = new double[0];
      JsonWriter.writeArray(doubleArray0, (Writer) charArrayWriter0);
      assertEquals("[]", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      float[] floatArray0 = new float[3];
      JsonWriter.writeArray(floatArray0, (Writer) charArrayWriter0);
      assertEquals(13, charArrayWriter0.size());
      assertEquals("[0.0,0.0,0.0]", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      float[] floatArray0 = new float[0];
      JsonWriter.writeArray(floatArray0, (Writer) charArrayWriter0);
      assertEquals("[]", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      long[] longArray0 = new long[6];
      JsonWriter.writeArray(longArray0, (Writer) charArrayWriter0);
      assertEquals(13, charArrayWriter0.size());
      assertEquals("[0,0,0,0,0,0]", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      long[] longArray0 = new long[0];
      JsonWriter.writeArray(longArray0, (Writer) charArrayWriter0);
      assertEquals("[]", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      int[] intArray0 = new int[0];
      JsonWriter.writeArray(intArray0, (Writer) charArrayWriter0);
      assertEquals("[]", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      int[] intArray0 = new int[3];
      JsonWriter.writeArray(intArray0, (Writer) charArrayWriter0);
      assertEquals("[0,0,0]", charArrayWriter0.toString());
      assertEquals(7, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      short[] shortArray0 = new short[3];
      JsonWriter.writeArray(shortArray0, (Writer) charArrayWriter0);
      assertEquals(7, charArrayWriter0.size());
      assertEquals("[0,0,0]", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      short[] shortArray0 = new short[0];
      JsonWriter.writeArray(shortArray0, (Writer) charArrayWriter0);
      assertEquals("[]", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      boolean[] booleanArray0 = new boolean[4];
      JsonWriter.writeArray(booleanArray0, (Writer) charArrayWriter0);
      assertEquals(25, charArrayWriter0.size());
      assertEquals("[false,false,false,false]", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      boolean[] booleanArray0 = new boolean[0];
      JsonWriter.writeArray(booleanArray0, (Writer) charArrayWriter0);
      assertEquals("[]", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      char[] charArray0 = new char[0];
      JsonWriter.writeArray(charArray0, (Writer) charArrayWriter0);
      assertEquals("[]", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      char[] charArray0 = new char[9];
      JsonWriter.writeArray(charArray0, (Writer) charArrayWriter0);
      assertEquals("[\"\\u0000\",\"\\u0000\",\"\\u0000\",\"\\u0000\",\"\\u0000\",\"\\u0000\",\"\\u0000\",\"\\u0000\",\"\\u0000\"]", charArrayWriter0.toString());
      assertEquals(82, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      ZapposJson zapposJson0 = ZapposJson.getInstance();
      Object[] objectArray0 = new Object[0];
      JsonWriter.writeArray(zapposJson0, objectArray0, (Writer) charArrayWriter0);
      assertEquals("[]", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      ZapposJson zapposJson0 = new ZapposJson();
      Object[] objectArray0 = new Object[2];
      JsonWriter.writeArray(zapposJson0, objectArray0, (Writer) charArrayWriter0);
      assertEquals(11, charArrayWriter0.size());
      assertEquals("[null,null]", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("'sCQv");
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      ZapposJson zapposJson0 = ZapposJson.getInstance();
      JsonWriter.writeMap(zapposJson0, map0, mockPrintWriter0);
      assertEquals(28, map0.size());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      ZapposJson zapposJson0 = new ZapposJson(false);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeSet<String> treeSet0 = new TreeSet<String>(comparator0);
      JsonWriter.writeIterable(zapposJson0, treeSet0, stringWriter0);
      assertEquals("[]", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ZapposJson zapposJson0 = ZapposJson.getInstance("TG$gvGV}05y");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, false);
      JsonWriter.writeBoolean(zapposJson0, (Boolean) false, mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1725);
      ZapposJson zapposJson0 = new ZapposJson(false);
      byte[] byteArray0 = new byte[0];
      JsonWriter.writeBase64String(zapposJson0, byteArray0, charArrayWriter0);
      assertEquals("\"\"", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      ZapposJson zapposJson0 = ZapposJson.getInstance("Character @ = new Character((String)@);\n");
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      // Undeclared exception!
      try { 
        JsonWriter.writeIterable(zapposJson0, set0, charArrayWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.TooManyResourcesException: Loop has been executed more times than the allowed 10000
         //
         verifyException("com.zappos.json.ZapposJson", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ZapposJson zapposJson0 = ZapposJson.getInstance("TG$gvGV}05y");
      JsonWriter jsonWriter0 = new JsonWriter(zapposJson0);
      assertEquals('\"', JsonWriter.CONST_DOUBLE_QUOTE);
  }
}
