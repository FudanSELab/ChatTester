/*
 * This file was automatically generated by EvoSuite
 * Thu Jan 25 13:29:33 GMT 2024
 */

package com.zappos.json.format;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.zappos.json.ZapposJson;
import com.zappos.json.format.BigIntegerFormatter;
import com.zappos.json.format.JavaTimeLocalDateFormatter;
import com.zappos.json.format.JavaTimestampFormatter;
import com.zappos.json.format.NoOpValueFormatter;
import java.time.Clock;
import java.time.Period;
import java.time.ZoneOffset;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.IsoChronology;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractValueFormatter_ESTest extends AbstractValueFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NoOpValueFormatter noOpValueFormatter0 = new NoOpValueFormatter();
      noOpValueFormatter0.setPattern("EW]EY<");
      noOpValueFormatter0.getPattern();
      assertTrue(noOpValueFormatter0.isJsString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NoOpValueFormatter noOpValueFormatter0 = new NoOpValueFormatter();
      noOpValueFormatter0.setPattern("");
      noOpValueFormatter0.getPattern();
      assertTrue(noOpValueFormatter0.isJsString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JavaTimeLocalDateFormatter javaTimeLocalDateFormatter0 = new JavaTimeLocalDateFormatter();
      // Undeclared exception!
      try { 
        javaTimeLocalDateFormatter0.toJsonValue((ZapposJson) null, "`&");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zappos.json.util.JsonUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NoOpValueFormatter noOpValueFormatter0 = new NoOpValueFormatter();
      // Undeclared exception!
      try { 
        noOpValueFormatter0.formatObject((ZapposJson) null, (Object) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NoOp
         //
         verifyException("com.zappos.json.format.NoOpValueFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BigIntegerFormatter bigIntegerFormatter0 = new BigIntegerFormatter();
      ZapposJson zapposJson0 = ZapposJson.getInstance();
      // Undeclared exception!
      try { 
        bigIntegerFormatter0.formatObject(zapposJson0, zapposJson0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JavaTimestampFormatter javaTimestampFormatter0 = new JavaTimestampFormatter();
      ZapposJson zapposJson0 = ZapposJson.getInstance(",bbWO21-fur>&ib");
      String string0 = javaTimestampFormatter0.toJsonValue(zapposJson0, ",bbWO21-fur>&ib");
      assertEquals("\",bbWO21-fur>&ib\"", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NoOpValueFormatter noOpValueFormatter0 = new NoOpValueFormatter();
      noOpValueFormatter0.getPattern();
      assertTrue(noOpValueFormatter0.isJsString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JavaTimeLocalDateFormatter javaTimeLocalDateFormatter0 = new JavaTimeLocalDateFormatter();
      ZapposJson zapposJson0 = ZapposJson.getInstance("VezqWorr+Eqzgsa");
      Period period0 = Period.ofDays(0);
      IsoChronology isoChronology0 = period0.getChronology();
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutesSeconds(1, 0, 1);
      Clock clock0 = MockClock.tickMinutes(zoneOffset0);
      ChronoLocalDate chronoLocalDate0 = isoChronology0.dateNow(clock0);
      String string0 = javaTimeLocalDateFormatter0.formatObject(zapposJson0, chronoLocalDate0);
      assertEquals("\"2014-02-14\"", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NoOpValueFormatter noOpValueFormatter0 = new NoOpValueFormatter();
      assertTrue(noOpValueFormatter0.isJsString());
      
      ZapposJson zapposJson0 = ZapposJson.getInstance();
      noOpValueFormatter0.setJsString(false);
      noOpValueFormatter0.toJsonValue(zapposJson0, "");
      assertFalse(noOpValueFormatter0.isJsString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NoOpValueFormatter noOpValueFormatter0 = new NoOpValueFormatter();
      boolean boolean0 = noOpValueFormatter0.isJsString();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NoOpValueFormatter noOpValueFormatter0 = new NoOpValueFormatter();
      assertTrue(noOpValueFormatter0.isJsString());
      
      noOpValueFormatter0.setJsString(false);
      boolean boolean0 = noOpValueFormatter0.isJsString();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BigIntegerFormatter bigIntegerFormatter0 = new BigIntegerFormatter();
      // Undeclared exception!
      try { 
        bigIntegerFormatter0.formatObject((ZapposJson) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zappos.json.format.BigIntegerFormatter", e);
      }
  }
}
