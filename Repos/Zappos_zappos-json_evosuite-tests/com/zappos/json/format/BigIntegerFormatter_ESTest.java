/*
 * This file was automatically generated by EvoSuite
 * Thu Jan 25 13:33:42 GMT 2024
 */

package com.zappos.json.format;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.zappos.json.ZapposJson;
import com.zappos.json.format.BigIntegerFormatter;
import com.zappos.json.format.ValueFormatter;
import java.math.BigInteger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BigIntegerFormatter_ESTest extends BigIntegerFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BigIntegerFormatter bigIntegerFormatter0 = new BigIntegerFormatter();
      ZapposJson zapposJson0 = ZapposJson.getInstance();
      BigInteger bigInteger0 = bigIntegerFormatter0.parse(zapposJson0, "0");
      assertEquals((byte)0, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BigIntegerFormatter bigIntegerFormatter0 = new BigIntegerFormatter();
      ZapposJson zapposJson0 = ZapposJson.getInstance();
      BigInteger bigInteger0 = bigIntegerFormatter0.parse(zapposJson0, "10");
      assertEquals((short)10, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BigIntegerFormatter bigIntegerFormatter0 = new BigIntegerFormatter();
      ZapposJson zapposJson0 = ZapposJson.getInstance();
      BigInteger bigInteger0 = bigIntegerFormatter0.parse(zapposJson0, "-1739128425");
      assertEquals((byte) (-105), bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BigIntegerFormatter bigIntegerFormatter0 = new BigIntegerFormatter();
      BigInteger bigInteger0 = bigIntegerFormatter0.cast((Object) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BigIntegerFormatter bigIntegerFormatter0 = new BigIntegerFormatter();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigIntegerFormatter0.cast(bigInteger0);
      assertSame(bigInteger0, bigInteger1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BigIntegerFormatter bigIntegerFormatter0 = new BigIntegerFormatter();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-100);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = bigIntegerFormatter0.cast(bigInteger0);
      assertSame(bigInteger0, bigInteger1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BigIntegerFormatter bigIntegerFormatter0 = new BigIntegerFormatter();
      ZapposJson zapposJson0 = ZapposJson.getInstance();
      try { 
        bigIntegerFormatter0.parse(zapposJson0, "Ta$w=f");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Ta$w=f\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BigIntegerFormatter bigIntegerFormatter0 = new BigIntegerFormatter();
      ZapposJson zapposJson0 = ZapposJson.getInstance();
      try { 
        bigIntegerFormatter0.parse(zapposJson0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BigIntegerFormatter bigIntegerFormatter0 = new BigIntegerFormatter();
      // Undeclared exception!
      try { 
        bigIntegerFormatter0.format((ZapposJson) null, (BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zappos.json.format.BigIntegerFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BigIntegerFormatter bigIntegerFormatter0 = new BigIntegerFormatter();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        bigIntegerFormatter0.cast(object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BigIntegerFormatter bigIntegerFormatter0 = new BigIntegerFormatter();
      ZapposJson zapposJson0 = ZapposJson.getInstance();
      BigInteger bigInteger0 = bigIntegerFormatter0.parse(zapposJson0, "-3524910708137984256");
      assertEquals((short) (-256), bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BigIntegerFormatter bigIntegerFormatter0 = new BigIntegerFormatter();
      ZapposJson zapposJson0 = ZapposJson.getInstance();
      byte[] byteArray0 = new byte[8];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      String string0 = bigIntegerFormatter0.format(zapposJson0, bigInteger0);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BigIntegerFormatter bigIntegerFormatter0 = new BigIntegerFormatter();
      byte[] byteArray0 = new byte[8];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = bigIntegerFormatter0.cast(bigInteger0);
      assertSame(bigInteger1, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BigIntegerFormatter bigIntegerFormatter0 = new BigIntegerFormatter();
      ValueFormatter<BigInteger> valueFormatter0 = bigIntegerFormatter0.newInstance();
      assertNotSame(bigIntegerFormatter0, valueFormatter0);
  }
}
