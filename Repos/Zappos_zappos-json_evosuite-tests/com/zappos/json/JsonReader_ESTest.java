/*
 * This file was automatically generated by EvoSuite
 * Thu Jan 25 13:53:16 GMT 2024
 */

package com.zappos.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.zappos.json.JsonReader;
import com.zappos.json.ZapposJson;
import java.io.IOException;
import java.io.PipedReader;
import java.io.Reader;
import java.io.StringReader;
import java.util.ArrayList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsonReader_ESTest extends JsonReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JsonReader jsonReader0 = new JsonReader((ZapposJson) null, (Reader) null);
      // Undeclared exception!
      try { 
        jsonReader0.parse();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zappos.json.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ZapposJson zapposJson0 = ZapposJson.getInstance("k.Z&&N>^?(kPH");
      StringReader stringReader0 = new StringReader("k.Z&&N>^?(kPH");
      JsonReader jsonReader0 = new JsonReader(zapposJson0, stringReader0, 0);
      // Undeclared exception!
      try { 
        jsonReader0.parse();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.zappos.json.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ZapposJson zapposJson0 = new ZapposJson();
      PipedReader pipedReader0 = new PipedReader();
      JsonReader jsonReader0 = new JsonReader(zapposJson0, pipedReader0);
      try { 
        jsonReader0.parse();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JsonReader jsonReader0 = null;
      try {
        jsonReader0 = new JsonReader((ZapposJson) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JsonReader jsonReader0 = null;
      try {
        jsonReader0 = new JsonReader((ZapposJson) null, (Reader) null, (-3724));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zappos.json.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JsonReader jsonReader0 = new JsonReader((ZapposJson) null, "',' or '}'");
      // Undeclared exception!
      try { 
        jsonReader0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unexpected character[offset:4, line: 1, column: 4
         //
         verifyException("com.zappos.json.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ZapposJson zapposJson0 = ZapposJson.getInstance("p-LZ");
      JsonReader jsonReader0 = new JsonReader(zapposJson0, "[]");
      ArrayList arrayList0 = (ArrayList)jsonReader0.parse();
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ZapposJson zapposJson0 = ZapposJson.getInstance();
      JsonReader jsonReader0 = new JsonReader(zapposJson0, "  writer.write(CONST_COMMA);\n");
      // Undeclared exception!
      try { 
        jsonReader0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected value[offset:2, line: 1, column: 2
         //
         verifyException("com.zappos.json.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ZapposJson zapposJson0 = ZapposJson.getInstance();
      JsonReader jsonReader0 = new JsonReader(zapposJson0, "9t+<j");
      // Undeclared exception!
      try { 
        jsonReader0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unexpected character[offset:1, line: 1, column: 1
         //
         verifyException("com.zappos.json.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JsonReader jsonReader0 = new JsonReader((ZapposJson) null, "8r>{-~,sl~)");
      // Undeclared exception!
      try { 
        jsonReader0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unexpected character[offset:1, line: 1, column: 1
         //
         verifyException("com.zappos.json.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JsonReader jsonReader0 = new JsonReader((ZapposJson) null, "5D#Y~s^a");
      // Undeclared exception!
      try { 
        jsonReader0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unexpected character[offset:1, line: 1, column: 1
         //
         verifyException("com.zappos.json.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JsonReader jsonReader0 = new JsonReader((ZapposJson) null, "3");
      jsonReader0.parse();
      // Undeclared exception!
      try { 
        jsonReader0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unexpected character[offset:2, line: 1, column: 2
         //
         verifyException("com.zappos.json.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ZapposJson zapposJson0 = ZapposJson.getInstance();
      JsonReader jsonReader0 = new JsonReader(zapposJson0, "1mjGNg\"!a");
      // Undeclared exception!
      try { 
        jsonReader0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unexpected character[offset:1, line: 1, column: 1
         //
         verifyException("com.zappos.json.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ZapposJson zapposJson0 = new ZapposJson();
      JsonReader jsonReader0 = new JsonReader(zapposJson0, "-#;yx>R6dC*~*>}9");
      // Undeclared exception!
      try { 
        jsonReader0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected digit[offset:1, line: 1, column: 1
         //
         verifyException("com.zappos.json.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JsonReader jsonReader0 = new JsonReader((ZapposJson) null, "\"0b VxFWK");
      // Undeclared exception!
      try { 
        jsonReader0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unexpected end of input[offset:9, line: 1, column: 8
         //
         verifyException("com.zappos.json.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JsonReader jsonReader0 = new JsonReader((ZapposJson) null, "6BM?`%>k/");
      // Undeclared exception!
      try { 
        jsonReader0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unexpected character[offset:1, line: 1, column: 1
         //
         verifyException("com.zappos.json.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JsonReader jsonReader0 = new JsonReader((ZapposJson) null, "73");
      Object object0 = jsonReader0.parse();
      assertEquals("73", object0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JsonReader jsonReader0 = new JsonReader((ZapposJson) null, "['6L0h>!4|Ip7IJyCh");
      // Undeclared exception!
      try { 
        jsonReader0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unexpected end of input[offset:18, line: 1, column: 17
         //
         verifyException("com.zappos.json.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JsonReader jsonReader0 = new JsonReader((ZapposJson) null, "tM{WR#+l2I'");
      // Undeclared exception!
      try { 
        jsonReader0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected 'r'[offset:1, line: 1, column: 1
         //
         verifyException("com.zappos.json.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ZapposJson zapposJson0 = new ZapposJson();
      JsonReader jsonReader0 = new JsonReader(zapposJson0, "fvC*");
      // Undeclared exception!
      try { 
        jsonReader0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected 'a'[offset:1, line: 1, column: 1
         //
         verifyException("com.zappos.json.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JsonReader jsonReader0 = new JsonReader((ZapposJson) null, "naxe");
      // Undeclared exception!
      try { 
        jsonReader0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected 'u'[offset:1, line: 1, column: 1
         //
         verifyException("com.zappos.json.JsonReader", e);
      }
  }
}
