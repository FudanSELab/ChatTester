/*
 * This file was automatically generated by EvoSuite
 * Thu Jan 25 13:48:09 GMT 2024
 */

package com.zappos.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.zappos.json.JsonBeanAttribute;
import com.zappos.json.annot.JsonEnum;
import com.zappos.json.format.JavaDateFormatter;
import com.zappos.json.format.ValueFormatter;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsonBeanAttribute_ESTest extends JsonBeanAttribute_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();
      JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setJsonKey("U/e9SQZ'~VQDTn");
      String string0 = jsonBeanAttribute1.getJsonKey();
      assertEquals("U/e9SQZ'~VQDTn", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();
      jsonBeanAttribute0.setFormatterPattern("PFb|,_");
      String string0 = jsonBeanAttribute0.getFormatterPattern();
      assertEquals("PFb|,_", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();
      JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setFormatterPattern("");
      String string0 = jsonBeanAttribute1.getFormatterPattern();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();
      JsonEnum.EnumValue jsonEnum_EnumValue0 = JsonEnum.EnumValue.STRING;
      JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setEnumValue(jsonEnum_EnumValue0);
      JsonEnum.EnumValue jsonEnum_EnumValue1 = jsonBeanAttribute1.getEnumValue();
      assertEquals(JsonEnum.EnumValue.STRING, jsonEnum_EnumValue1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();
      JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setAttributeKey("q>vG|5PRl$yzt");
      String string0 = jsonBeanAttribute1.getAttributeKey();
      assertEquals("q>vG|5PRl$yzt", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();
      // Undeclared exception!
      try { 
        jsonBeanAttribute0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.zappos.json.JsonBeanAttribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();
      String string0 = jsonBeanAttribute0.getFormatterPattern();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();
      Field field0 = jsonBeanAttribute0.getField();
      assertNull(field0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();
      JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setAttributeKey("");
      String string0 = jsonBeanAttribute1.getAttributeKey();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();
      Method method0 = jsonBeanAttribute0.getMethod();
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();
      String string0 = jsonBeanAttribute0.getAttributeKey();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();
      JsonEnum.EnumValue jsonEnum_EnumValue0 = jsonBeanAttribute0.getEnumValue();
      JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setEnumValue(jsonEnum_EnumValue0);
      assertNull(jsonBeanAttribute1.getEnumValue());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();
      JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setJsonKey("");
      String string0 = jsonBeanAttribute1.getJsonKey();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();
      Class<JavaDateFormatter> class0 = JavaDateFormatter.class;
      JsonBeanAttribute jsonBeanAttribute1 = jsonBeanAttribute0.setFormatterClass(class0);
      Class<? extends ValueFormatter<?>> class1 = jsonBeanAttribute1.getFormatterClass();
      assertEquals("class com.zappos.json.format.JavaDateFormatter", class1.toString());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute((Method) null, (Field) null, "-QnH");
      Class<? extends ValueFormatter<?>> class0 = jsonBeanAttribute0.getFormatterClass();
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JsonBeanAttribute jsonBeanAttribute0 = new JsonBeanAttribute();
      String string0 = jsonBeanAttribute0.getJsonKey();
      assertNull(string0);
  }
}
