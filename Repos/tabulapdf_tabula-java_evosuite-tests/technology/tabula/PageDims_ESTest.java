/*
 * This file was automatically generated by EvoSuite
 * Sat Feb 10 09:56:04 GMT 2024
 */

package technology.tabula;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import technology.tabula.PageDims;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PageDims_ESTest extends PageDims_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PageDims pageDims0 = PageDims.of(0.0F, 0.0F, 0.0F, (-2690.3118F));
      float float0 = pageDims0.getWidth();
      assertEquals(0.0F, pageDims0.getTop(), 0.01F);
      assertEquals(0.0F, pageDims0.getLeft(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((-2690.3118F), pageDims0.getHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PageDims pageDims0 = PageDims.of(1380.5F, 0.0F, 1380.5F, 0.0F);
      float float0 = pageDims0.getWidth();
      assertEquals(1380.5F, float0, 0.01F);
      assertEquals(0.0F, pageDims0.getHeight(), 0.01F);
      assertEquals(1380.5F, pageDims0.getTop(), 0.01F);
      assertEquals(0.0F, pageDims0.getLeft(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PageDims pageDims0 = PageDims.of(0.0F, 0.0F, 0.0F, 0.0F);
      float float0 = pageDims0.getTop();
      assertEquals(0.0F, pageDims0.getWidth(), 0.01F);
      assertEquals(0.0F, pageDims0.getLeft(), 0.01F);
      assertEquals(0.0F, pageDims0.getHeight(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PageDims pageDims0 = PageDims.of(1440.61F, (-1803.6F), 0.0F, 0.0F);
      float float0 = pageDims0.getTop();
      assertEquals(1440.61F, float0, 0.01F);
      assertEquals(0.0F, pageDims0.getWidth(), 0.01F);
      assertEquals((-1803.6F), pageDims0.getLeft(), 0.01F);
      assertEquals(0.0F, pageDims0.getHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PageDims pageDims0 = PageDims.of(0.0F, 1.0F, 1.0F, 0.0F);
      float float0 = pageDims0.getLeft();
      assertEquals(0.0F, pageDims0.getTop(), 0.01F);
      assertEquals(1.0F, float0, 0.01F);
      assertEquals(0.0F, pageDims0.getHeight(), 0.01F);
      assertEquals(1.0F, pageDims0.getWidth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PageDims pageDims0 = PageDims.of((-2962.7F), (-2962.7F), 275.9F, 477.6F);
      float float0 = pageDims0.getLeft();
      assertEquals(477.6F, pageDims0.getHeight(), 0.01F);
      assertEquals((-2962.7F), pageDims0.getTop(), 0.01F);
      assertEquals(275.9F, pageDims0.getWidth(), 0.01F);
      assertEquals((-2962.7F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PageDims pageDims0 = PageDims.of(0.0F, 0.0F, 0.0F, 0.0F);
      float float0 = pageDims0.getHeight();
      assertEquals(0.0F, pageDims0.getLeft(), 0.01F);
      assertEquals(0.0F, pageDims0.getWidth(), 0.01F);
      assertEquals(0.0F, pageDims0.getTop(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PageDims pageDims0 = PageDims.of(493.8F, (-2760.9F), (-2760.9F), (-2902.3933F));
      float float0 = pageDims0.getHeight();
      assertEquals((-2760.9F), pageDims0.getLeft(), 0.01F);
      assertEquals((-2760.9F), pageDims0.getWidth(), 0.01F);
      assertEquals((-2902.3933F), float0, 0.01F);
      assertEquals(493.8F, pageDims0.getTop(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PageDims pageDims0 = PageDims.of((-2664.33F), 0.0F, (-2664.33F), 1050.207F);
      float float0 = pageDims0.getHeight();
      assertEquals(0.0F, pageDims0.getLeft(), 0.01F);
      assertEquals((-2664.33F), pageDims0.getWidth(), 0.01F);
      assertEquals(1050.207F, float0, 0.01F);
      assertEquals((-2664.33F), pageDims0.getTop(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PageDims pageDims0 = PageDims.of((-0.7453074F), (-0.7453074F), (-0.7453074F), (-0.7453074F));
      float float0 = pageDims0.getWidth();
      assertEquals((-0.7453074F), float0, 0.01F);
      assertEquals((-0.7453074F), pageDims0.getTop(), 0.01F);
      assertEquals((-0.7453074F), pageDims0.getLeft(), 0.01F);
      assertEquals((-0.7453074F), pageDims0.getHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PageDims pageDims0 = PageDims.of((-188.25131F), (-188.25131F), (-188.25131F), (-188.25131F));
      float float0 = pageDims0.getTop();
      assertEquals((-188.25131F), pageDims0.getWidth(), 0.01F);
      assertEquals((-188.25131F), float0, 0.01F);
      assertEquals((-188.25131F), pageDims0.getHeight(), 0.01F);
      assertEquals((-188.25131F), pageDims0.getLeft(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PageDims pageDims0 = PageDims.of(0.0F, 0.0F, 0.0F, 0.0F);
      float float0 = pageDims0.getLeft();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0F, pageDims0.getWidth(), 0.01F);
      assertEquals(0.0F, pageDims0.getTop(), 0.01F);
      assertEquals(0.0F, pageDims0.getHeight(), 0.01F);
  }
}
