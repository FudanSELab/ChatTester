/*
 * This file was automatically generated by EvoSuite
 * Sat Feb 10 10:09:27 GMT 2024
 */

package technology.tabula;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Point;
import java.awt.geom.Point2D;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import technology.tabula.Ruling;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Ruling_ESTest extends Ruling_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Ruling> linkedList0 = new LinkedList<Ruling>();
      linkedList0.offerFirst((Ruling) null);
      linkedList0.offerFirst((Ruling) null);
      // Undeclared exception!
      try { 
        Ruling.collapseOrientedRulings((List<Ruling>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("technology.tabula.Ruling$4", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Ruling ruling0 = null;
      try {
        ruling0 = new Ruling((Point2D) null, (Point2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.geom.Line2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Point point0 = new Point();
      Ruling ruling0 = null;
      try {
        ruling0 = new Ruling(point0, point0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/cli/ParseException
         //
         verifyException("technology.tabula.Ruling", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Ruling> linkedList0 = new LinkedList<Ruling>();
      linkedList0.offerFirst((Ruling) null);
      // Undeclared exception!
      try { 
        Ruling.collapseOrientedRulings((List<Ruling>) linkedList0, (-1385));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("technology.tabula.Ruling", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Ruling> linkedList0 = new LinkedList<Ruling>();
      List<Ruling> list0 = Ruling.collapseOrientedRulings((List<Ruling>) linkedList0, (-2106073439));
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Ruling> linkedList0 = new LinkedList<Ruling>();
      List<Ruling> list0 = Ruling.collapseOrientedRulings((List<Ruling>) linkedList0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Ruling> linkedList0 = new LinkedList<Ruling>();
      linkedList0.offerFirst((Ruling) null);
      LinkedList<Ruling> linkedList1 = new LinkedList<Ruling>();
      // Undeclared exception!
      try { 
        Ruling.findIntersections(linkedList1, linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("technology.tabula.Ruling", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Ruling> linkedList0 = new LinkedList<Ruling>();
      linkedList0.offerFirst((Ruling) null);
      // Undeclared exception!
      try { 
        Ruling.findIntersections(linkedList0, linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("technology.tabula.Ruling", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Ruling> linkedList0 = new LinkedList<Ruling>();
      linkedList0.offerFirst((Ruling) null);
      java.awt.Rectangle rectangle0 = new java.awt.Rectangle();
      // Undeclared exception!
      try { 
        Ruling.cropRulingsToArea(linkedList0, rectangle0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("technology.tabula.Ruling", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Ruling> linkedList0 = new LinkedList<Ruling>();
      java.awt.Rectangle rectangle0 = new java.awt.Rectangle();
      List<Ruling> list0 = Ruling.cropRulingsToArea(linkedList0, rectangle0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Ruling ruling0 = null;
      try {
        ruling0 = new Ruling(1.0F, 1.0F, 1.0F, 1.0F);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/cli/ParseException
         //
         verifyException("technology.tabula.Ruling", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Ruling> linkedList0 = new LinkedList<Ruling>();
      Map<Point2D, Ruling[]> map0 = Ruling.findIntersections(linkedList0, linkedList0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Ruling ruling0 = null;
      try {
        ruling0 = new Ruling((-1659.1841F), (-1659.1841F), (-1659.1841F), (-1659.1841F));
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/cli/ParseException
         //
         verifyException("technology.tabula.Ruling", e);
      }
  }
}
