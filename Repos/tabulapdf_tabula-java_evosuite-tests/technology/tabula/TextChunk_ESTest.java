/*
 * This file was automatically generated by EvoSuite
 * Sat Feb 10 10:15:23 GMT 2024
 */

package technology.tabula;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.geom.Rectangle2D;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import technology.tabula.Line;
import technology.tabula.Rectangle;
import technology.tabula.TextChunk;
import technology.tabula.TextElement;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TextChunk_ESTest extends TextChunk_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TextChunk textChunk0 = new TextChunk(4727.0F, (-2412.1F), 4727.0F, (-2412.1F));
      ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();
      arrayList0.add(textChunk0);
      arrayList0.add(textChunk0);
      arrayList0.add(textChunk0);
      TextChunk.groupByLines(arrayList0);
      assertEquals(2, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TextChunk textChunk0 = new TextChunk((-368.31784F), (-2411.6064F), (-368.31784F), (-2411.6064F));
      ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();
      arrayList0.add(textChunk0);
      arrayList0.add(textChunk0);
      arrayList0.add(textChunk0);
      TextChunk.groupByLines(arrayList0);
      assertEquals(2, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TextChunk textChunk0 = TextChunk.EMPTY;
      textChunk0.setRect(4139.800386453927, 2.0, 2.0, 2.0);
      textChunk0.hashCode();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TextChunk textChunk0 = TextChunk.EMPTY;
      // Undeclared exception!
      try { 
        textChunk0.splitAt(15);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("technology.tabula.TextChunk", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TextChunk textChunk0 = new TextChunk(0.0F, (-587.9411F), (-587.9411F), (-155.6468F));
      textChunk0.merge(textChunk0);
      assertEquals((-155.6468F), textChunk0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TextChunk textChunk0 = TextChunk.EMPTY;
      TextChunk textChunk1 = new TextChunk((-1469.711F), (-1469.711F), 674.667F, (-383.95178F));
      textChunk0.merge(textChunk1);
      assertEquals(1469.711F, textChunk0.width, 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TextChunk textChunk0 = TextChunk.EMPTY;
      TextChunk textChunk1 = textChunk0.merge(textChunk0);
      assertEquals(0.0, textChunk1.getCenterY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TextChunk textChunk0 = TextChunk.EMPTY;
      TextChunk textChunk1 = TextChunk.EMPTY;
      TextChunk textChunk2 = textChunk0.merge(textChunk1);
      TextChunk textChunk3 = textChunk0.EMPTY.merge(textChunk2);
      textChunk1.intersects((Rectangle2D) textChunk3);
      ArrayList<TextElement> arrayList0 = new ArrayList<TextElement>();
      textChunk0.add((List<TextElement>) arrayList0);
      TextChunk textChunk4 = textChunk1.merge(textChunk3);
      Character[] characterArray0 = new Character[2];
      Character character0 = new Character(',');
      characterArray0[0] = character0;
      Character character1 = new Character(',');
      textChunk4.setRect((Rectangle2D) textChunk0);
      characterArray0[1] = character1;
      textChunk4.isSameChar(characterArray0);
      textChunk4.isSameChar(character0);
      textChunk4.isLtrDominant();
      Boolean boolean0 = Boolean.FALSE;
      // Undeclared exception!
      try { 
        textChunk1.groupByDirectionality(boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("technology.tabula.TextChunk", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TextChunk textChunk0 = new TextChunk(1.0F, 1.0F, 1.0F, 0.0F);
      TextChunk textChunk1 = new TextChunk(2674.666F, 1453.0F, (-585.3F), 319.1F);
      textChunk0.merge(textChunk1);
      assertEquals(2992.766F, textChunk0.height, 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TextChunk textChunk0 = TextChunk.EMPTY;
      // Undeclared exception!
      try { 
        textChunk0.merge((TextChunk) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("technology.tabula.Rectangle", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TextChunk textChunk0 = TextChunk.EMPTY;
      // Undeclared exception!
      try { 
        textChunk0.isSameChar((Character[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TextChunk textChunk0 = TextChunk.EMPTY;
      Character character0 = Character.valueOf('8');
      textChunk0.isSameChar(character0);
      Character character1 = null;
      int int0 = (-3901);
      List<TextChunk> list0 = textChunk0.squeeze(character1, int0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        TextChunk.groupByLines((List<TextChunk>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("technology.tabula.TextChunk", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        TextChunk.allSameChar((List<TextChunk>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("technology.tabula.TextChunk", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TextChunk textChunk0 = null;
      try {
        textChunk0 = new TextChunk((List<TextElement>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("technology.tabula.TextChunk", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TextChunk textChunk0 = TextChunk.EMPTY;
      List<TextElement> list0 = textChunk0.getTextElements();
      TextChunk textChunk1 = null;
      try {
        textChunk1 = new TextChunk(list0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TextChunk textChunk0 = new TextChunk(4727.0F, (-2412.1F), 4727.0F, (-2412.1F));
      ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();
      arrayList0.add(textChunk0);
      arrayList0.add(textChunk0);
      boolean boolean0 = TextChunk.allSameChar(arrayList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TextChunk textChunk0 = TextChunk.EMPTY;
      boolean boolean0 = textChunk0.equals(textChunk0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TextChunk textChunk0 = TextChunk.EMPTY;
      Character character0 = Character.valueOf('W');
      textChunk0.squeeze(character0, 13);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TextChunk textChunk0 = TextChunk.EMPTY;
      Character character0 = Character.valueOf('$');
      textChunk0.squeeze(character0, (-1631));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TextChunk textChunk0 = TextChunk.EMPTY;
      textChunk0.getText();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TextChunk textChunk0 = TextChunk.EMPTY;
      LinkedList<TextElement> linkedList0 = new LinkedList<TextElement>();
      linkedList0.add((TextElement) null);
      // Undeclared exception!
      try { 
        textChunk0.add((List<TextElement>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.geom.Rectangle2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TextChunk textChunk0 = TextChunk.EMPTY;
      Boolean boolean0 = Boolean.valueOf(false);
      // Undeclared exception!
      try { 
        textChunk0.EMPTY.groupByDirectionality(boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("technology.tabula.TextChunk", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TextChunk textChunk0 = TextChunk.EMPTY;
      ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();
      arrayList0.add(textChunk0);
      arrayList0.add(textChunk0);
      // Undeclared exception!
      try { 
        TextChunk.groupByLines(arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("technology.tabula.TextChunk", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();
      List<Line> list0 = TextChunk.groupByLines(arrayList0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();
      TextChunk textChunk0 = TextChunk.EMPTY;
      arrayList0.add(textChunk0);
      boolean boolean0 = TextChunk.allSameChar(arrayList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TextChunk textChunk0 = TextChunk.EMPTY;
      TextChunk textChunk1 = new TextChunk(0.0F, 0.0F, 0.0F, 0.0F);
      textChunk1.compareTo(textChunk0);
      assertTrue(textChunk1.equals((Object)textChunk0));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TextChunk textChunk0 = TextChunk.EMPTY;
      Rectangle rectangle0 = new Rectangle();
      int int0 = textChunk0.EMPTY.compareTo(rectangle0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TextChunk textChunk0 = TextChunk.EMPTY;
      ArrayList<TextChunk> arrayList0 = new ArrayList<TextChunk>();
      boolean boolean0 = textChunk0.equals(arrayList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TextChunk textChunk0 = TextChunk.EMPTY;
      Object object0 = textChunk0.clone();
      boolean boolean0 = textChunk0.EMPTY.equals(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TextChunk textChunk0 = TextChunk.EMPTY;
      int int0 = 1;
      // Undeclared exception!
      try { 
        textChunk0.splitAt(1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("technology.tabula.TextChunk", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TextChunk textChunk0 = TextChunk.EMPTY;
      // Undeclared exception!
      try { 
        textChunk0.splitAt((-1477));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("technology.tabula.TextChunk", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TextChunk textChunk0 = TextChunk.EMPTY;
      textChunk0.getText(false);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TextChunk textChunk0 = null;
      try {
        textChunk0 = new TextChunk((TextElement) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("technology.tabula.TextChunk", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TextChunk textChunk0 = TextChunk.EMPTY;
      // Undeclared exception!
      try { 
        textChunk0.add((TextElement) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.geom.Rectangle2D", e);
      }
  }
}
