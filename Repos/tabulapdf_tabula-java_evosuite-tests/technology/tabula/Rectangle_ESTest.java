/*
 * This file was automatically generated by EvoSuite
 * Sat Feb 10 10:03:59 GMT 2024
 */

package technology.tabula;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import technology.tabula.Rectangle;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Rectangle_ESTest extends Rectangle_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();
      linkedList0.add(rectangle0);
      linkedList0.push(rectangle0);
      rectangle0.add((double) 3.4028235E38F, (-2851.865300569));
      Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);
      assertTrue(linkedList0.contains(rectangle1));
      assertEquals(0.0F, rectangle1.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();
      Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);
      rectangle0.setLeft((-1137.2F));
      rectangle0.setBottom((-1.0F));
      assertEquals((-1137.2F), rectangle0.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      rectangle0.x = 5492.6597F;
      rectangle0.setLeft((-2276.9243F));
      assertEquals((-2276.9243F), rectangle0.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(1.0F, (-486.23865F), 1.0F, 2254.05F);
      rectangle0.setFrameFromCenter((double) 2.0F, (double) 2.0F, 2440.0, (double) 2254.05F);
      rectangle0.setRight((-1));
      assertEquals(4504.1F, rectangle0.height, 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      rectangle0.setBottom((-1));
      rectangle0.setTop(1020.68054F);
      assertEquals(-0.0F, rectangle0.getArea(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();
      Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);
      rectangle0.setTop((-3179.1138F));
      rectangle0.setLeft(1354.0F);
      assertEquals(1354.0F, rectangle0.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      rectangle0.y = (-2670.0F);
      rectangle0.setTop(1020.68054F);
      assertEquals(1020.68054F, rectangle0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);
      rectangle0.add(0.0, (double) 0.0F);
      Rectangle rectangle1 = new Rectangle(987.8F, 0.0F, 0.0F, 987.8F);
      float float0 = rectangle0.verticalOverlapRatio(rectangle1);
      assertEquals(Float.POSITIVE_INFINITY, rectangle0.height, 0.01F);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle((-1270.5645F), (-1270.5645F), 0.0F, 5916.169F);
      Rectangle rectangle1 = new Rectangle();
      float float0 = rectangle0.verticalOverlapRatio(rectangle1);
      assertEquals((-1270.5645F), rectangle0.y, 0.01F);
      assertEquals(0.0F, rectangle0.width, 0.01F);
      assertEquals(Float.NaN, float0, 0.01F);
      assertEquals((-1270.564453125), rectangle0.getCenterX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();
      Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);
      Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);
      rectangle0.setBottom(3.4028235E38F);
      rectangle1.add(0.0, (double) 0.0F);
      Rectangle rectangle2 = new Rectangle(987.8F, 0.0F, 0.0F, 987.8F);
      rectangle1.height = 3.4028235E38F;
      rectangle2.add((Rectangle2D) rectangle0);
      float float0 = rectangle1.verticalOverlapRatio(rectangle2);
      assertEquals(3.4028235E38F, rectangle2.height, 0.01F);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));
      rectangle0.add((double) (-3515.6F), (double) (-716.1035F));
      LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();
      linkedList0.push(rectangle0);
      Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);
      float float0 = rectangle0.verticalOverlapRatio(rectangle1);
      assertEquals(3515.6F, rectangle0.width, 0.01F);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));
      rectangle0.add((double) (-3515.6F), (double) (-716.40063F));
      LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();
      linkedList0.push(rectangle0);
      assertEquals(0.0F, rectangle0.height, 0.01F);
      
      Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);
      Rectangle rectangle2 = new Rectangle();
      float float0 = rectangle1.verticalOverlapRatio(rectangle2);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));
      rectangle0.add((double) (-3515.6F), (double) (-716.1035F));
      LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();
      linkedList0.push(rectangle0);
      Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);
      float float0 = rectangle1.verticalOverlapRatio(rectangle0);
      assertEquals(3515.6F, rectangle0.width, 0.01F);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);
      Rectangle rectangle1 = new Rectangle(0.0F, Float.POSITIVE_INFINITY, (-1137.2F), 12.713349F);
      boolean boolean0 = rectangle0.horizontallyOverlaps(rectangle1);
      assertEquals(3.4028235E38F, rectangle0.y, 0.01F);
      assertEquals((-14457.62F), rectangle1.getArea(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, rectangle1.x, 0.01F);
      assertFalse(boolean0);
      assertEquals(0.0F, rectangle1.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      Rectangle rectangle1 = new Rectangle();
      float float0 = rectangle0.horizontalOverlap(rectangle1);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();
      Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);
      assertEquals((-3.4028235E38F), rectangle0.width, 0.01F);
      
      rectangle0.setFrameFromCenter((-1.0), (double) Float.NEGATIVE_INFINITY, (double) Float.POSITIVE_INFINITY, 2916.991886);
      boolean boolean0 = rectangle0.verticallyOverlaps(rectangle0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      Rectangle rectangle1 = new Rectangle(0.4F, 0.0F, 0.0F, 0.0F);
      Rectangle rectangle2 = rectangle1.merge(rectangle0);
      rectangle0.setBottom(1877.9292F);
      int int0 = rectangle0.compareTo(rectangle2);
      assertEquals(0.4F, rectangle1.height, 0.01F);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(1.0F, 1.0F, 1.0F, 1099.1113F);
      float float0 = rectangle0.verticalOverlapRatio(rectangle0);
      assertEquals(1.0F, float0, 0.01F);
      assertEquals(550.5556640625, rectangle0.getCenterY(), 0.01);
      assertEquals(2.0, rectangle0.getMaxX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      float float0 = rectangle0.verticalOverlap(rectangle0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      Rectangle rectangle1 = new Rectangle(0.4F, 0.0F, 0.0F, 0.0F);
      Rectangle rectangle2 = rectangle1.merge(rectangle0);
      float float0 = rectangle1.verticalOverlap(rectangle2);
      assertEquals(0.4F, rectangle1.height, 0.01F);
      assertEquals(0.4F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();
      linkedList0.push(rectangle0);
      Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);
      Rectangle rectangle2 = Rectangle.boundingBoxOf(linkedList0);
      float float0 = rectangle1.overlapRatio(rectangle2);
      assertEquals(0.0F, rectangle2.getArea(), 0.01F);
      assertEquals((-1.0F), float0, 0.01F);
      assertEquals(1.401298464324817E-45, rectangle2.getMaxX(), 0.01);
      assertEquals(7.006492321624085E-46, rectangle2.getCenterY(), 0.01);
      assertEquals(0.0F, rectangle2.x, 0.01F);
      assertEquals(0.0F, rectangle2.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);
      Rectangle rectangle1 = rectangle0.merge(rectangle0);
      assertEquals(6.805646932770577E38, rectangle1.getMaxY(), 0.01);
      assertEquals(6.805646932770577E38, rectangle1.getMaxX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(0.0F, 815.528F, 758.42F, (-620.2595F));
      Rectangle rectangle1 = new Rectangle((-1129.3281F), 0, 1499.9037F, (-304.8784F));
      rectangle1.merge(rectangle0);
      assertEquals(1573.948F, rectangle1.width, 0.01F);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();
      Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);
      Rectangle rectangle1 = new Rectangle();
      rectangle1.setLeft(14.092807F);
      rectangle0.setLeft((-1137.2F));
      rectangle1.x = 0.0F;
      rectangle0.merge(rectangle1);
      assertEquals(0.0F, rectangle0.height, 0.01F);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(1.0F, 1.0F, 1.0F, 1099.1113F);
      float float0 = rectangle0.getTop();
      assertEquals(1099.1113F, rectangle0.getArea(), 0.01F);
      assertEquals(1.0F, float0, 0.01F);
      assertEquals(1.0F, rectangle0.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));
      rectangle0.add((double) (-3515.6F), (double) (-716.1035F));
      rectangle0.getTop();
      assertEquals(3515.6F, rectangle0.width, 0.01F);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(0.0F, 532.54016F, 0.0F, 229.62F);
      float float0 = rectangle0.getRight();
      assertEquals(0.0F, rectangle0.width, 0.01F);
      assertEquals(0.0F, rectangle0.y, 0.01F);
      assertEquals(114.80999755859375, rectangle0.getCenterY(), 0.01);
      assertEquals(532.54016F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();
      Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);
      rectangle0.setLeft((-1137.2F));
      float float0 = rectangle0.getRight();
      assertEquals((-1137.2F), rectangle0.x, 0.01F);
      assertEquals((-1137.2F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      float float0 = rectangle0.getLeft();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();
      Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);
      rectangle0.setLeft((-1137.2F));
      float float0 = rectangle0.getLeft();
      assertEquals(0.0F, rectangle0.width, 0.01F);
      assertEquals((-1137.2F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(1.0F, (-486.23865F), 1.0F, 2254.05F);
      float float0 = rectangle0.getBottom();
      assertEquals(2255.05F, float0, 0.01F);
      assertEquals((-485.2386474609375), rectangle0.getMaxX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      rectangle0.y = (-2670.0F);
      float float0 = rectangle0.getBottom();
      assertEquals((-2670.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));
      float float0 = rectangle0.getArea();
      assertEquals(0.0F, rectangle0.x, 0.01F);
      assertEquals(0.0F, rectangle0.y, 0.01F);
      assertEquals(-0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle((-3515.6F), (-574.0F), (-3515.6F), 5197.301F);
      float float0 = rectangle0.getArea();
      assertEquals((-574.0F), rectangle0.x, 0.01F);
      assertEquals((-3515.6F), rectangle0.y, 0.01F);
      assertEquals((-1.8271632E7F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();
      Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);
      Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);
      int int0 = rectangle1.compareTo(rectangle0);
      assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);
      assertEquals(3.4028235E38F, rectangle0.y, 0.01F);
      assertEquals(3.4028235E38F, rectangle0.x, 0.01F);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(1352.58F, 1247.0F, 1352.58F, 1.4E-45F);
      assertEquals(1352.58F, rectangle0.width, 0.01F);
      
      rectangle0.setFrameFromCenter(0.0, 0.0, (double) (-1638.3978F), 1.0);
      LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();
      linkedList0.push(rectangle0);
      Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);
      assertTrue(rectangle1.equals((Object)rectangle0));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(0.0F, 0.0F, 0.0F, (-3515.6F));
      rectangle0.add((double) (-3515.6F), (double) (-716.1035F));
      LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();
      linkedList0.push(rectangle0);
      assertEquals(3515.6F, rectangle0.width, 0.01F);
      
      Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);
      Rectangle rectangle2 = Rectangle.boundingBoxOf(linkedList0);
      float float0 = rectangle1.overlapRatio(rectangle2);
      assertEquals(1.0000001F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();
      Rectangle rectangle0 = new Rectangle(1.0F, 1.0F, (-1208.817F), 3.4028235E38F);
      linkedList0.add(rectangle0);
      assertEquals(1.0F, rectangle0.y, 0.01F);
      
      Rectangle rectangle1 = Rectangle.boundingBoxOf(linkedList0);
      assertEquals((-3.4028235E38F), rectangle1.getArea(), 0.01F);
      assertEquals(1.0F, rectangle1.x, 0.01F);
      assertEquals(1.0F, rectangle1.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      // Undeclared exception!
      try { 
        rectangle0.verticallyOverlaps((Rectangle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("technology.tabula.Rectangle", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      // Undeclared exception!
      try { 
        rectangle0.verticalOverlapRatio((Rectangle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("technology.tabula.Rectangle", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      // Undeclared exception!
      try { 
        rectangle0.overlapRatio((Rectangle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("technology.tabula.Rectangle", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      // Undeclared exception!
      try { 
        rectangle0.merge((Rectangle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      // Undeclared exception!
      try { 
        rectangle0.horizontallyOverlaps((Rectangle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("technology.tabula.Rectangle", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      // Undeclared exception!
      try { 
        rectangle0.horizontalOverlap((Rectangle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("technology.tabula.Rectangle", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      // Undeclared exception!
      try { 
        rectangle0.compareTo((Rectangle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("technology.tabula.Rectangle", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      // Undeclared exception!
      try { 
        Rectangle.boundingBoxOf((List<? extends Rectangle>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("technology.tabula.Rectangle", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();
      Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);
      float float0 = rectangle0.getArea();
      assertEquals(3.4028235E38F, rectangle0.y, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);
      assertEquals(3.4028235E38F, rectangle0.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      // Undeclared exception!
      try { 
        rectangle0.verticalOverlap((Rectangle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("technology.tabula.Rectangle", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      float float0 = rectangle0.getBottom();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      float float0 = rectangle0.getTop();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();
      Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);
      float float0 = rectangle0.getRight();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);
      assertEquals(3.4028235E38F, rectangle0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(1.0F, 1.0F, 1.0F, 1099.1113F);
      float float0 = rectangle0.horizontalOverlap(rectangle0);
      assertEquals(1.0F, float0, 0.01F);
      assertEquals(1.5, rectangle0.getCenterX(), 0.01);
      assertEquals(550.5556640625, rectangle0.getCenterY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();
      Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);
      float float0 = rectangle0.getLeft();
      assertEquals(3.4028235E38F, float0, 0.01F);
      assertEquals(3.4028235E38F, rectangle0.y, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();
      Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);
      Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);
      rectangle0.setBottom(3.4028235E38F);
      rectangle1.add(0.0, (double) 0.0F);
      float float0 = rectangle0.verticalOverlapRatio(rectangle1);
      assertEquals(Float.POSITIVE_INFINITY, rectangle1.width, 0.01F);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();
      Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);
      Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);
      rectangle1.add(0.0, (double) 0.0F);
      float float0 = rectangle0.verticalOverlapRatio(rectangle1);
      assertEquals(Float.POSITIVE_INFINITY, rectangle1.height, 0.01F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();
      Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);
      Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);
      float float0 = rectangle0.verticalOverlapRatio(rectangle1);
      assertEquals(3.4028235E38F, rectangle0.y, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);
      assertEquals(3.4028235E38F, rectangle0.x, 0.01F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      Rectangle rectangle1 = new Rectangle(0.0F, 815.528F, 758.42F, (-620.2595F));
      float float0 = rectangle0.verticalOverlapRatio(rectangle1);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0F, rectangle1.y, 0.01F);
      assertEquals(1194.7380065917969, rectangle1.getCenterX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();
      Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);
      Rectangle rectangle1 = new Rectangle(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);
      rectangle1.add(0.0, (double) 0.0F);
      float float0 = rectangle1.verticalOverlapRatio(rectangle0);
      assertEquals(Float.POSITIVE_INFINITY, rectangle1.width, 0.01F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(1352.58F, 1247.0F, 1352.58F, 1.4E-45F);
      boolean boolean0 = rectangle0.horizontallyOverlaps(rectangle0);
      assertEquals(1247.0F, rectangle0.x, 0.01F);
      assertEquals(1352.58F, rectangle0.y, 0.01F);
      assertTrue(boolean0);
      assertEquals(1.896E-42F, rectangle0.getArea(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(4059.052F, 4059.052F, 4059.052F, 4059.052F);
      boolean boolean0 = rectangle0.verticallyOverlaps(rectangle0);
      assertEquals(4059.052F, rectangle0.x, 0.01F);
      assertEquals(4059.052F, rectangle0.y, 0.01F);
      assertEquals(1.6475903E7F, rectangle0.getArea(), 0.01F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      boolean boolean0 = rectangle0.verticallyOverlaps(rectangle0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(653.869F, 4128.04F, 4128.04F, 4128.04F);
      Rectangle rectangle1 = new Rectangle(653.869F, 4128.04F, 653.869F, 4128.04F);
      rectangle0.compareTo(rectangle1);
      assertEquals(4781.9090576171875, rectangle1.getMaxY(), 0.01);
      assertEquals(4781.9090576171875, rectangle1.getMaxX(), 0.01);
      assertEquals(4128.04F, rectangle0.width, 0.01F);
      assertEquals(0, rectangle1.isLtrDominant());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(4059.052F, 4059.052F, 4059.052F, 4059.052F);
      int int0 = rectangle0.compareTo(rectangle0);
      assertEquals(8118.10400390625, rectangle0.getMaxX(), 0.01);
      assertEquals(0, int0);
      assertEquals(6088.5780029296875, rectangle0.getCenterY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();
      Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);
      float float0 = rectangle0.overlapRatio(rectangle0);
      assertEquals(1.7014117331926443E38, rectangle0.getCenterY(), 0.01);
      assertEquals(1.7014117331926443E38, rectangle0.getCenterX(), 0.01);
      assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      int int0 = rectangle0.isLtrDominant();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();
      Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);
      boolean boolean0 = rectangle0.horizontallyOverlaps(rectangle0);
      assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);
      assertFalse(boolean0);
      assertEquals(3.4028235E38F, rectangle0.x, 0.01F);
      assertEquals(3.4028235E38F, rectangle0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();
      Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);
      Point2D[] point2DArray0 = rectangle0.getPoints();
      assertEquals(3.4028235E38F, rectangle0.x, 0.01F);
      assertEquals(3.4028235E38F, rectangle0.y, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, rectangle0.getArea(), 0.01F);
      assertEquals(4, point2DArray0.length);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      LinkedList<Rectangle> linkedList0 = new LinkedList<Rectangle>();
      Rectangle rectangle0 = Rectangle.boundingBoxOf(linkedList0);
      String string0 = rectangle0.toString();
      assertEquals("technology.tabula.Rectangle[x=3.4028235E38,y=3.4028235E38,w=-3.4028235E38,h=-3.4028235E38,bottom=0.000000,right=0.000000]", string0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle();
      Rectangle rectangle1 = new Rectangle(0.4F, 0.0F, 0.0F, 0.0F);
      int int0 = rectangle0.compareTo(rectangle1);
      assertEquals(0.0F, rectangle1.x, 0.01F);
      assertEquals(0.0F, rectangle1.height, 0.01F);
      assertEquals(0.0F, rectangle1.width, 0.01F);
      assertEquals((-1), int0);
      assertEquals(0.0, rectangle1.getMaxX(), 0.01);
  }
}
