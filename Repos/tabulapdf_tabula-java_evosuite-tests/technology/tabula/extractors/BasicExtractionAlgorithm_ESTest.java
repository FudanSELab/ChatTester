/*
 * This file was automatically generated by EvoSuite
 * Sat Feb 10 09:49:38 GMT 2024
 */

package technology.tabula.extractors;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import technology.tabula.Line;
import technology.tabula.Page;
import technology.tabula.Ruling;
import technology.tabula.TextChunk;
import technology.tabula.extractors.BasicExtractionAlgorithm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BasicExtractionAlgorithm_ESTest extends BasicExtractionAlgorithm_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      // Undeclared exception!
      try { 
        BasicExtractionAlgorithm.columnPositions((List<Line>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("technology.tabula.extractors.BasicExtractionAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LinkedList<Line> linkedList0 = new LinkedList<Line>();
      // Undeclared exception!
      try { 
        BasicExtractionAlgorithm.columnPositions(linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LinkedList<TextChunk> linkedList0 = new LinkedList<TextChunk>();
      TextChunk textChunk0 = new TextChunk((-1.0F), 1.0F, 282.6638F, (-1.0F));
      linkedList0.add(textChunk0);
      linkedList0.add(textChunk0);
      List<Line> list0 = TextChunk.groupByLines(linkedList0);
      List<Float> list1 = BasicExtractionAlgorithm.columnPositions(list0);
      assertEquals(0, list1.size());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      linkedList0.add((Float) null);
      BasicExtractionAlgorithm basicExtractionAlgorithm0 = new BasicExtractionAlgorithm();
      // Undeclared exception!
      try { 
        basicExtractionAlgorithm0.extract((Page) null, (List<Float>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("technology.tabula.extractors.BasicExtractionAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LinkedList<Line> linkedList0 = new LinkedList<Line>();
      Line line0 = new Line();
      linkedList0.add(line0);
      List<Float> list0 = BasicExtractionAlgorithm.columnPositions(linkedList0);
      LinkedList<Ruling> linkedList1 = new LinkedList<Ruling>();
      BasicExtractionAlgorithm basicExtractionAlgorithm0 = new BasicExtractionAlgorithm(linkedList1);
      // Undeclared exception!
      try { 
        basicExtractionAlgorithm0.extract((Page) null, list0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("technology.tabula.extractors.BasicExtractionAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LinkedList<Ruling> linkedList0 = new LinkedList<Ruling>();
      BasicExtractionAlgorithm basicExtractionAlgorithm0 = new BasicExtractionAlgorithm(linkedList0);
      String string0 = basicExtractionAlgorithm0.toString();
      assertEquals("stream", string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      BasicExtractionAlgorithm basicExtractionAlgorithm0 = new BasicExtractionAlgorithm();
      // Undeclared exception!
      try { 
        basicExtractionAlgorithm0.extract((Page) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("technology.tabula.extractors.BasicExtractionAlgorithm", e);
      }
  }
}
